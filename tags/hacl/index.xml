<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HACL* on Franziskus Kiefer</title>
    <link>https://www.franziskuskiefer.de/tags/hacl/</link>
    <description>Recent content in HACL* on Franziskus Kiefer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.franziskuskiefer.de/tags/hacl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shipping (some) HACL*</title>
      <link>https://www.franziskuskiefer.de/post/hacl-nss-integration/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.franziskuskiefer.de/post/hacl-nss-integration/</guid>
      <description>If you didn&#39;t read the article about the HACL* approach, go there first and read it. tl;dr
 HACL* is a cryptographic library written in F* that allows translation to C using kremlin. It guarantees memory safety, secret independent computation, and functional correctness with respect to a mathematical specification.
  In this second blog post I describe the process of integrating code from HACL*, a researchy crypto library, into NSS, a production library shipping to millions of people, running on a plethora of platforms.</description>
    </item>
    
    <item>
      <title>The HACL* approach</title>
      <link>https://www.franziskuskiefer.de/post/hacl-star/</link>
      <pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.franziskuskiefer.de/post/hacl-star/</guid>
      <description>HACL* (High-Assurance Cryptographic Library) is a formally verified cryptographic library in F*, developed by the Prosecco team at INRIA Paris in collaboration with Microsoft Research, as part of Project Everest. HACL* was inspired by discussions at the HACS workshop and aims at developing a set of reference implementations in C for common cryptographic primitives.
This is the first post in a series describing formal verification in NSS as an approach to improve confidence in highly complex, highly security critical code.</description>
    </item>
    
  </channel>
</rss>