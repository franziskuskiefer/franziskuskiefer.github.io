<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Specs on Dr Franziskus Kiefer</title><link>https://www.franziskuskiefer.de/tags/specs/</link><description>Recent content in Specs on Dr Franziskus Kiefer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.franziskuskiefer.de/tags/specs/index.xml" rel="self" type="application/rss+xml"/><item><title>Wrapping arithmetic in Rust</title><link>https://www.franziskuskiefer.de/p/wrapping-arithmetic-in-rust/</link><pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/wrapping-arithmetic-in-rust/</guid><description>&lt;p>One of Rusts great feature is that it catches integer overflows at runtime and panics rather than wraps (in debug builds).
I recommend you read &lt;a class="link" href="https://huonw.github.io/blog/2016/04/myths-and-legends-about-integer-overflow-in-rust/" target="_blank" rel="noopener"
>Huon&amp;rsquo;s blog post&lt;/a> about this from a couple years ago.&lt;/p>
&lt;p>While this is a desirable behaviour in general, integer overflows are commonly used when implementing cryptography primitives.
Rust offers wrapping alternatives such as &lt;code>wrapping_add&lt;/code> etc. to allow wrapping behaviour.
However, this makes code very hard to read, e.g. &lt;code>let c = a + b&lt;/code> is easier to read than &lt;code>let c = a.wrapping_add(b)&lt;/code>.&lt;/p>
&lt;h2 id="other-wrapping-arithmetic">Other wrapping arithmetic
&lt;/h2>&lt;p>Rust itself provides a wrapping integer type in &lt;a class="link" href="https://doc.rust-lang.org/std/num/struct.Wrapping.html" target="_blank" rel="noopener"
>&lt;code>std::num::Wrapping&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Rust" data-lang="Rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">num&lt;/span>::&lt;span class="n">Wrapping&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">zero&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Wrapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="k">u32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Wrapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="k">u32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="kt">u32&lt;/span>::&lt;span class="no">MAX&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">zero&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a good solution when you want to be explicit about what you&amp;rsquo;re doing.
However, its readability is still not great.&lt;/p>
&lt;h2 id="wrappit">#[wrappit]
&lt;/h2>&lt;p>To alleviate this shortcoming I implemented a &lt;a class="link" href="https://doc.rust-lang.org/reference/procedural-macros.html" target="_blank" rel="noopener"
>procedural macro&lt;/a> that rewrites arithmetic operators &lt;code>+,-,*&lt;/code> into their wrapping equivalents &lt;code>wrapping_add, wrapping_sub, wrapping_mul&lt;/code> as well as their assigning versions &lt;code>+=,-=,*=&lt;/code>.&lt;/p>
&lt;p>The following function for example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Rust" data-lang="Rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[wrappit]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">mix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">u32&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">u32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>is rewritten to&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Rust" data-lang="Rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">mix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">u32&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">u32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wrapping_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wrapping_mul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find wrapping_arithmetic on &lt;a class="link" href="https://github.com/franziskuskiefer/wrapping-arithmetic" target="_blank" rel="noopener"
>GitHub&lt;/a> and on &lt;a class="link" href="https://crates.io/crates/wrapping_arithmetic" target="_blank" rel="noopener"
>crates.io&lt;/a>.
To use &lt;code>#[wrappit]&lt;/code> add &lt;code>wrapping_arithmetic = &amp;quot;0.1&amp;quot;&lt;/code> to your &lt;code>cargo.toml&lt;/code>.&lt;/p></description></item><item><title>Update on hacspec</title><link>https://www.franziskuskiefer.de/p/update-on-hacspec/</link><pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/update-on-hacspec/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/update-on-hacspec/hacspec2-architecture.png" alt="Featured image of post Update on hacspec" />&lt;p>Earlier this year I introduced &lt;a class="link" href="../hacspec1" >hacspec, a new specification language for cryptographic primitives&lt;/a>.
After Karthik presented the idea and very preliminary results at &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/blob/master/doc/hacspec-short-talk-CFRG-IETF-101.pdf" target="_blank" rel="noopener"
>IETF 101&lt;/a> in March we made quite some progress and presented a paper with a little more detail at &lt;a class="link" href="https://ssr2018.net/" target="_blank" rel="noopener"
>SSR&lt;/a> earlier this week.
In this blog post I&amp;rsquo;ll give the gist of the &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/blob/master/doc/hacspec-ssr18-paper.pdf" target="_blank" rel="noopener"
>SSR paper&lt;/a> and introduce the first version of &lt;em>hacspec&lt;/em>.&lt;/p>
&lt;p>All information about &lt;em>hacspec&lt;/em> can be found at &lt;a class="link" href="https://hacs-workshop.github.io/hacspec/" target="_blank" rel="noopener"
>https://hacs-workshop.github.io/hacspec/&lt;/a>.&lt;/p>
&lt;h2 id="the-language">The language
&lt;/h2>&lt;p>The &lt;em>hacspec&lt;/em> language is a DSL for cryptographic algorithms.
But it can also be seen as a typed subset of Python.
The following describes the language.&lt;/p>
&lt;pre tabindex="0">&lt;code> Values v ::=
n integer constants
| True | False boolean constants
| &amp;#39;...&amp;#39; | &amp;#34;...&amp;#34; string constants
| (v1,...,vn) tuple constant
| array([v1,...,vn]) array constant
Expressions e ::=
v values
| x | m.x local and global variables
| (e1,...,en) tuple construction
| array([e1,...,en]) array construction
| array.length(e) array length
| e[e0] array access
| e[e0:e1] array slice
| e(e1,...,en) function call
| e1 binop e2 builtin binary operators
| unaryop e builtin unary operators
Types t ::=
int, str, bool basic types
| tuple_t(t1,...,tn) tuples
| vlarray_t(t) variable-length array
| x user-defined or builtin type
| x(t1,...,tn,e1,...,em) builtin type application
Statements s ::=
x: Type = t type declaration
| x: t variable declaration
| x = e variable assignment
| x binop= e augmented variable assignment
| (x1,..,xn) = e tuple matching
| x[i] = e array update
| x[i] binop= e augmented array update
| x[i:j] = e array slice update
| if e: if-elif-else conditional
s1...sn
elif e:
s1&amp;#39;...sn&amp;#39;
else
s1&amp;#39;&amp;#39;...sn&amp;#39;&amp;#39;
| for i in range(e): for loop
s1...sn
| break break from loop
| def x(x1:t1,...,xn:tn) -&amp;gt; t: function declaration
s1 ... sn
| return e return from function
| from x import x1, x2,..., xn module import
Specs σ ::= s1...sn sequence of statements
&lt;/code>&lt;/pre>&lt;h2 id="hacspec-architecture">hacspec architecture
&lt;/h2>&lt;p>The &lt;em>hacspec&lt;/em> architecture is depicted in the following graph.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/update-on-hacspec/hacspec2-architecture.png"
width="2873"
height="2451"
srcset="https://www.franziskuskiefer.de/p/update-on-hacspec/hacspec2-architecture_hu3195581800283001141.png 480w, https://www.franziskuskiefer.de/p/update-on-hacspec/hacspec2-architecture_hu2649430833740968362.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;h2 id="writing-hacspec">Writing hacspec
&lt;/h2>&lt;p>Every spec should be accompanied by a test and some test vectors leaving the author with at least two files, e.g. &lt;code>poly.py&lt;/code> and &lt;code>poly_test.py&lt;/code> (also see &lt;a class="link" href="#Example" >Example section&lt;/a>).
Note that only the spec file has to be &lt;em>hacspec&lt;/em> syntax.
The test file can make use of all of Python.
&lt;em>hacspec&lt;/em> comes with a standard library called speclib and a spec-checker.
To use the &lt;em>hacspec&lt;/em> speclib and spec-checker install them via &lt;code>pip install hacspec&lt;/code> or from the source (the &lt;code>setup.py&lt;/code> for the Python package can be found in &lt;code>/build/&lt;/code>).
Running &lt;em>hacspec&lt;/em> requires a Python interpreter version 3.6.4 or newer.&lt;/p>
&lt;h3 id="speclib">speclib
&lt;/h3>&lt;p>Commonly used functionality is provided in &lt;em>speclib&lt;/em> (&lt;code>from hacspec.speclib import *&lt;/code>).
The full speclib documentation can be found &lt;a class="link" href="https://hacs-workshop.github.io/hacspec/docs/" target="_blank" rel="noopener"
>here&lt;/a>.
Some highlights are&lt;/p>
&lt;ul>
&lt;li>&lt;em>modular arithmetic&lt;/em>: &lt;code>natmod_t&lt;/code> is an integer data type that provides modular arithmetic, e.g. &lt;code>felem_t = natmod_t((2**130)-5)&lt;/code> defines field elements modulo &lt;code>(2**130)-5&lt;/code>.&lt;/li>
&lt;li>&lt;em>machine integers&lt;/em>: &lt;code>unitN_t&lt;/code> define commonly used machine integer types for &lt;code>N = 8, 16, 32, 64, 128&lt;/code>.&lt;/li>
&lt;li>&lt;em>byte arrays, vectors, and matrices&lt;/em>: provided data structures are &lt;code>array_t, bytes_t, vector_t, matrix_t&lt;/code> as well as the variable length versions &lt;code>vlarray_t&lt;/code> and &lt;code>vlbytes_t&lt;/code>. Note that the vector and matrix data types offer point-wise arithmetic.&lt;/li>
&lt;li>&lt;em>refinements&lt;/em>: &lt;code>refine_t&lt;/code> allows to refine data types.&lt;/li>
&lt;li>&lt;em>contracts&lt;/em>: &lt;code>@contract&lt;/code> annotation on functions can be used for pre- and post-conditions.&lt;sup>1&lt;/sup>&lt;/li>
&lt;/ul>
&lt;h3 id="spec-checker">spec-checker
&lt;/h3>&lt;p>Since hacspecs are executed with a Python interpreter it is not sufficient to run &lt;em>hacspec&lt;/em> to check their syntax.
To check that the syntax is valid a spec-checker is provided.&lt;sup>2&lt;/sup>&lt;/p>
&lt;pre tabindex="0">&lt;code>hacspec-check &amp;lt;your-hacspec&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="executing-hacspec">Executing hacspec
&lt;/h3>&lt;p>&lt;em>hacspec&lt;/em> tests are executed with the Python interpreter.
Executing tests on a spec can yield three different results.&lt;/p>
&lt;ol>
&lt;li>The execution is successful and all test vectors pass. In this case the spec is most likely correct and doesn&amp;rsquo;t contain any obvious typing issues.&lt;/li>
&lt;li>The execution fails because of a failing test case. In this case the spec is probably wrong (or the test vectors are incorrect).&lt;/li>
&lt;li>The execution fails because of a type error. The speclib as well as &lt;a class="link" href="https://github.com/agronholm/typeguard/" target="_blank" rel="noopener"
>typeguard&lt;/a> are used to perform runtime type checks.&lt;/li>
&lt;/ol>
&lt;h2 id="checking-and-compiling-hacspec">Checking and compiling hacspec
&lt;/h2>&lt;p>To use &lt;em>hacspecs&lt;/em> for formal verification such as verification of cryptographic properties of an algorithm, generating code in other languages from the spec, or verifying correctness of other implementations with it, a second set of tools is provided.
These tools are written in OCaml and thus require additional setup and are not packaged right now.&lt;sup>3&lt;/sup>
Check out the &lt;a class="link" href="https://github.com/HACS-workshop/hacspec" target="_blank" rel="noopener"
>repository&lt;/a> to use them.
All tools can be easily called via &lt;code>make&lt;/code> (see documentation in the repo &lt;code>/compiler/&lt;/code> for details).&lt;/p>
&lt;h3 id="type-checker">Type checker
&lt;/h3>&lt;p>To perform proper type checking Python is impractical.
A native type checker is implemented in OCaml that performs syntax and type checking for &lt;em>hacspec&lt;/em>.
To run the type checker on a spec simply run &lt;code>./checker.native &amp;lt;your-spec&amp;gt;&lt;/code>.&lt;/p>
&lt;h3 id="compiler">Compiler
&lt;/h3>&lt;p>The type checker also produces a typed AST that can be used to generate the spec in another formal language.
There are currently compiler for EasyCrypt and F*.
I&amp;rsquo;ll only describe the F* compiler as it&amp;rsquo;s more complete.&lt;/p>
&lt;h4 id="f-compiler">F* compiler
&lt;/h4>&lt;p>The F* compiler requires &lt;a class="link" href="https://github.com/mitls/hacl-star/" target="_blank" rel="noopener"
>&lt;code>HACL_HOME&lt;/code>&lt;/a> and &lt;a class="link" href="https://github.com/FStarLang/FStar" target="_blank" rel="noopener"
>&lt;code>FSTAR_HOME&lt;/code>&lt;/a> environment variables to be set.
The compiler is then invoked like this &lt;code>./to_fstar &amp;lt;your-spec&amp;gt;&lt;/code>.
The generated F* spec can then be type checked or executed on test vectors to check correctness of the spec.
Using &lt;a class="link" href="https://github.com/FStarLang/kremlin" target="_blank" rel="noopener"
>kremlin&lt;/a> the F* code can also be used to generate C code.&lt;/p>
&lt;h2 id="Example">Example
&lt;/h2>&lt;p>The &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/specs" target="_blank" rel="noopener"
>&lt;em>hacspec&lt;/em> repo&lt;/a> has many examples.
I&amp;rsquo;ll only give a short one here.&lt;/p>
&lt;p>The spec &lt;code>poly.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">hacspec.speclib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p130m5&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">nat_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">130&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">felem_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">natmod_t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p130m5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@typechecked&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">nat_t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">natmod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">p130m5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@typechecked&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">poly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">vlarray_t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">felem_t&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">felem_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">acc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">r&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">acc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The test &lt;code>poly_test.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">poly&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x6f4620636968706172676f7470797243&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x6f7247206863726165736552206d7572&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xa806d542fe52447f336d555778bed685&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">expected&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">natmod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xa01b776a69ea8c1cd3ba00179dc218ab&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p130m5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">poly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">expected&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Error&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Expected: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expected&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Got: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Test successful&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This can now be run with &lt;code>python poly_test.py&lt;/code> and checked with &lt;code>hacspec-check poly.py&lt;/code> and &lt;code>checker.native poly.py&lt;/code>.
Compiling this to F* can be done with &lt;code>to_fstar.native poly.py&lt;/code>, generating the following F* code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ocaml" data-lang="ocaml">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="nc">Poly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">open&lt;/span> &lt;span class="nc">Speclib&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">p130m5&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">nat_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="o">**.&lt;/span> &lt;span class="n">130&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-.&lt;/span> &lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">felem_t&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nc">Type0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">natmod_t&lt;/span> &lt;span class="n">p130m5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">felem&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">nat_t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">felem_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">natmod&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="n">p130m5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">poly&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">vlarray_t&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">felem_t&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">felem&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repeati&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">array_length&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">acc&lt;/span> &lt;span class="o">+.&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">*.&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="next-steps">Next steps
&lt;/h1>&lt;p>We hope that &lt;em>hacspec&lt;/em> is a useful tool for spec authors and many people indeed voiced interest already.
While the tooling isn&amp;rsquo;t perfect yet, the language is developed enough to start using it.
The next steps for &lt;em>hacspec&lt;/em> is to get some usage from spec authors and improve tooling.
We also hope to get more compilers for different formal languages implemented.&lt;/p>
&lt;br>
&lt;hr>
&lt;br>
&lt;ol>
&lt;li>Note that contracts are still in development and not fully supported yet.&lt;/li>
&lt;li>In future &lt;em>hacspec&lt;/em> syntax checks and running test vectors on the spec should be done in one invocation.&lt;/li>
&lt;li>In future pre-built binaries should be distributed to make this easier.&lt;/li>
&lt;/ol>
&lt;p>&lt;em>hacspec is mostly a spare time project for me at the moment. Development is therefore not always as fast as I&amp;rsquo;d like.&lt;/em>&lt;/p></description></item><item><title>Introducing HacSpec</title><link>https://www.franziskuskiefer.de/p/introducing-hacspec/</link><pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/introducing-hacspec/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/introducing-hacspec/hero.png" alt="Featured image of post Introducing HacSpec" />&lt;p>HacSpec is a proposal for a new specification language for cryptographic primitives that is succinct, that is easy to read and implement, and that lends itself to formal verification.
It aims to formalise the pseudocode used in cryptographic standards by proposing a formal syntax that can be checked for simple errors.
HacSpec specifications are further executable to test against test vectors specified in a common syntax.&lt;/p>
&lt;p>The main focus of HacSpec is to allow specifications to be compiled to formal languages such as cryptol, coq, F*, and easycrypt and thus make it easier to formally verify implementations.
This allows a specification using HacSpec to be the basis not only for implementations but also for formal proofs of functional correctness, cryptographic security, and side-channel resistance.&lt;/p>
&lt;p>The idea of having a language like HacSpec stems from discussions at the recent HACS workshop in Zurich.
The &lt;a class="link" href="https://hacs-workshop.github.io/" target="_blank" rel="noopener"
>High-Assurance-Cryptographic-Software workshop (HACS)&lt;/a> is an invite-only workshop co-located with the &lt;a class="link" href="https://rwc.iacr.org/" target="_blank" rel="noopener"
>Real World Crypto&lt;/a> symposium.&lt;/p>
&lt;p>Anyone interested in moving this project forward should subscribe to the &lt;a class="link" href="https://moderncrypto.org/mail-archive/hacspec/" target="_blank" rel="noopener"
>mailing list&lt;/a> or file issues and pull requests against the &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/" target="_blank" rel="noopener"
>Github repository&lt;/a>.&lt;/p>
&lt;h2 id="how-far-are-we">How far are we?
&lt;/h2>&lt;p>We discussed and hacked at HACS a month ago and improved a little over the last weeks.
The current state can be found at &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/" target="_blank" rel="noopener"
>Github repository&lt;/a>.&lt;/p>
&lt;h3 id="the-language">The language
&lt;/h3>&lt;p>There are &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/specs" target="_blank" rel="noopener"
>examples&lt;/a> written in what we believe could be the HacSpec.
The language is valid Python 3.6 using PEP484 and PEP526 for typing.
It further uses comments (similar to PEP484 types) to define lengths and ranges.&lt;/p>
&lt;p>There are also &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/specs/hacspec-rust" target="_blank" rel="noopener"
>experiments using Rust&lt;/a> as basis for HacSpec.
While Rust&amp;rsquo;s type system makes it a compelling candidate, limitations in handling integers of arbitrary size means we probably won&amp;rsquo;t be basing HacSpec on Rust.&lt;/p>
&lt;p>The &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/blob/master/LANGUAGE.md" target="_blank" rel="noopener"
>language specification&lt;/a> is currently vague and not fully formalised yet.
It lives in a markdown document but will move to an RFC layout later.&lt;/p>
&lt;h3 id="formal-specifications">Formal specifications
&lt;/h3>&lt;p>To show how cryptographic primitives are modelled in formal languages we added a number of &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/formal-models" target="_blank" rel="noopener"
>specifications&lt;/a> in different languages such as cryptol, coq, F*, and easycrypt to the repository.&lt;/p>
&lt;h3 id="spec-checker">Spec checker
&lt;/h3>&lt;p>In order to verify whether a specification is a valid HacSpec Aaron started to implement a &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/spec-checker" target="_blank" rel="noopener"
>spec-checker&lt;/a>.
Basing HacSpec on another language like Python means that not all valid Python programs are valid HacSpec programs.
The spec checker is supposed to tell authors whether a given python program is a valid HacSpec.&lt;/p>
&lt;h3 id="compilers">Compilers
&lt;/h3>&lt;p>There&amp;rsquo;s currently a very basic &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/spec-compilers" target="_blank" rel="noopener"
>HacSpec to F* compiler&lt;/a> from Karthik.
Eventually we would like to have compilers from HacSpec to all common formal languages such as cryptol, coq, F*, and easycrypt.&lt;/p>
&lt;h2 id="call-for-participation">Call for participation
&lt;/h2>&lt;p>We invite contributions in the following areas.&lt;/p>
&lt;ul>
&lt;li>We invite people to submit “standalone&amp;quot; formal specs for inclusion in the formal-models directory.&lt;/li>
&lt;li>We invite formal methods people to build compilers from HacSpec to their favourite modelling language.&lt;/li>
&lt;li>We invite spec authors and developers to comment on HacSpec and provide examples of what they consider good crypto specs or beautiful “obviously correct” crypto implementations.&lt;/li>
&lt;li>We invite developers to build compilers from HacSpec to their favourite programming language.&lt;/li>
&lt;/ul>
&lt;h2 id="what-hacspec-is-not-about">What HacSpec is not about
&lt;/h2>&lt;p>HacSpec does &lt;em>not&lt;/em> aim to be general enough to express protocols at this point. While this might be a target in the future the first iteration of HacSpec is only targeting crypto primitives.&lt;/p>
&lt;h2 id="links">Links
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/HACS-workshop/hacspec/" target="_blank" rel="noopener"
>Github repository&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://moderncrypto.org/mail-archive/hacspec/" target="_blank" rel="noopener"
>Mailing list&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>