<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NSS on Franziskus Kiefer</title>
    <link>https://www.franziskuskiefer.de/tags/nss/</link>
    <description>Recent content in NSS on Franziskus Kiefer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.franziskuskiefer.de/tags/nss/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shipping (some) HACL*</title>
      <link>https://www.franziskuskiefer.de/post/hacl-nss-integration/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.franziskuskiefer.de/post/hacl-nss-integration/</guid>
      <description>If you didn&#39;t read the article about the HACL* approach, go there first and read it. tl;dr
 HACL* is a cryptographic library written in F* that allows translation to C using kremlin. It guarantees memory safety, secret independent computation, and functional correctness with respect to a mathematical specification.
  In this second blog post I describe the process of integrating code from HACL*, a researchy crypto library, into NSS, a production library shipping to millions of people, running on a plethora of platforms.</description>
    </item>
    
    <item>
      <title>CVE-2017-5462 - A PRNG issue</title>
      <link>https://www.franziskuskiefer.de/post/cve-2017-5462/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.franziskuskiefer.de/post/cve-2017-5462/</guid>
      <description>On April 19, 2017, Mozilla Foundation published the Security Advisory 2017-10 outlining several recently fixed security vulnerabilities. One of these vulnerabilities, tracked as CVE-2017-5462, affects the Pseudo-Random Number Generator (PRNG) within the Network Security Services (NSS) library prior to version 3.29.5 and Firefox prior to version 53.
This post describes the bug and how it was discovered.
Inside the NSS PRNG NSS uses Hash_DRBG as PRNG, which is one of several PRNG schemes defined in the NIST Special Publication 800-90.</description>
    </item>
    
    <item>
      <title>Aes Gcm Speedup</title>
      <link>https://www.franziskuskiefer.de/post/aes-gcm-speedup/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.franziskuskiefer.de/post/aes-gcm-speedup/</guid>
      <description>AES-GCM is a NIST standardised authenticated encryption algorithm (FIPS 800-38D). Since its standardisation in 2008 its usage increased to a point where it is the prevalent encryption used with TLS. With 85% it is by far the most widely used cipher.
 Firefox 53 TLS cipher telemetry   Unfortunately the AES-GCM implementation used in Firefox (provided by NSS) does not take advantage of full hardware acceleration; it uses a slower software-only implementation on Mac, Linux 32-bit, or any device that doesn&#39;t have the AVX, PCLMUL, and AES-NI hardware instructions.</description>
    </item>
    
    <item>
      <title>On Constant Time Division</title>
      <link>https://www.franziskuskiefer.de/post/constant-time-division/</link>
      <pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.franziskuskiefer.de/post/constant-time-division/</guid>
      <description>Writing constant time code is hard. We all know that. But I&#39;m always amazed again on how difficult it is. In preparation for making NSS more constant time I looked into certain CPU instructions that are known to be not constant time. So I wrote a little thing to measure the time (CPU cycles) needed for division.
div rcx ; eax is now a/b The CPU I&#39;m using in this post is an Intel i7-4790 (haswell).</description>
    </item>
    
    <item>
      <title>NSS Static Analysis</title>
      <link>https://www.franziskuskiefer.de/post/nss-static-analysis/</link>
      <pubDate>Wed, 25 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.franziskuskiefer.de/post/nss-static-analysis/</guid>
      <description>When I started working on NSS 7 months ago one of the tasks I was asked to do was to work through the related Coverity issues. This post summarises some learnings from this as we&#39;ve since come a long way since over the last months.
Static analysis plays a crucial part in locating vulnerabilities and bugs during development. For NSS we currently use multiple static analysis tools. While scan-build as well as infer are great applications to find bugs, they require a lot of manual management.</description>
    </item>
    
  </channel>
</rss>