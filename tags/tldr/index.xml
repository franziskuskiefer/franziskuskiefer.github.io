<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tl;dr on Dr Franziskus Kiefer</title><link>https://www.franziskuskiefer.de/tags/tldr/</link><description>Recent content in Tl;dr on Dr Franziskus Kiefer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 24 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.franziskuskiefer.de/tags/tldr/index.xml" rel="self" type="application/rss+xml"/><item><title>TL;DR - Hybrid Public Key Encryption</title><link>https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/hybrid.jpg" alt="Featured image of post TL;DR - Hybrid Public Key Encryption" />&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is a &lt;a class="link" href="https://datatracker.ietf.org/rg/cfrg/about/" target="_blank" rel="noopener"
>CFRG&lt;/a> in &lt;a class="link" href="https://www.rfc-editor.org/rfc/rfc9180.html" target="_blank" rel="noopener"
>RFC 9180&lt;/a> that describes a scheme for hybrid public key encryption.
It is co-authored by my &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a> co-founder &lt;a class="link" href="https://bhargavan.info/index.html" target="_blank" rel="noopener"
>Karthikeyan Bhargavan&lt;/a> and one of
his PhD students &lt;a class="link" href="https://www.benjaminlipp.de" target="_blank" rel="noopener"
>Benjamin Lipp&lt;/a> as part of his research at &lt;a class="link" href="https://team.inria.fr/prosecco" target="_blank" rel="noopener"
>Inria&lt;/a>.&lt;/p>
&lt;p>This blog post will give a brief overview of the specification and describes some use cases.&lt;/p>
&lt;p>If you want to learn more about the security proofs behind HPKE and the RFC process,
Benjamin wrote an &lt;a class="link" href="https://www.benjaminlipp.de/p/hpke-cryptographic-standard/" target="_blank" rel="noopener"
>excellent blog post&lt;/a> about it.&lt;/p>
&lt;p>Hybrid Public Key Encryption, or short HPKE, is a cyrptographic mechanism that
allows encrypting payload to a public key.
It is called &amp;ldquo;hybrid&amp;rdquo; because the payload is encrypted with a symmetric scheme.
The symmetric key is then encrypted to the receivers public key.
The &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> standard defines a number of natural extensions to the basic setting
that allow the sender to authenticate themselves.&lt;/p>
&lt;h2 id="hybrid-crypto-systems">Hybrid Crypto Systems
&lt;/h2>&lt;p>Hybrid public key encryption has been used in different ways since the early 1990s in protocols such as &lt;a class="link" href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy" target="_blank" rel="noopener"
>PGP&lt;/a> or &lt;a class="link" href="https://en.wikipedia.org/wiki/Cryptographic_Message_Syntax" target="_blank" rel="noopener"
>SMIME&lt;/a>.
While these two protocols are for a very specific use case a more general version of hybrid encryption is described in &lt;a class="link" href="https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme" target="_blank" rel="noopener"
>ECIES&lt;/a>.
&lt;a class="link" href="https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme" target="_blank" rel="noopener"
>ECIES&lt;/a> is part of many systems nowadays.
&lt;a class="link" href="https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/storing_keys_in_the_secure_enclave" target="_blank" rel="noopener"
>Storing keys in the secure enclave on an iOS&lt;/a> device for example uses &lt;a class="link" href="https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme" target="_blank" rel="noopener"
>ECIES&lt;/a>.
For a deeper explanation and history of hybrid crypto systems I recommend reading
&lt;a class="link" href="https://blog.cloudflare.com/hybrid-public-key-encryption/" target="_blank" rel="noopener"
>Christopher Wood&amp;rsquo;s blog post&lt;/a>.&lt;/p>
&lt;p>However, there&amp;rsquo;s no general description of hybrid public key encryption with modern primitives.
The &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> standard solves this issue.
Even before the RFC is finalised it is used in specifications for &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-tls-esni/" target="_blank" rel="noopener"
>ECH&lt;/a>, &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>MLS&lt;/a>, &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-pauly-dprive-oblivious-doh/" target="_blank" rel="noopener"
>ODOH&lt;/a>, and &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-gpew-priv-ppm/" target="_blank" rel="noopener"
>PPM&lt;/a>.
This shows the high demand for &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>.&lt;/p>
&lt;p>HPKE has four distinct modes of operation: Base, Auth, PSK, AuthPSK.
In this blog post we only describe the two most commonly used modes Base and Auth.&lt;/p>
&lt;p>&lt;strong>HPKE Modes&lt;/strong>&lt;/p>
&lt;p>The &lt;em>Base&lt;/em> mode is the most common use case for HPKE where payload is encrypted
to a public key.
All other modes are authenticated in different ways.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Auth&lt;/em> uses the sender&amp;rsquo;s private key for authentication&lt;/li>
&lt;li>&lt;em>PSK&lt;/em> uses a pre-shared, high-entropy, key for authentication&lt;/li>
&lt;li>&lt;em>AuthPSK&lt;/em> uses the sender&amp;rsquo;s private key as well as a pre-shared, high-entropy, key for authentication&lt;/li>
&lt;/ul>
&lt;h3 id="encrypting-to-a-public-key">Encrypting to a public key
&lt;/h3>&lt;p>The following figure depicts the general flow of encrypting to a public key.
This is the Base mode in HPKE.
This is the most basic application of hybrid crypto systems.
Alex knows the public key from Sasha and wants to send some &lt;code>Data&lt;/code> to them.
Shasha&amp;rsquo;s public key is used to encrypt a shared secret, which is used to encrypt
the &lt;code>Data&lt;/code>.
The encrypted shared secret as well as the encrypted data is sent to Sasha, who
can retrieve the shared secret with their corresponding private key.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/hybrid-encryption.png"
width="1229"
height="1237"
srcset="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/hybrid-encryption_hu_ad814504bf32c71b.png 480w, https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/hybrid-encryption_hu_fb1cf3e3265cd55.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;h3 id="encrypting-to-a-public-key--authenticating-with-an-asymmetric-key">Encrypting to a public key &amp;amp; Authenticating with an asymmetric key
&lt;/h3>&lt;p>Sometimes it is useful or necessary to authenticate the sender of the data.
This is depicted in the figure below and represents the HPKE Auth mode.
The authentication is achieved by mixing in the sender&amp;rsquo;s private key such that
the receiver will only retrieve the correct shared secret if the public key
they use for the sender corresponds to the used private key.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/authenticated-hybrid-encryption.png"
width="1470"
height="1237"
srcset="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/authenticated-hybrid-encryption_hu_cf1bd566fcf29ade.png 480w, https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/authenticated-hybrid-encryption_hu_9947d954a170bb2c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="285px"
>&lt;/p>
&lt;h2 id="hpke">HPKE
&lt;/h2>&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is essentially standardising how to use &lt;a class="link" href="https://en.wikipedia.org/wiki/Key_encapsulation" target="_blank" rel="noopener"
>Key Encapsulation Mechanisms (KEM)&lt;/a>
for hybrid encryption.
The sender in &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> uses a KEM to generate the shared secret as well as the
encapsulation.
The shared secret is then used in an &lt;a class="link" href="https://en.wikipedia.org/wiki/Authenticated_encryption#Authenticated_encryption_with_associated_data_%28AEAD%29" target="_blank" rel="noopener"
>AEAD&lt;/a> (after running it through a key schedule)
in order to encrypt a payload.&lt;/p>
&lt;p>All HPKE use cases so far only take advantage of the single-shot APIs from HPKE.
In order to encrypt a payload to a public key the sender needs to provide the
receiver&amp;rsquo;s public key &lt;code>pkR&lt;/code>, some information &lt;code>info&lt;/code> and additional data &lt;code>aad&lt;/code> to bind the encryption
to a certain context, as well as the payload &lt;code>pt&lt;/code>.
HPKE returns the cipher text &lt;code>ct&lt;/code> as well as the encapsulation &lt;code>enc&lt;/code> that are both sent to
the receiver.&lt;/p>
&lt;pre tabindex="0">&lt;code>enc, ct &amp;lt;- Seal(pkR, info, aad, pt)
&lt;/code>&lt;/pre>&lt;p>When using the Auth mode the sender&amp;rsquo;s private key &lt;code>sk&lt;/code> is needed in addition.&lt;/p>
&lt;p>The receiver takes the encapsulation &lt;code>enc&lt;/code> and cipher text &lt;code>ct&lt;/code> together with their
private key to retrieve the payload.&lt;/p>
&lt;pre tabindex="0">&lt;code>pt &amp;lt;- Open(enc, skR, info, aad, ct)
&lt;/code>&lt;/pre>&lt;p>When using the Auth mode the sender&amp;rsquo;s public key &lt;code>pkS&lt;/code> is needed in addition.&lt;/p>
&lt;h3 id="multiple-encryptions">Multiple Encryptions
&lt;/h3>&lt;p>HPKE allows multiple encryptions with the same shared secret.
This is favourable if multiple messages are sent from the sender to the receiver.
To this end HPKE generates a context that allows encrypting (and decrypting) multiple
messages.&lt;/p>
&lt;pre tabindex="0">&lt;code>enc, ContextS &amp;lt;- SetupS(pkR, info)
ContextR &amp;lt;- SetupR(enc, skR, info)
&lt;/code>&lt;/pre>&lt;p>Note that HPKE goes a step further than the &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc5116" target="_blank" rel="noopener"
>AEAD RFC&lt;/a> and simplifies the API.
The consumer only needs to provide the payload and (potentially empty) additional
data.
HPKE takes care of providing unique nonces to the AEAD and fails if the maximum
number of encryptions with the context have been performed &amp;mdash; in particular if
the nonce would overflow.&lt;/p>
&lt;pre tabindex="0">&lt;code>ct &amp;lt;- ContextS.Seal(aad, pt)
pt &amp;lt;- ContextR.Open(aad, ct)
&lt;/code>&lt;/pre>&lt;h3 id="exporting-secrets">Exporting Secrets
&lt;/h3>&lt;p>In some scenarios applications need to establish additional shared secrets.
This can be achieved with the HPKE exporter interface.
The API is similar to the &lt;code>Seal&lt;/code> and &lt;code>Open&lt;/code> functions above but don&amp;rsquo;t require
a payload or additional data.
Instead an &lt;code>exporter_context&lt;/code> and the length of the exported secret &lt;code>L&lt;/code> have to
be provided.&lt;/p>
&lt;pre tabindex="0">&lt;code>enc, exported_secret &amp;lt;- SendExport(pkR, info, exporter_context, L)
exported_secret &amp;lt;- ReceiveExport(enc, skR, info, exporter_context, L)
&lt;/code>&lt;/pre>&lt;h3 id="use-cases">Use Cases
&lt;/h3>&lt;p>Instead of inventing new use cases for HPKE we describe how HPKE is used in &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>MLS&lt;/a>
and &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-tls-esni/" target="_blank" rel="noopener"
>ECH&lt;/a> as they reflect common uses of hybrid public key encryption.&lt;/p>
&lt;h4 id="hpke-in-mls">HPKE in MLS
&lt;/h4>&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>MLS&lt;/a> (Message Layer Security) is an IETF draft that standardises a new way of efficiently encrypting messages
between participants in groups.
It aims to solve the problem of end-to-end encryption in instant messaging.
&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is a core building block.
In order to encrypt a message to a specific entity in the protocol, &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>MLS&lt;/a> uses &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>
to encrypt the message to the specific public key.&lt;/p>
&lt;h4 id="hpke-in-ech">HPKE in ECH
&lt;/h4>&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-tls-esni/" target="_blank" rel="noopener"
>ECH&lt;/a> (Encrypted Client Hello) is a mechanism in &lt;a class="link" href="https://tools.ietf.org/html/rfc8446" target="_blank" rel="noopener"
>TLS&lt;/a> (Transport Layer Security)
for encrypting a ClientHello message under a server public key.
This description from the &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-tls-esni/" target="_blank" rel="noopener"
>ECH&lt;/a> draft corresponds directly to the Base mode of &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>
as described above.
This allows &lt;a class="link" href="https://tools.ietf.org/html/rfc8446" target="_blank" rel="noopener"
>TLS&lt;/a> connections to become more private because they don&amp;rsquo;t leak
information about the connection, in particular the exact server the client wants
to connect to.&lt;/p>
&lt;h2 id="demo">Demo
&lt;/h2>&lt;p>In order to better understand the message flow and working of HPKE we put together
an interactive demo below to demonstrate how HPKE works.&lt;/p>
&lt;ol>
&lt;li>First generate a key pair for the receiver.&lt;/li>
&lt;li>Then populate the info, additional data, and payload fields on the sender side.&lt;/li>
&lt;li>When clicking the &amp;ldquo;HPKE Seal&amp;rdquo; button on the sender the following happens&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>The sender retrieves the public key from the receiver that has been generated in the first step.&lt;/li>
&lt;li>The sender uses HPKE to encrypt the payload together with the info and additional data to the receiver&amp;rsquo;s public key.&lt;/li>
&lt;li>The result is written into the Encoded Shared Secret and Ciphertext fields.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>When clicking &amp;ldquo;HPKE Open&amp;rdquo; the receiver uses the private key to retrieve the shared secret and decrypt the ciphertext.
The &amp;ldquo;Info&amp;rdquo; and &amp;ldquo;Additional Data&amp;rdquo; are the same as entered on the sender&amp;rsquo;s side.&lt;/li>
&lt;/ol>
&lt;h3 id="try-it-out-now">Try it out now!
&lt;/h3>&lt;iframe width="100%" height="800px" src="./hpke_demo/index.html">&lt;/iframe>
&lt;p>The demo is written in &lt;a class="link" href="https://hacspec.org" target="_blank" rel="noopener"
>hacspec&lt;/a> (a subset of Rust) with a &lt;a class="link" href="https://webassembly.org/" target="_blank" rel="noopener"
>WASM&lt;/a> frontend.
Please stay tuned for a follow-up blog post diving into the details of this implementation.&lt;/p>
&lt;h2 id="summary">Summary
&lt;/h2>&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is a simple, but very powerful new tool that allows to efficiently solve
key distribution problems (see the MLS use case) as well as increase privacy
in existing protocols (see the ECH use case).&lt;/p>
&lt;p>My company &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a> offers support for using &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> as well as high assurance implementations
of HPKE and other protocols.
&lt;a class="link" href="mailto:franziskus@cryspen.com" >Get in touch for more information.&lt;/a>&lt;/p></description></item></channel></rss>