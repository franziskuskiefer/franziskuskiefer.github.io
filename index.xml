<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dr Franziskus Kiefer</title><link>https://www.franziskuskiefer.de/</link><description>Recent content on Dr Franziskus Kiefer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 02 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.franziskuskiefer.de/index.xml" rel="self" type="application/rss+xml"/><item><title>What is High Assurance Cryptography?</title><link>https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/</link><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/header.jpg" alt="Featured image of post What is High Assurance Cryptography?" />&lt;p>With my company &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a> we build high assurance cryptography.
But what does this actually mean?&lt;/p>
&lt;p>Before focusing on cryptography it is interesting to look at high assurance
software in general.
How is high assurance software different from other software?&lt;/p>
&lt;p>High assurance software is usually seen as being more trustworthy than other
software.
This is especially interesting in high-risk/high-stakes environments such as
financial institutions or governments.
There are different ways to achieve better guarantees for software.
Today the most commonly used technique to increase trust into software is using
certifications like &lt;a class="link" href="https://en.wikipedia.org/wiki/Common_Criteria" target="_blank" rel="noopener"
>common criteria&lt;/a>
or &lt;a class="link" href="https://en.wikipedia.org/wiki/FIPS_140-2" target="_blank" rel="noopener"
>FIPS&lt;/a>.
While these certifications offer a certain level of additional guarantees, only
the highest levels require some form of formal verification of the production
source code.
As such certification usually reaches only up to a certain level of high assurance.&lt;/p>
&lt;p>Instead, using formal methods to increase trust in software offers real tangible
guarantees on a software artifact.
But in order to get actual guarantees we have to define the properties that are
guaranteed and put it into perspective by defining different assurance levels.
Before doing this we look at the different techniques used in high assurance
software engineering.&lt;/p>
&lt;h2 id="techniques">Techniques
&lt;/h2>&lt;p>There are a number of different techniques used in (high assurance) software engineering.
Some are simply good engineering practice while others go beyond what is done for most software.
The following picture gives a high-level overview of the different techniques.
(The list is of course not exhaustive and some grouping might be arbitrary.)&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/overview1.png"
width="1440"
height="720"
srcset="https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/overview1_hu_b7de326a85959a85.png 480w, https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/overview1_hu_80767626755f6959.png 1024w"
loading="lazy"
alt="High assurance tools - an overview"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>On the left side we have safe programming languages and engineering processes
that are the bedrock of high assurance software engineering.
Processes ensure that the development and maintenance process is safe while
using a safe programming language such as Rust that gives memory safety
guarantees provides a safety baseline for the software.&lt;/p>
&lt;p>The engineering infrastructure in the center is used to enforce policies and link
everything together.
It is the glue that implements engineering processes and ensures safe operations
of the code at all times.
On the right hand side we have engineering practices divided into dynamic and
static tools, or testing and formal methods.
There are a lot of different testing techniques from fuzzing to known answer
tests that ensure that the code is operating correctly and safely for a certain
set of inputs.
With static analysis and formal methods we can go a step further and ensure that
the code is correct and safe for all inputs.&lt;/p>
&lt;h2 id="assurance-levels">Assurance Levels
&lt;/h2>&lt;p>Speaking about “high assurance” is so vague that it can be considered meaningless.
When speaking about high assurance software it is paramount to define a set of
properties the software guarantees.
To this end we define a set of assurance levels a software artifact can achieve
and a set of techniques used to get there.
The following picture sorts the previously defined techniques according to the
level of assurance they provide and the complexity required to use them.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/overview2.png"
width="2018"
height="1047"
srcset="https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/overview2_hu_202a6d43dd58e2c4.png 480w, https://www.franziskuskiefer.de/p/what-is-high-assurance-cryptography/overview2_hu_33514b732c83a68d.png 1024w"
loading="lazy"
alt="High assurance - an overview"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;h3 id="ca-1">CA-1
&lt;/h3>&lt;p>The first level of high assurance software is what I’d flippantly call “well
written software”.
At this level no complex tools are required. Instead good engineering principles
are applied.&lt;/p>
&lt;p>Note that this level must not be used for cryptographic software.
&lt;strong>Cryptography requires at least CA-2.&lt;/strong>&lt;/p>
&lt;p>The programming language and how it is used is the first important point.
A programming language like Rust that is memory safe and has a lot of additional
features that allow to ensure that the code is “safe” is paramount.
It is well known that memory safety is the root cause for most security issues
with about 70% (see what &lt;a class="link" href="https://www.chromium.org/Home/chromium-security/memory-safety/" target="_blank" rel="noopener"
>Google&lt;/a>, &lt;a class="link" href="https://msrnd-cdn-stor.azureedge.net/bluehat/bluehatil/2019/assets/doc/Trends%2C%20Challenges%2C%20and%20Strategic%20Shifts%20in%20the%20Software%20Vulnerability%20Mitigation%20Landscape.pdf" target="_blank" rel="noopener"
>Microsoft&lt;/a>, or the &lt;a class="link" href="https://www.memorysafety.org/docs/memory-safety/" target="_blank" rel="noopener"
>ISRG&lt;/a> say about this).
They are only possible because languages like C and C++ are not memory safe.&lt;/p>
&lt;p>The code requires a sufficient amount of tests. It is difficult and arbitrary to
define an exact number for test coverage.
But I think it is safe to say that a test coverage of less than 70% is not
acceptable.
Defining test coverage, quantitatively and qualitatively, is part of the
engineering process.&lt;/p>
&lt;p>Because testing against itself is not sufficient, test vectors with known answer
tests must be used.
If the implementation does not have a generally accepted specification or
(de-facto) reference implementation that can be used to get test vectors, a
reference implementation (specification) must be written to produce test vectors.&lt;/p>
&lt;p>Engineering processes must be implemented that ensure that the code can be safely
maintained in the long-run.
An engineering infrastructure must be in place to enforce processes and help the engineering process.&lt;/p>
&lt;p>&lt;strong>Properties:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Memory safety&lt;/li>
&lt;li>Adequate test coverage&lt;/li>
&lt;li>Known answer tests&lt;/li>
&lt;li>Engineering best practices
&lt;ul>
&lt;li>Review guidelines&lt;/li>
&lt;li>Continuous integration&lt;/li>
&lt;li>Documentation&lt;/li>
&lt;li>(Security) bug reporting&lt;/li>
&lt;li>Release management&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="ca-2">CA-2
&lt;/h3>&lt;p>The second level includes everything from the first level but adds properties
specific to cryptographic code and more advanced testing methods.&lt;/p>
&lt;p>In cryptographic code it is important that no decisions are made based on secret
information.
It is therefore necessary to avoid any branching on secret data or memory access
based on secret data.
There is research tooling out there that tries to ensure this and a lot of good
practices to avoid it. But there’s no comprehensive way of doing this right now.
With Cryspen we develop a set of tools to ensure secret independent computation that we use and maintain.&lt;/p>
&lt;p>On this level more advanced testing such as fuzzing and property based testing
is required as well to make sure that the code is not only safe in well defined
states but can handle any input.&lt;/p>
&lt;p>&lt;strong>Properties:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Secret independent computation
&lt;ul>
&lt;li>No secret-dependent branching&lt;/li>
&lt;li>No secret-dependent memory access&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Advanced testing
&lt;ul>
&lt;li>Fuzzing&lt;/li>
&lt;li>Sanitizer builds&lt;/li>
&lt;li>Property based testing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="ca-2-1">CA-2+
&lt;/h4>&lt;p>The secret independent computation properties in CA-2 can be shown on different
levels.
Often this is done only on the programming language level rather than the machine
code.
If the secret independent computation is ensured on the machine code level, we
call this CA-2+.
Higher levels are augmented with the + in the same way if the secret independence
is given after compilation.&lt;/p>
&lt;p>&lt;strong>Properties:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Secret independent computation ensured on the machine code level&lt;/li>
&lt;/ul>
&lt;h3 id="ca-3a">CA-3a
&lt;/h3>&lt;p>The third assurance level includes the first two but requires formal methods.
This is what we will always aim for. But because of the complexity and real world
constraints it is not always feasible to achieve this level for all code.&lt;/p>
&lt;p>Cryptographic primitives are one building block used to build cryptographic
protocols.
Because they require highly efficient implementations but usually have a rather
succinct mathematical definition, functional and semantic correctness are the
properties we are interested in.
In particular, the efficient implementation of a cryptographic primitive must be
shown equivalent to a self-evidently correct specification.
Additionally semantic properties such as “decryption is the inverse of encryption”
can be shown.
The exact properties proven must be clearly stated for every artifact.&lt;/p>
&lt;p>Data structures and other building blocks are needed to build cryptographic
protocols in addition to the primitives.
They must be similarly shown to be correct and safe to use by using functional
and semantic correctness proofs.&lt;/p>
&lt;p>On this level the cryptographic protocols themselves are written in a succinct
way such that they can be inspected by hand and compared to a general
specification if available.&lt;/p>
&lt;p>&lt;strong>Properties:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Functional and semantic security proofs&lt;/li>
&lt;/ul>
&lt;h3 id="ca-3b">CA-3b
&lt;/h3>&lt;p>The third level can be extended to require formal proofs on the protocol layer.
While cryptographic protocols can often be written in a way that they are
self-evidently correct and efficient, this is not enough if the protocol is not
standardized or is too complex to inspect manually.&lt;/p>
&lt;p>Security models and properties are defined for a protocol and they are proven on
the implementation of the cryptographic protocols using formal methods.
These properties are very specific to each protocol and can range from the
correctness of a state machine to the security against a certain type of attacker.&lt;/p>
&lt;p>&lt;strong>Properties:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Security proofs&lt;/li>
&lt;/ul>
&lt;h2 id="high-assurance">High-Assurance?
&lt;/h2>&lt;p>&lt;a class="link" href="https://highassurance.rs" target="_blank" rel="noopener"
>https://highassurance.rs&lt;/a> has some great documentation on writing good Rust code.
However, it also has a good example of what I &lt;em>don’t&lt;/em> consider high assurance software
and exemplifies why it is so important to specify all claims precisely instead of
simply claiming high assurance.
&lt;em>(Note that this is just an example to show why it is so important to exactly specify what assurances are given. This is not supposed to bash the &lt;a class="link" href="https://highassurance.rs" target="_blank" rel="noopener"
>https://highassurance.rs&lt;/a> folks. I think it&amp;rsquo;s a great effort.)&lt;/em>&lt;/p>
&lt;p>Let’s take a look at chapters &lt;a class="link" href="https://highassurance.rs/chp2/dynamic_assurance_1.html" target="_blank" rel="noopener"
>2.4-2.6&lt;/a> that describe a high assurance
implementation of the RC4 stream cipher. At the end of the section the authors
state the following:&lt;/p>
&lt;blockquote>
&lt;p>You&amp;rsquo;ve now built your first piece of high assurance software (sans the RC4 algorithm itself). Your RC4 library is:&lt;/p>
&lt;ul>
&lt;li>Fully memory-safe, hence &lt;code>#![forbid(unsafe_code)]&lt;/code>&lt;/li>
&lt;li>Stand-alone and capable for running almost anywhere, hence &lt;code>#![no_std]&lt;/code>&lt;/li>
&lt;li>Functionally validated, using official IETF test vectors&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>While these points are all on the list above they are what I would consider good
engineering principles (known answer tests with test vectors, and memory safety).
In particular, they lay the foundation for high assurance software but don’t
constitute high assurance in itself. As is, the code itself would be CA-1 but
additional mechanisms in the form of engineering processes and infrastructure
are needed for full CA-1 compliance.
(Similar additional mechanisms are mentioned in &lt;a class="link" href="https://highassurance.rs/chp2/_index.html" target="_blank" rel="noopener"
>Chapter 2&lt;/a>.)&lt;/p>
&lt;p>However, CA-1 is not sufficient for cryptographic primitives as stated above.
To reach CA-2 the code needs to be rewritten though because &lt;strong>it has secret
dependent memory access&lt;/strong>.
After doing this property based testing, fuzzing, and techniques ensuring secret
independent computation have to be added.&lt;/p>
&lt;p>Because the code can be seen as a spec one can argue that it reaches CA-3a now
as well.
CA-3b is not applicable.
However it is not very efficient but rather a specification.
In order to use the algorithm in a real application one might want to implement
an efficient version that would then require an equivalence proof with the
specification.&lt;/p>
&lt;p>&lt;em>RC4 itself is of course not secure and must not be used! This is just taking the example from &lt;a class="link" href="https://highassurance.rs" target="_blank" rel="noopener"
>https://highassurance.rs&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="cryspen-high-assurance-cryptography">Cryspen High Assurance Cryptography
&lt;/h2>&lt;p>At Cryspen we consider CA-1 regular software.
Cryptographic code at Cryspen must always be CA-2 or higher.&lt;/p>
&lt;p>We are working on different high assurance cryptographic primitives and
protocols right now.&lt;/p>
&lt;h3 id="hacl">HACL
&lt;/h3>&lt;p>The &lt;a class="link" href="https://github.com/cryspen/hacl-packages" target="_blank" rel="noopener"
>HACL packages&lt;/a> wrap the HACL* research artifacts and constitute a high
assurance cryptographic library.
The library is CA-3a because it is proven to be memory safe, has correctness
proofs with respect to a specification and ensures secret independent computation
on a programming language level.&lt;/p>
&lt;h3 id="hpke">HPKE
&lt;/h3>&lt;p>The &lt;a class="link" href="https://github.com/cryspen/hpke-spec/" target="_blank" rel="noopener"
>HPKE implementation&lt;/a> is a specification of the &lt;a class="link" href="https://datatracker.ietf.org/doc/rfc9180/" target="_blank" rel="noopener"
>HPKE RFC&lt;/a> and as such is CA-3a
because it is self-evidently correct as a specification and uses formally
verified cryptography with CA-3a.
In a next step the &lt;a class="link" href="https://github.com/cryspen/hpke-spec/" target="_blank" rel="noopener"
>HPKE implementation&lt;/a> will be connected to the &lt;a class="link" href="https://www.benjaminlipp.de/p/hpke-cryptographic-standard/#pre" target="_blank" rel="noopener"
>Cryptoverif&lt;/a>
models to prove security properties and thus reach the highest assurance
level CA-3b.&lt;/p>
&lt;h3 id="tls-13">TLS 1.3
&lt;/h3>&lt;p>In an &lt;a class="link" href="https://www.assure.ngi.eu/" target="_blank" rel="noopener"
>NGI Assure&lt;/a> project we develop the first formally verified, production
ready TLS 1.3 implementation.&lt;/p>
&lt;hr>
&lt;p>&lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a> offers high assurance cryptographic implementations.
&lt;a class="link" href="mailto:franziskus@cryspen.com" >Get in touch for more information.&lt;/a>&lt;/p></description></item><item><title>An Executable HPKE Specification</title><link>https://www.franziskuskiefer.de/p/an-executable-hpke-specification/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/an-executable-hpke-specification/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/an-executable-hpke-specification/header.png" alt="Featured image of post An Executable HPKE Specification" />&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>, published as &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>RFC 9180&lt;/a>, describes a scheme for hybrid public key encryption.&lt;/p>
&lt;blockquote>
&lt;p>📚 Please go and read our &lt;a class="link" href="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/" >TL;DR on HPKE&lt;/a> if you nee more background on HPKE.&lt;/p>&lt;/blockquote>
&lt;p>In this I describe the first executable HPKE specification using &lt;a class="link" href="https://hacspec.org" target="_blank" rel="noopener"
>hacspec&lt;/a>.
It is not only an executable specification of &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>, it is also an annotated version
of the RFC that can be read instead of (or in addition to) the RFC.
While the &lt;a class="link" href="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/" >TL;DR on HPKE&lt;/a> was intended for consumers or potential users of HPKE,
this blog post is aimed at implementators that want to implement HPKE or understand
it better.&lt;/p>
&lt;p>It is a showcase for Cryspen&amp;rsquo;s technology stack.
In a follow up blog post we will describe how to connect the &lt;a class="link" href="https://hacspec.org" target="_blank" rel="noopener"
>hacspec&lt;/a> specification
to efficient cryptographic primitives and formal proofs.&lt;/p>
&lt;p>&lt;em>This blog post focuses on the Base and Auth mode with DHKEM to demonstrate the capabilities
of hacspec.
For the full specification please read the full &lt;a class="link" href="https://tech.cryspen.com/hpke-spec" target="_blank" rel="noopener"
>documentation&lt;/a>, or look at the
&lt;a class="link" href="https://github.com/cryspen/hpke-spec" target="_blank" rel="noopener"
>Github repository&lt;/a> for the HPKE hacspec source code.&lt;/em>&lt;/p>
&lt;p>Recall that HPKE provides a variant of public-key encryption of arbitrary-sized plaintexts for a recipient public key.
It works for any combination of an asymmetric key encapsulation mechanism (KEM), key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function.&lt;/p>
&lt;p>In the following I&amp;rsquo;ll first show the high-level API of HPKE works before giving
details on the core functions within HPKE.
All code examples are in hacspec.&lt;/p>
&lt;blockquote>
&lt;p>💡 Go ahead and &lt;a class="link" href="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/#try-it-out-now" >run the hacspec HPKE in the browser&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;h2 id="encrypting-to-a-public-key">Encrypting to a Public Key
&lt;/h2>&lt;p>This is the most basic functionality HPKE offers; encrypting a payload to a public key.
So how does this look on the outside?&lt;/p>
&lt;p>The process consists of two steps.
&lt;em>First&lt;/em> a random &lt;code>shared_secret&lt;/code> is generated that can be used for
symmetric encryption with an AEAD, and an encapsulation that can be used by the
receiver in combination with their private key to compute the same &lt;code>shared_secret&lt;/code>.
This function is denoted &lt;code>SetupBaseS&lt;/code> below (because this is setting up the sender
in the HPKE base mode).
Note that the setup function expands the &lt;code>shared_secret&lt;/code> to a key schedule that
is used by the AEAD.
More details in the &lt;a class="link" href="#setup" >Setup&lt;/a> section.
&lt;em>Then&lt;/em> the &lt;code>shared_secret&lt;/code> is used to encrypt the payload with an AEAD.
This function is denoted &lt;code>AeadSeal&lt;/code> below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nonce&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SetupBaseS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pkR&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">randomness&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cipher_text&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AeadSeal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">aead_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">nonce&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aad&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The receiver gets &lt;code>cipher_text&lt;/code> and &lt;code>enc&lt;/code> that it can use to retrieve the &lt;code>payload&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nonce&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SetupBaseR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">skR&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AeadOpen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">aead&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">nonce&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aad&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ct&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the remainder of this blog post we&amp;rsquo;ll show how &lt;code>SetupBaseS&lt;/code> is defined.
For a description of the receiver please check out the &lt;a class="link" href="https://tech.cryspen.com/hpke-spec" target="_blank" rel="noopener"
>documentation&lt;/a>.
We will not define &lt;code>AeadSeal&lt;/code> and &lt;code>AeadOpen&lt;/code> here as they follow the definition
of &lt;a class="link" href="https://www.rfc-editor.org/info/rfc5116" target="_blank" rel="noopener"
>RFC 5116&lt;/a>.&lt;/p>
&lt;details>
&lt;summary>💡 Background on hacspec Syntax&lt;/summary>
In case you are not familiar with hacspec (Rust) syntax, here are some short explainers
to understand the hacspec code.
&lt;p>&lt;strong>The Question mark &lt;code>?&lt;/code>&lt;/strong>&lt;/p>
&lt;p>The question mark &lt;code>?&lt;/code> at the end of most lines in the hacspec code is the
way Rust performs error propagation.
If the function that is called before the &lt;code>?&lt;/code> does not return an error result,
the program continues as expected.
But if the function returns an error, the function stops and returns with the error
instead.&lt;/p>
&lt;p>&lt;strong>The Result Type&lt;/strong>&lt;/p>
&lt;p>hacspec (and Rust) uses a &lt;code>Result&lt;/code> type such as &lt;code>Result&amp;lt;OkType, ErrorType&amp;gt;&lt;/code> to return errors.
In hacspec result types are often wrapped into type aliases.
For example the &lt;code>SenderContextResult&lt;/code> type in the code snippet for &lt;code>SetupBaseS&lt;/code>
below is a type alias for &lt;code>Result&amp;lt;(Encapsulation, KeySchedule), Error&amp;gt;&lt;/code>.
If the function is successful and we reach line 10, the function returns success,
which is written as &lt;code>SenderContextResult::Ok(...)&lt;/code>.&lt;/p>
&lt;/details>
&lt;h3 id="the-auth-mode">The Auth Mode
&lt;/h3>&lt;p>In the Auth mode HPKE requires additional input to the &lt;code>Setup&lt;/code> functions.
The sender needs to provide their private key &lt;code>skS&lt;/code> to authenticate themselves.
The receiver uses the sender&amp;rsquo;s public key &lt;code>pkS&lt;/code> in addition to authenticate the sender.
The two functions are defined as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="n">SetupAuthS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pkR&lt;/span>:&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">skS&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">randomness&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">SetupAuthR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">skR&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pkS&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setup">Setup
&lt;/h3>&lt;p>In order to set up the KEM and key schedule the sender uses the following &lt;code>SetupBaseS&lt;/code>
function.
Recall that the &lt;code>BaseS&lt;/code> refers to the HPKE base mode and sender.&lt;/p>
&lt;p>The function takes the receiver&amp;rsquo;s public key &lt;code>pkR&lt;/code> and context information &lt;code>info&lt;/code>
(a sequence of bytes to bind the setup to a specific context).
In addition we need to pass in the &lt;code>configuration&lt;/code> that contains the mode as well
as the algorithm identifiers for the KEM.
Because hacspec can&amp;rsquo;t draw its own &lt;code>randomness&lt;/code>, as explained &lt;a class="link" href="#randomness" >below&lt;/a>,
it is passed in as well.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">SetupBaseS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">configuration&lt;/span>: &lt;span class="nc">HPKEConfig&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pkR&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">HpkePublicKey&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Info&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">randomness&lt;/span>: &lt;span class="nc">Randomness&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">SenderContextResult&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_secret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Encap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">configuration&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pkR&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">randomness&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key_schedule&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">KeySchedule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">shared_secret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">default_psk&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">default_psk_id&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SenderContextResult&lt;/span>::&lt;span class="nb">Ok&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key_schedule&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For comparison you can find the RFC pseudocode definition of &lt;code>SetupBaseS&lt;/code> below
(which is not well defined as is because it is missing the algorithm identifiers).
The main difference between the two functions is the explicit configuration and
randomness required in hacspec.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">def SetupBaseS(pkR, info):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> shared_secret, enc = Encap(pkR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return enc, KeyScheduleS(mode_base, shared_secret, info,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> default_psk, default_psk_id)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The setup function calls the two functions &lt;a class="link" href="#encap" >&lt;code>Encap&lt;/code>&lt;/a> and &lt;a class="link" href="#keyschedule" >&lt;code>KeySchedule&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="encap">Encap
&lt;/h3>&lt;p>&lt;em>(Reminder: For demonstration purposes we use the DHKEM defined in the RFC.)&lt;/em>&lt;/p>
&lt;p>The &lt;code>Encap&lt;/code> function takes the receiver&amp;rsquo;s public key &lt;code>pkR&lt;/code> and generates a &lt;code>shared_secret&lt;/code> as well
as an &lt;code>encapsulation&lt;/code>.&lt;/p>
&lt;p>It is necessary to pass in the algorithm identifier to know
which KEM to use and the randomness to generate a new ephemeral key pair for the
KEM.
See the &lt;a class="link" href="#implementation-considerations" >discussion section below&lt;/a> on the necessity of the API changes.
Because the function can fail it returns a result instead of simply the computed
values as described in the RFC pseudocode.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">def Encap(pkR):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skE, pkE = GenerateKeyPair()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dh = DH(skE, pkR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enc = SerializePublicKey(pkE)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkRm = SerializePublicKey(pkR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kem_context = concat(enc, pkRm)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> shared_secret = ExtractAndExpand(dh, kem_context)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return shared_secret, enc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All these changes make it much clearer what can happen within the function and
in particular which error states might occur.&lt;/p>
&lt;p>The &lt;code>Encap&lt;/code> function generates a fresh DH key pair and computes the DH between the
receivers public key and the ephemeral private key $\text{dh}=\text{skE}*\text{pkR}$.
The &lt;code>shared_secret&lt;/code> is then computed as the output of a key derivation function (HKDF)
on input of the &lt;code>dh&lt;/code> value and the context that binds the key derivation to the
parameters and public values.
The encapsulation &lt;code>enc&lt;/code> is the serialized public key &lt;code>pkE&lt;/code> generated in the first
step.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">Encap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pkR&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">PublicKey&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">alg&lt;/span>: &lt;span class="nc">KEM&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rand&lt;/span>: &lt;span class="nc">Randomness&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">EncapResult&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">skE&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pkE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">GenerateKeyPair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dh&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">DH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">skE&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pkR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">encapsulation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SerializePublicKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pkE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pkRm&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SerializePublicKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pkR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">kem_context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pkRm&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">shared_secret&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ExtractAndExpand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">suite_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">alg&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">kem_context&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">EncapResult&lt;/span>::&lt;span class="nb">Ok&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">shared_secret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">encapsulation&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="keyschedule">KeySchedule
&lt;/h3>&lt;p>In order to use the &lt;code>shared_secret&lt;/code> with an AEAD and allow exporting additional
key material, the following &lt;code>KeySchedule&lt;/code> derives the &lt;code>key&lt;/code> and &lt;code>base_nonce&lt;/code> for the
AEAD and an &lt;code>exporter_secret&lt;/code> to export other keys.
The key schedule is essentially a series of HKDF calls to extract different keys
from the shared secret.&lt;/p>
&lt;p>The main difference to the RFC here is again that it is necessary to pass in algorithm
identifiers and the &lt;code>suite_id&lt;/code> to &lt;code>LabeledExtract&lt;/code> and &lt;code>LabeledExpand&lt;/code>.
The &lt;code>suite_id&lt;/code> binds the KDF extract and expand functions to the specific context
and is implicit in the RFC.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">KeySchedule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">config&lt;/span>: &lt;span class="nc">HPKEConfig&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">shared_secret&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">SharedSecret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Info&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">psk&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Psk&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">psk_id&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">PskId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">ContextResult&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">VerifyPSKInputs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">psk&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">psk_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HPKEConfig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_kem&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">kdf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aead&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">psk_id_hash&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LabeledExtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">kdf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">suite_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">empty_bytes&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">psk_id_hash_label&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">psk_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info_hash&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LabeledExtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">kdf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">suite_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">empty_bytes&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">info_hash_label&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key_schedule_context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hpke_mode_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">concat_owned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">psk_id_hash&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">concat_owned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">info_hash&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">secret&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LabeledExtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kdf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">suite_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">shared_secret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">secret_label&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">psk&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LabeledExpand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">kdf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">suite_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key_label&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key_schedule_context&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Nk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">aead&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">base_nonce&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LabeledExpand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">kdf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">suite_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">base_nonce_label&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key_schedule_context&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Nn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">aead&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exporter_secret&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LabeledExpand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">kdf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">suite_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">exp_label&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key_schedule_context&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Nh&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kdf&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For comparison you can find the RFC pseudocode definition of &lt;code>KeySchedule&lt;/code> below.
Note that the significantly longer hacspec definition above is not in fact longer
but has longer lines that are wrapped.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">def KeySchedule&amp;lt;ROLE&amp;gt;(mode, shared_secret, info, psk, psk_id):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> VerifyPSKInputs(mode, psk, psk_id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> psk_id_hash = LabeledExtract(&amp;#34;&amp;#34;, &amp;#34;psk_id_hash&amp;#34;, psk_id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> info_hash = LabeledExtract(&amp;#34;&amp;#34;, &amp;#34;info_hash&amp;#34;, info)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key_schedule_context = concat(mode, psk_id_hash, info_hash)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> secret = LabeledExtract(shared_secret, &amp;#34;secret&amp;#34;, psk)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key = LabeledExpand(secret, &amp;#34;key&amp;#34;, key_schedule_context, Nk)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> base_nonce = LabeledExpand(secret, &amp;#34;base_nonce&amp;#34;, key_schedule_context, Nn)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exporter_secret = LabeledExpand(secret, &amp;#34;exp&amp;#34;, key_schedule_context, Nh)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Context&amp;lt;ROLE&amp;gt;(key, base_nonce, 0, exporter_secret)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is all that is needed to implement &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>.
All code examples here are taken directly from the Cryspen HPKE reference implementation.
You can find the full code in the &lt;a class="link" href="https://github.com/cryspen/hpke-spec" target="_blank" rel="noopener"
>Github repository&lt;/a> as well as the &lt;a class="link" href="https://tech.cryspen.com/hpke-spec" target="_blank" rel="noopener"
>documentation&lt;/a>.&lt;/p>
&lt;h2 id="implementation-considerations">Implementation Considerations
&lt;/h2>&lt;p>When defining HPKE in hacspec, or most other programming languages, there are a
number of considerations that impact the way the code looks.&lt;/p>
&lt;p>The hacspec code is as close to the RFC pseudocode as possible.
But some changes are needed.&lt;/p>
&lt;h3 id="randomness">Randomness
&lt;/h3>&lt;p>hacspec does not allow to draw randomness.
It is therefore necessary to pass in randomness every time it is needed.&lt;/p>
&lt;p>This approach is pretty close to the way this would be implemented in native Rust
where a random-number generator is passed in and used to generate randomness.
For simplicity hacspec expects the randomness to be drawn on the outside instead
of doing it within the specification.&lt;/p>
&lt;p>Note that it is possible to pre-determine the amount of randomness needed by HPKE
calls because randomness is only needed when setting up the sender.
At this point the KEM mechanisms and hence the required randomness is known.&lt;/p>
&lt;h3 id="configuration-parameters">Configuration Parameters
&lt;/h3>&lt;p>The &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> RFC makes most of the configuration implicit to the functions rather than
passing the algorithm identifiers around.
Because the hacspec implementation has to know which algorithm to pick, this is
of course not possible here.&lt;/p>
&lt;p>HPKE hacspec functions take either an &lt;a class="link" href="https://tech.cryspen.com/hpke-spec/hpke/struct.HPKEConfig.html" target="_blank" rel="noopener"
>&lt;code>HPKEConfig&lt;/code>&lt;/a> object with all algorithms
in it or the specific algorithm identifier needed for the operation.&lt;/p>
&lt;h3 id="naming">Naming
&lt;/h3>&lt;p>The &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> RFC uses, in some cases, names that are impossible to use in hacspec
because they are keywords or contain illegal characters.
Further does hacspec not support member functions as defined for the &lt;code>Context&lt;/code>.&lt;/p>
&lt;p>We therefore replace &lt;code>.&lt;/code> in member function calls such as &lt;code>Context.Export&lt;/code> with an underscore,
i.e. write &lt;code>Context_Export&lt;/code>.
Keywords such as &lt;code>open&lt;/code> are replaced with a semantically equivalent version, i.e.
&lt;code>HpkeOpen&lt;/code> in this example.&lt;/p>
&lt;h3 id="secret-bytes">Secret bytes
&lt;/h3>&lt;p>hacspec has the notion of secret integers that can&amp;rsquo;t be used for certain operations
and should enforce secret-independent computation time.&lt;/p>
&lt;p>For simplicity the hacspec HPKE implementation uses secret bytes everywhere even
if not necessary, e.g. for cipher texts.&lt;/p>
&lt;h3 id="errors">Errors
&lt;/h3>&lt;p>While the RFC defines a set of errors it does not always define which errors
are raised.
For example, it leaves open whether implementations convert errors from the
Diffie-Hellman operations into KEM errors (&lt;code>EncapError&lt;/code>/&lt;code>DecapError&lt;/code>) or not.&lt;/p>
&lt;p>With the specific implementation in hacspec here the errors are clearly defined.&lt;/p>
&lt;h2 id="about-hacspec">About hacspec
&lt;/h2>&lt;p>&lt;a class="link" href="https://hacspec.org" target="_blank" rel="noopener"
>hacspec&lt;/a> is a specification language for cryptographic mechanisms, and more, embedded in &lt;a class="link" href="https://www.rust-lang.org/" target="_blank" rel="noopener"
>Rust&lt;/a>.
It is a language for writing succinct, executable, formal specifications for cryptographic components.
Syntactically, hacspec is a purely functional subset of Rust that aims to be readable by developers, cryptographers, and verification experts.
An application developer can use hacspec to specify and prototype cryptographic components in Rust, and then either replace this specification with a verified implementation before deployment
or use the hacspec code directly.&lt;/p>
&lt;p>We used &lt;a class="link" href="https://hacspec.org" target="_blank" rel="noopener"
>hacspec&lt;/a> here to write an executable, succinct, specification of &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>
that&amp;rsquo;s embedding the full RFC into its &lt;a class="link" href="https://tech.cryspen.com/hpke-spec" target="_blank" rel="noopener"
>documentation&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://hacspec.org" target="_blank" rel="noopener"
>hacspec&lt;/a> is at the heart of a novel, modular verification framework for Rust
applications developed by &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a> in cooperation with the &lt;a class="link" href="https://team.inria.fr/prosecco/" target="_blank" rel="noopener"
>Prosecco&lt;/a> team.&lt;/p>
&lt;h2 id="summary">Summary
&lt;/h2>&lt;p>Even though &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is a relatively simple scheme it requires care when implementing.
This blog post gives an overview of how &lt;a class="link" href="https://hacspec.org" target="_blank" rel="noopener"
>hacspec&lt;/a> can be used to achieve an executable
version of the &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> RFC that can be used as implementation on its own or as
specification and reference implementation when implementing HPKE.&lt;/p>
&lt;p>My company &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a> offers support for using &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> as well as high assurance implementations
of HPKE and other protocols.
&lt;a class="link" href="mailto:franziskus@cryspen.com" >Get in touch for more information.&lt;/a>&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>&lt;i class="fab fa-github">&lt;/i> &lt;a class="link" href="https://github.com/cryspen/hpke-spec" target="_blank" rel="noopener"
>Github repository&lt;/a>&lt;/li>
&lt;li>&lt;i class="fa fa-book" aria-hidden="true">&lt;/i> &lt;a class="link" href="https://tech.cryspen.com/hpke-spec" target="_blank" rel="noopener"
>Documentation&lt;/a>&lt;/li>
&lt;li>&lt;i class="fa fa-file" aria-hidden="true">&lt;/i> &lt;a class="link" href="https://www.rfc-editor.org/rfc/rfc9180.html" target="_blank" rel="noopener"
>RFC&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>TL;DR - Hybrid Public Key Encryption</title><link>https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/hybrid.jpg" alt="Featured image of post TL;DR - Hybrid Public Key Encryption" />&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is a &lt;a class="link" href="https://datatracker.ietf.org/rg/cfrg/about/" target="_blank" rel="noopener"
>CFRG&lt;/a> in &lt;a class="link" href="https://www.rfc-editor.org/rfc/rfc9180.html" target="_blank" rel="noopener"
>RFC 9180&lt;/a> that describes a scheme for hybrid public key encryption.
It is co-authored by my &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a> co-founder &lt;a class="link" href="https://bhargavan.info/index.html" target="_blank" rel="noopener"
>Karthikeyan Bhargavan&lt;/a> and one of
his PhD students &lt;a class="link" href="https://www.benjaminlipp.de" target="_blank" rel="noopener"
>Benjamin Lipp&lt;/a> as part of his research at &lt;a class="link" href="https://team.inria.fr/prosecco" target="_blank" rel="noopener"
>Inria&lt;/a>.&lt;/p>
&lt;p>This blog post will give a brief overview of the specification and describes some use cases.&lt;/p>
&lt;p>If you want to learn more about the security proofs behind HPKE and the RFC process,
Benjamin wrote an &lt;a class="link" href="https://www.benjaminlipp.de/p/hpke-cryptographic-standard/" target="_blank" rel="noopener"
>excellent blog post&lt;/a> about it.&lt;/p>
&lt;p>Hybrid Public Key Encryption, or short HPKE, is a cyrptographic mechanism that
allows encrypting payload to a public key.
It is called &amp;ldquo;hybrid&amp;rdquo; because the payload is encrypted with a symmetric scheme.
The symmetric key is then encrypted to the receivers public key.
The &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> standard defines a number of natural extensions to the basic setting
that allow the sender to authenticate themselves.&lt;/p>
&lt;h2 id="hybrid-crypto-systems">Hybrid Crypto Systems
&lt;/h2>&lt;p>Hybrid public key encryption has been used in different ways since the early 1990s in protocols such as &lt;a class="link" href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy" target="_blank" rel="noopener"
>PGP&lt;/a> or &lt;a class="link" href="https://en.wikipedia.org/wiki/Cryptographic_Message_Syntax" target="_blank" rel="noopener"
>SMIME&lt;/a>.
While these two protocols are for a very specific use case a more general version of hybrid encryption is described in &lt;a class="link" href="https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme" target="_blank" rel="noopener"
>ECIES&lt;/a>.
&lt;a class="link" href="https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme" target="_blank" rel="noopener"
>ECIES&lt;/a> is part of many systems nowadays.
&lt;a class="link" href="https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/storing_keys_in_the_secure_enclave" target="_blank" rel="noopener"
>Storing keys in the secure enclave on an iOS&lt;/a> device for example uses &lt;a class="link" href="https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme" target="_blank" rel="noopener"
>ECIES&lt;/a>.
For a deeper explanation and history of hybrid crypto systems I recommend reading
&lt;a class="link" href="https://blog.cloudflare.com/hybrid-public-key-encryption/" target="_blank" rel="noopener"
>Christopher Wood&amp;rsquo;s blog post&lt;/a>.&lt;/p>
&lt;p>However, there&amp;rsquo;s no general description of hybrid public key encryption with modern primitives.
The &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> standard solves this issue.
Even before the RFC is finalised it is used in specifications for &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-tls-esni/" target="_blank" rel="noopener"
>ECH&lt;/a>, &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>MLS&lt;/a>, &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-pauly-dprive-oblivious-doh/" target="_blank" rel="noopener"
>ODOH&lt;/a>, and &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-gpew-priv-ppm/" target="_blank" rel="noopener"
>PPM&lt;/a>.
This shows the high demand for &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>.&lt;/p>
&lt;p>HPKE has four distinct modes of operation: Base, Auth, PSK, AuthPSK.
In this blog post we only describe the two most commonly used modes Base and Auth.&lt;/p>
&lt;p>&lt;strong>HPKE Modes&lt;/strong>&lt;/p>
&lt;p>The &lt;em>Base&lt;/em> mode is the most common use case for HPKE where payload is encrypted
to a public key.
All other modes are authenticated in different ways.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Auth&lt;/em> uses the sender&amp;rsquo;s private key for authentication&lt;/li>
&lt;li>&lt;em>PSK&lt;/em> uses a pre-shared, high-entropy, key for authentication&lt;/li>
&lt;li>&lt;em>AuthPSK&lt;/em> uses the sender&amp;rsquo;s private key as well as a pre-shared, high-entropy, key for authentication&lt;/li>
&lt;/ul>
&lt;h3 id="encrypting-to-a-public-key">Encrypting to a public key
&lt;/h3>&lt;p>The following figure depicts the general flow of encrypting to a public key.
This is the Base mode in HPKE.
This is the most basic application of hybrid crypto systems.
Alex knows the public key from Sasha and wants to send some &lt;code>Data&lt;/code> to them.
Shasha&amp;rsquo;s public key is used to encrypt a shared secret, which is used to encrypt
the &lt;code>Data&lt;/code>.
The encrypted shared secret as well as the encrypted data is sent to Sasha, who
can retrieve the shared secret with their corresponding private key.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/hybrid-encryption.png"
width="1229"
height="1237"
srcset="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/hybrid-encryption_hu_ad814504bf32c71b.png 480w, https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/hybrid-encryption_hu_fb1cf3e3265cd55.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;h3 id="encrypting-to-a-public-key--authenticating-with-an-asymmetric-key">Encrypting to a public key &amp;amp; Authenticating with an asymmetric key
&lt;/h3>&lt;p>Sometimes it is useful or necessary to authenticate the sender of the data.
This is depicted in the figure below and represents the HPKE Auth mode.
The authentication is achieved by mixing in the sender&amp;rsquo;s private key such that
the receiver will only retrieve the correct shared secret if the public key
they use for the sender corresponds to the used private key.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/authenticated-hybrid-encryption.png"
width="1470"
height="1237"
srcset="https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/authenticated-hybrid-encryption_hu_cf1bd566fcf29ade.png 480w, https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/authenticated-hybrid-encryption_hu_9947d954a170bb2c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="285px"
>&lt;/p>
&lt;h2 id="hpke">HPKE
&lt;/h2>&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is essentially standardising how to use &lt;a class="link" href="https://en.wikipedia.org/wiki/Key_encapsulation" target="_blank" rel="noopener"
>Key Encapsulation Mechanisms (KEM)&lt;/a>
for hybrid encryption.
The sender in &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> uses a KEM to generate the shared secret as well as the
encapsulation.
The shared secret is then used in an &lt;a class="link" href="https://en.wikipedia.org/wiki/Authenticated_encryption#Authenticated_encryption_with_associated_data_%28AEAD%29" target="_blank" rel="noopener"
>AEAD&lt;/a> (after running it through a key schedule)
in order to encrypt a payload.&lt;/p>
&lt;p>All HPKE use cases so far only take advantage of the single-shot APIs from HPKE.
In order to encrypt a payload to a public key the sender needs to provide the
receiver&amp;rsquo;s public key &lt;code>pkR&lt;/code>, some information &lt;code>info&lt;/code> and additional data &lt;code>aad&lt;/code> to bind the encryption
to a certain context, as well as the payload &lt;code>pt&lt;/code>.
HPKE returns the cipher text &lt;code>ct&lt;/code> as well as the encapsulation &lt;code>enc&lt;/code> that are both sent to
the receiver.&lt;/p>
&lt;pre tabindex="0">&lt;code>enc, ct &amp;lt;- Seal(pkR, info, aad, pt)
&lt;/code>&lt;/pre>&lt;p>When using the Auth mode the sender&amp;rsquo;s private key &lt;code>sk&lt;/code> is needed in addition.&lt;/p>
&lt;p>The receiver takes the encapsulation &lt;code>enc&lt;/code> and cipher text &lt;code>ct&lt;/code> together with their
private key to retrieve the payload.&lt;/p>
&lt;pre tabindex="0">&lt;code>pt &amp;lt;- Open(enc, skR, info, aad, ct)
&lt;/code>&lt;/pre>&lt;p>When using the Auth mode the sender&amp;rsquo;s public key &lt;code>pkS&lt;/code> is needed in addition.&lt;/p>
&lt;h3 id="multiple-encryptions">Multiple Encryptions
&lt;/h3>&lt;p>HPKE allows multiple encryptions with the same shared secret.
This is favourable if multiple messages are sent from the sender to the receiver.
To this end HPKE generates a context that allows encrypting (and decrypting) multiple
messages.&lt;/p>
&lt;pre tabindex="0">&lt;code>enc, ContextS &amp;lt;- SetupS(pkR, info)
ContextR &amp;lt;- SetupR(enc, skR, info)
&lt;/code>&lt;/pre>&lt;p>Note that HPKE goes a step further than the &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc5116" target="_blank" rel="noopener"
>AEAD RFC&lt;/a> and simplifies the API.
The consumer only needs to provide the payload and (potentially empty) additional
data.
HPKE takes care of providing unique nonces to the AEAD and fails if the maximum
number of encryptions with the context have been performed &amp;mdash; in particular if
the nonce would overflow.&lt;/p>
&lt;pre tabindex="0">&lt;code>ct &amp;lt;- ContextS.Seal(aad, pt)
pt &amp;lt;- ContextR.Open(aad, ct)
&lt;/code>&lt;/pre>&lt;h3 id="exporting-secrets">Exporting Secrets
&lt;/h3>&lt;p>In some scenarios applications need to establish additional shared secrets.
This can be achieved with the HPKE exporter interface.
The API is similar to the &lt;code>Seal&lt;/code> and &lt;code>Open&lt;/code> functions above but don&amp;rsquo;t require
a payload or additional data.
Instead an &lt;code>exporter_context&lt;/code> and the length of the exported secret &lt;code>L&lt;/code> have to
be provided.&lt;/p>
&lt;pre tabindex="0">&lt;code>enc, exported_secret &amp;lt;- SendExport(pkR, info, exporter_context, L)
exported_secret &amp;lt;- ReceiveExport(enc, skR, info, exporter_context, L)
&lt;/code>&lt;/pre>&lt;h3 id="use-cases">Use Cases
&lt;/h3>&lt;p>Instead of inventing new use cases for HPKE we describe how HPKE is used in &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>MLS&lt;/a>
and &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-tls-esni/" target="_blank" rel="noopener"
>ECH&lt;/a> as they reflect common uses of hybrid public key encryption.&lt;/p>
&lt;h4 id="hpke-in-mls">HPKE in MLS
&lt;/h4>&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>MLS&lt;/a> (Message Layer Security) is an IETF draft that standardises a new way of efficiently encrypting messages
between participants in groups.
It aims to solve the problem of end-to-end encryption in instant messaging.
&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is a core building block.
In order to encrypt a message to a specific entity in the protocol, &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>MLS&lt;/a> uses &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>
to encrypt the message to the specific public key.&lt;/p>
&lt;h4 id="hpke-in-ech">HPKE in ECH
&lt;/h4>&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-tls-esni/" target="_blank" rel="noopener"
>ECH&lt;/a> (Encrypted Client Hello) is a mechanism in &lt;a class="link" href="https://tools.ietf.org/html/rfc8446" target="_blank" rel="noopener"
>TLS&lt;/a> (Transport Layer Security)
for encrypting a ClientHello message under a server public key.
This description from the &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-tls-esni/" target="_blank" rel="noopener"
>ECH&lt;/a> draft corresponds directly to the Base mode of &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a>
as described above.
This allows &lt;a class="link" href="https://tools.ietf.org/html/rfc8446" target="_blank" rel="noopener"
>TLS&lt;/a> connections to become more private because they don&amp;rsquo;t leak
information about the connection, in particular the exact server the client wants
to connect to.&lt;/p>
&lt;h2 id="demo">Demo
&lt;/h2>&lt;p>In order to better understand the message flow and working of HPKE we put together
an interactive demo below to demonstrate how HPKE works.&lt;/p>
&lt;ol>
&lt;li>First generate a key pair for the receiver.&lt;/li>
&lt;li>Then populate the info, additional data, and payload fields on the sender side.&lt;/li>
&lt;li>When clicking the &amp;ldquo;HPKE Seal&amp;rdquo; button on the sender the following happens&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>The sender retrieves the public key from the receiver that has been generated in the first step.&lt;/li>
&lt;li>The sender uses HPKE to encrypt the payload together with the info and additional data to the receiver&amp;rsquo;s public key.&lt;/li>
&lt;li>The result is written into the Encoded Shared Secret and Ciphertext fields.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>When clicking &amp;ldquo;HPKE Open&amp;rdquo; the receiver uses the private key to retrieve the shared secret and decrypt the ciphertext.
The &amp;ldquo;Info&amp;rdquo; and &amp;ldquo;Additional Data&amp;rdquo; are the same as entered on the sender&amp;rsquo;s side.&lt;/li>
&lt;/ol>
&lt;h3 id="try-it-out-now">Try it out now!
&lt;/h3>&lt;iframe width="100%" height="800px" src="./hpke_demo/index.html">&lt;/iframe>
&lt;p>The demo is written in &lt;a class="link" href="https://hacspec.org" target="_blank" rel="noopener"
>hacspec&lt;/a> (a subset of Rust) with a &lt;a class="link" href="https://webassembly.org/" target="_blank" rel="noopener"
>WASM&lt;/a> frontend.
Please stay tuned for a follow-up blog post diving into the details of this implementation.&lt;/p>
&lt;h2 id="summary">Summary
&lt;/h2>&lt;p>&lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> is a simple, but very powerful new tool that allows to efficiently solve
key distribution problems (see the MLS use case) as well as increase privacy
in existing protocols (see the ECH use case).&lt;/p>
&lt;p>My company &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a> offers support for using &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/" target="_blank" rel="noopener"
>HPKE&lt;/a> as well as high assurance implementations
of HPKE and other protocols.
&lt;a class="link" href="mailto:franziskus@cryspen.com" >Get in touch for more information.&lt;/a>&lt;/p></description></item><item><title>Cryspen ERC PoC Grant</title><link>https://www.franziskuskiefer.de/p/cryspen-erc-poc-grant/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/cryspen-erc-poc-grant/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/cryspen-erc-poc-grant/erc.jpg" alt="Featured image of post Cryspen ERC PoC Grant" />&lt;p>My co-founder &lt;a class="link" href="https://bhargavan.info/" target="_blank" rel="noopener"
>Karthik&lt;/a> got awarded an &lt;a class="link" href="https://erc.europa.eu/funding/proof-concept" target="_blank" rel="noopener"
>ERC Proof of Concept grant&lt;/a> for
commercialising the know-how and landmark research results from his Inria
research group &lt;a class="link" href="https://team.inria.fr/prosecco/" target="_blank" rel="noopener"
>PROSECCO&lt;/a> through Cryspen.&lt;/p>
&lt;h2 id="announcement">Announcement
&lt;/h2>&lt;p>Cryptographic mechanisms are crucial to the security of our digital lives but their design and implementation remains notoriously difficult and error-prone. With the help of two ERC Grants, Karthikeyan Bhargavan and the Prosecco team at Inria have developed state-of-the-art formal verification techniques that can be applied to real-world cryptographic software. In particular, they used these techniques to help design and analyze the TLS 1.3 protocol standard, as well to build the HACL* verified cryptographic library, code from which has been incorporated in mainstream software projects including Mozilla Firefox, the Linux Kernel, the Tezos Blockchain, the WireGuard VPN, and the ElectionGuard voting system.&lt;/p>
&lt;p>The goal of this new ERC Proof of Concept grant is to build upon these these landmark research results and to commercialise the associated know-how through a new company called Cryspen. Cryspen will build a verified cryptographic software stack and an associated verification toolchain that is well-documented and easy to use for security developers. Cryspen will offer consulting and support contracts for this stack as well as software contracts for developing new cryptographic applications, ranging from secure messaging system to privacy-preserving machine learning.&lt;/p>
&lt;p>Cryspen is co-founded by Franziskus Kiefer (CEO), Karthikeyan Bhargavan, and Jonathan Protzenko. For more information, email &lt;a class="link" href="mailto:info@cryspen.com" >info@cryspen.com&lt;/a>&lt;/p></description></item><item><title>(HACL*) AEAD Benchmarks</title><link>https://www.franziskuskiefer.de/p/hacl-aead-benchmarks/</link><pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/hacl-aead-benchmarks/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/hacl-aead-benchmarks/AeadBenchHero.png" alt="Featured image of post (HACL*) AEAD Benchmarks" />&lt;blockquote>
&lt;p>This is in response to the &lt;a class="link" href="https://kerkour.com/rust-symmetric-encryption-aead-benchmark/" target="_blank" rel="noopener"
>blog post by Sylvain Kerkour&lt;/a> benchmarking ring and
Rust Crypto AEADs.
I was curious how HACL* stacks up to these two with these parameters.&lt;/p>&lt;/blockquote>
&lt;p>I&amp;rsquo;m maintaining the &lt;a class="link" href="https://crates.io/crates/evercrypt" target="_blank" rel="noopener"
>Evercrypt crate&lt;/a>, a wrapper
around the formally verified crypto library &lt;a class="link" href="https://github.com/project-everest/hacl-star" target="_blank" rel="noopener"
>HACL*&lt;/a>.
HACL* is a customizable, fast, formally verified crypto library written in F* and extracted to C.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://crates.io/crates/chacha20poly1305" target="_blank" rel="noopener"
>RustCrypto’s ChaCha20-Poly1305&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://crates.io/crates/aes-gcm" target="_blank" rel="noopener"
>RustCrypto’s AES-256-GCM&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://crates.io/crates/ring" target="_blank" rel="noopener"
>ring’s ChaCha20-Poly1305&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://crates.io/crates/ring" target="_blank" rel="noopener"
>ring’s AES-256-GCM&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="results">Results
&lt;/h2>&lt;p>I&amp;rsquo;m listing all results here for comparison as I&amp;rsquo;m (obviously) running the benchmarks on a different machine.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>100B&lt;/th>
&lt;th>1kB&lt;/th>
&lt;th>100kB&lt;/th>
&lt;th>1MB&lt;/th>
&lt;th>10MB&lt;/th>
&lt;th>100MB&lt;/th>
&lt;th>1GB&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/chacha20poly1305" target="_blank" rel="noopener"
>RustCrypto’s ChaCha20-Poly1305&lt;/a> v0.8.2&lt;/td>
&lt;td>1.6232 us (58.753 MiB/s)&lt;/td>
&lt;td>2.6941 us (353.98 MiB/s)&lt;/td>
&lt;td>120.10 us (794.10 MiB/s)&lt;/td>
&lt;td>1.1921 ms (800.02 MiB/s)&lt;/td>
&lt;td>12.015 ms (793.75 MiB/s)&lt;/td>
&lt;td>119.87 ms (795.58 MiB/s)&lt;/td>
&lt;td>1.1947 s (798.27 MiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/aes-gcm" target="_blank" rel="noopener"
>RustCrypto’s AES-256-GCM&lt;/a> v0.9.4&lt;/td>
&lt;td>448.97 ns (212.42 MiB/s)&lt;/td>
&lt;td>1.5090 us (632.01 MiB/s)&lt;/td>
&lt;td>118.13 us (807.33 MiB/s)&lt;/td>
&lt;td>1.1947 ms (798.24 MiB/s)&lt;/td>
&lt;td>11.986 ms (795.68 MiB/s)&lt;/td>
&lt;td>119.39 ms (798.81 MiB/s)&lt;/td>
&lt;td>1.1974 s (796.43 MiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/ring" target="_blank" rel="noopener"
>ring’s ChaCha20-Poly1305&lt;/a> v0.16.20&lt;/td>
&lt;td>193.82 ns (492.04 MiB/s)&lt;/td>
&lt;td>730.23 ns (1.2754 GiB/s)&lt;/td>
&lt;td>48.293 us (1.9285 GiB/s)&lt;/td>
&lt;td>490.64 us (1.8982 GiB/s)&lt;/td>
&lt;td>5.0475 ms (1.8451 GiB/s)&lt;/td>
&lt;td>51.438 ms (1.8106 GiB/s)&lt;/td>
&lt;td>514.99 ms (1.8084 GiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/ring" target="_blank" rel="noopener"
>ring’s AES-256-GCM&lt;/a> v0.16.20&lt;/td>
&lt;td>235.57 ns (404.83 MiB/s)&lt;/td>
&lt;td>556.64 ns (1.6731 GiB/s)&lt;/td>
&lt;td>34.609 us (2.6910 GiB/s)&lt;/td>
&lt;td>343.41 us (2.7120 GiB/s)&lt;/td>
&lt;td>3.5471 ms (2.6256 GiB/s)&lt;/td>
&lt;td>34.873 ms (2.6706 GiB/s)&lt;/td>
&lt;td>348.51 ms (2.6723 GiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/evercrypt" target="_blank" rel="noopener"
>HACL*’s ChaCha20-Poly1305&lt;/a> v0.0.10&lt;/td>
&lt;td>862.79 ns (110.53 MiB/s)&lt;/td>
&lt;td>1.2804 us (744.81 MiB/s)&lt;/td>
&lt;td>55.550 us (1.6765 GiB/s)&lt;/td>
&lt;td>549.11 us (1.6961 GiB/s)&lt;/td>
&lt;td>5.8844 ms (1.5827 GiB/s)&lt;/td>
&lt;td>88.801 ms (1.0488 GiB/s)&lt;/td>
&lt;td>847.39 ms (1.0990 GiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/evercrypt" target="_blank" rel="noopener"
>HACL*’s AES-256-GCM&lt;/a> v0.0.10&lt;/td>
&lt;td>238.12 ns (400.51 MiB/s)&lt;/td>
&lt;td>598.56 ns (1.5560 GiB/s)&lt;/td>
&lt;td>38.997 us (2.3882 GiB/s)&lt;/td>
&lt;td>391.87 us (2.3766 GiB/s)&lt;/td>
&lt;td>4.0217 ms (2.3157 GiB/s)&lt;/td>
&lt;td>68.004 ms (1.3695 GiB/s)&lt;/td>
&lt;td>642.12 ms (1.4504 GiB/s)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>It is interesting to see that the HACL* AES-256-GCM implementation is only slightly
slower than ring&amp;rsquo;s (2.3GiB/s vs 2.7GiB/s) for 1MB and 10MB chunks.
But it significantly drops in performance for larger blobs while ring&amp;rsquo;s performance
stays the same.
The picture for Chacha20Poly1305 is similar, which points to general issues of
handling large data sizes within HACL*.&lt;/p>
&lt;p>&lt;a class="link" href="./aead-intel-benchmarks.txt" >Raw number&lt;/a>&lt;/p>
&lt;h2 id="m1">M1
&lt;/h2>&lt;p>My main machine right now is a MacBook with M1 chip.
This is a very different machine.
Here are the numbers.&lt;/p>
&lt;p>Note that HACL* doesn&amp;rsquo;t support AES on ARM chips yet unfortunately.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>100B&lt;/th>
&lt;th>1kB&lt;/th>
&lt;th>100kB&lt;/th>
&lt;th>1MB&lt;/th>
&lt;th>10MB&lt;/th>
&lt;th>100MB&lt;/th>
&lt;th>1GB&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>[RustCrypto’s XChaCha20-Poly1305] v0.8.2&lt;/td>
&lt;td>558.20 ns (170.85 MiB/s)&lt;/td>
&lt;td>3.0136 us (316.46 MiB/s)&lt;/td>
&lt;td>274.25 us (347.74 MiB/s)&lt;/td>
&lt;td>2.7434 ms (347.62 MiB/s)&lt;/td>
&lt;td>27.535 ms (346.35 MiB/s)&lt;/td>
&lt;td>279.16 ms (341.62 MiB/s)&lt;/td>
&lt;td>2.7657 s (344.83 MiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/chacha20poly1305" target="_blank" rel="noopener"
>RustCrypto’s ChaCha20-Poly1305&lt;/a> v0.8.2&lt;/td>
&lt;td>460.31 ns (207.18 MiB/s)&lt;/td>
&lt;td>2.9189 us (326.73 MiB/s)&lt;/td>
&lt;td>273.95 us (348.12 MiB/s)&lt;/td>
&lt;td>2.7429 ms (347.69 MiB/s)&lt;/td>
&lt;td>27.623 ms (345.25 MiB/s)&lt;/td>
&lt;td>281.35 ms (338.96 MiB/s)&lt;/td>
&lt;td>2.7525 s (346.48 MiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/aes-gcm" target="_blank" rel="noopener"
>RustCrypto’s AES-256-GCM&lt;/a> v0.9.4&lt;/td>
&lt;td>3.0838 us (30.925 MiB/s)&lt;/td>
&lt;td>9.3825 us (101.64 MiB/s)&lt;/td>
&lt;td>707.99 us (134.70 MiB/s)&lt;/td>
&lt;td>7.0729 ms (134.83 MiB/s)&lt;/td>
&lt;td>70.655 ms (134.98 MiB/s)&lt;/td>
&lt;td>706.42 ms (135.00 MiB/s)&lt;/td>
&lt;td>7.1158 s (134.02 MiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/ring" target="_blank" rel="noopener"
>ring’s ChaCha20-Poly1305&lt;/a> v0.16.20&lt;/td>
&lt;td>407.12 ns (234.25 MiB/s)&lt;/td>
&lt;td>1.3175 us (723.85 MiB/s)&lt;/td>
&lt;td>96.781 us (985.40 MiB/s)&lt;/td>
&lt;td>963.70 us (989.60 MiB/s)&lt;/td>
&lt;td>9.6676 ms (986.46 MiB/s)&lt;/td>
&lt;td>98.252 ms (970.64 MiB/s)&lt;/td>
&lt;td>975.96 ms (977.17 MiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/ring" target="_blank" rel="noopener"
>ring’s AES-256-GCM&lt;/a> v0.16.20&lt;/td>
&lt;td>79.751 ns (1.1678 GiB/s)&lt;/td>
&lt;td>394.01 ns (2.3637 GiB/s)&lt;/td>
&lt;td>34.355 us (2.7109 GiB/s)&lt;/td>
&lt;td>344.78 us (2.7012 GiB/s)&lt;/td>
&lt;td>3.4792 ms (2.6768 GiB/s)&lt;/td>
&lt;td>34.543 ms (2.6961 GiB/s)&lt;/td>
&lt;td>345.92 ms (2.6923 GiB/s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://crates.io/crates/evercrypt" target="_blank" rel="noopener"
>HACL*’s ChaCha20-Poly1305&lt;/a> v0.0.10&lt;/td>
&lt;td>690.43 ns (138.13 MiB/s)&lt;/td>
&lt;td>1.7545 us (543.55 MiB/s)&lt;/td>
&lt;td>132.59 us (719.25 MiB/s)&lt;/td>
&lt;td>1.3096 ms (728.24 MiB/s)&lt;/td>
&lt;td>13.261 ms (719.13 MiB/s)&lt;/td>
&lt;td>137.91 ms (691.53 MiB/s)&lt;/td>
&lt;td>1.4217 s (670.82 MiB/s)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ring&amp;rsquo;s performance is again great and very stable across different payload sizes.
Rust Crypto&amp;rsquo;s implementations are significantly slower than ring&amp;rsquo;s again but also slower than on the Intel machine.
The HACL* performance for Chacha20Poly1305 is again a little worse than ring&amp;rsquo;s but significantly better than Rust Crypto&amp;rsquo;s.&lt;/p>
&lt;p>&lt;a class="link" href="./aead-m1-benchmarks.txt" >Raw number&lt;/a>&lt;/p>
&lt;h2 id="cpu-info">CPU Info
&lt;/h2>&lt;h3 id="intel">Intel
&lt;/h3>&lt;pre tabindex="0">&lt;code>Architecture: x86_64
CPU op-mode(s): 32-bit, 64-bit
Address sizes: 39 bits physical, 48 bits virtual
Byte Order: Little Endian
CPU(s): 8
On-line CPU(s) list: 0-7
Vendor ID: GenuineIntel
Model name: Intel(R) Core(TM) i7-4900MQ CPU @ 2.80GHz
CPU family: 6
Model: 60
Thread(s) per core: 2
Core(s) per socket: 4
Socket(s): 1
Stepping: 3
CPU max MHz: 3800.0000
CPU min MHz: 800.0000
BogoMIPS: 5589.60
Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx f
xsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_
good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx e
st tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c
rdrand lahf_lm abm cpuid_fault epb invpcid_single pti tpr_shadow vnmi flexpriority ept vpid e
pt_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid xsaveopt dtherm ida arat pln pts
Virtualization features:
Virtualization: VT-x
Caches (sum of all):
L1d: 128 KiB (4 instances)
L1i: 128 KiB (4 instances)
L2: 1 MiB (4 instances)
L3: 8 MiB (1 instance)
NUMA:
NUMA node(s): 1
NUMA node0 CPU(s): 0-7
Vulnerabilities:
Itlb multihit: KVM: Mitigation: VMX disabled
L1tf: Mitigation; PTE Inversion; VMX conditional cache flushes, SMT vulnerable
Mds: Vulnerable: Clear CPU buffers attempted, no microcode; SMT vulnerable
Meltdown: Mitigation; PTI
Spec store bypass: Vulnerable
Spectre v1: Mitigation; usercopy/swapgs barriers and __user pointer sanitization
Spectre v2: Mitigation; Full generic retpoline, STIBP disabled, RSB filling
Srbds: Vulnerable: No microcode
Tsx async abort: Not affected
&lt;/code>&lt;/pre>&lt;h3 id="m1-1">M1
&lt;/h3>&lt;pre tabindex="0">&lt;code>machdep.cpu.brand_string: Apple M1
machdep.cpu.core_count: 8
machdep.cpu.cores_per_package: 8
machdep.cpu.logical_per_package: 8
machdep.cpu.thread_count: 8
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>The code changes needed for these experiments are on &lt;a class="link" href="https://github.com/franziskuskiefer/kerkour.com/tree/hacl" target="_blank" rel="noopener"
>Github&lt;/a>.&lt;/p></description></item><item><title>OpenMLS Performance</title><link>https://www.franziskuskiefer.de/p/openmls-performance/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/openmls-performance/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/openmls-logo.svg" alt="Featured image of post OpenMLS Performance" />&lt;p>The Messaging Layer Security (&lt;a class="link" href="https://datatracker.ietf.org/wg/mls/about/" target="_blank" rel="noopener"
>MLS&lt;/a>) protocol is an &lt;a class="link" href="https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/" target="_blank" rel="noopener"
>IETF proposal&lt;/a> for group key establishment
and message protection.
&lt;a class="link" href="https://github.com/openmls/openmls/" target="_blank" rel="noopener"
>OpenMLS&lt;/a> is a Rust implementation of the MLS protocol in its current state (&lt;a class="link" href="https://datatracker.ietf.org/doc/html/draft-ietf-mls-protocol-11" target="_blank" rel="noopener"
>draft 11&lt;/a> as of the point of writing this) that is being implemented by &lt;a class="link" href="https://twitter.com/raphaelrobert" target="_blank" rel="noopener"
>Raphael&lt;/a>, &lt;a class="link" href="https://kkohbrok.github.io/" target="_blank" rel="noopener"
>Konrad&lt;/a> and myself.
For more general information on MLS I refer to the &lt;a class="link" href="https://messaginglayersecurity.rocks/mls-protocol/draft-ietf-mls-protocol.html" target="_blank" rel="noopener"
>spec&lt;/a> and &lt;a class="link" href="https://wire.com/en/blog/mls-future-of-messaging/" target="_blank" rel="noopener"
>other&lt;/a> blog &lt;a class="link" href="https://wickr.com/the-messaging-layer-security-protocol/" target="_blank" rel="noopener"
>posts&lt;/a>.
This blog post is only about MLS, and in particular OpenMLS, performance.&lt;/p>
&lt;p>One goal of MLS is that it &lt;a class="link" href="https://datatracker.ietf.org/doc/charter-ietf-mls/" target="_blank" rel="noopener"
>is supposed to be scalable&lt;/a>.
The charter in particular claims the following:&lt;/p>
&lt;blockquote>
&lt;p>Resource requirements have good scaling in the size of the group (preferably sub-linear)&lt;/p>&lt;/blockquote>
&lt;p>While performance can be theoretically analysed for MLS it is also interesting to see whether the performance goals hold up in a real implementation.
This of course only looks at a single implementation.
Nonetheless, I think that it gives a good impression on the actual performance of MLS implementations.
Particularly because OpenMLS at this point is not optimised but rather implements the MLS spec as is.&lt;/p>
&lt;h2 id="methodology">Methodology
&lt;/h2>&lt;p>MLS is a pretty complex protocol with many moving parts.
It is therefore important to clearly define what is being measured and how.&lt;/p>
&lt;p>First, all tests are done with the only mandatory cipher suite in MLS 1.0 MLS10_128_DHKEMX25519_AES128GCM_SHA256_Ed25519.
While other cipher suites obviously have different performance, the goal here is to investigate the general performance of MLS depending on the group size.
The exact cipher suite used is therefore irrelevant.&lt;/p>
&lt;h3 id="measurements">Measurements
&lt;/h3>&lt;p>The measurements here do not cover all possible messages in MLS.
Not all of them are fully supported by OpenMLS yet.
Pre-shared key, re-init, external-init, app-ack, and external proposals will be checked once they are implemented.
The measured messages nonetheless represent the core of the MLS protocol and should give a good idea of the general performance of the protocol.
We test performance of group creation, group join as well as the three basic messages update, add, and remove, and application messages.&lt;/p>
&lt;p>All measurements except for the first two use one of the following set-ups:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Base&lt;/strong>: The group is created by a user.
All other participants are invited and each participant creates the group locally.
Then every participant sends an update message to the group and everyone else processes it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Bare:&lt;/strong> The group is created by a user.
All other participants are invited and each participant creates the group locally.
This creates an extremely sparse version of the underlying tree in MLS and is therefore interesting to look at.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Measurements are run on different group sizes.
When running benchmarks with large groups such as 1000 participants a lot of memory is used in order to simulate all devices (up to 10 GB) such that larger groups are hard to simulate.
The chosen group sizes allow us to get a good idea how MLS performs depending on the group size.
We in particular test groups of the size 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500, 1000.&lt;/p>
&lt;h4 id="operations">Operations
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Group creation:&lt;/strong>
Creating a group involves creating the group, proposals and welcome messages for the other participants, and applying the commit.&lt;/li>
&lt;li>&lt;strong>Join group:&lt;/strong>
Joining a group is equivalent to processing a welcome message to locally create the new group.&lt;/li>
&lt;li>&lt;strong>Update messages:&lt;/strong>
Sending an update to a group involves creating a proposal, the corresponding commit and applying the commit.
When receiving an update message the commit is being processed.&lt;/li>
&lt;li>&lt;strong>Adding a user:&lt;/strong>
When a new user is added to the group the add proposal and welcome message are created and the commit is locally applied by the adder.
When receiving a commit with an add proposal it is processed by the user.&lt;/li>
&lt;li>&lt;strong>Removing a user:&lt;/strong>
When a user is removed from the group the remove proposal and commit are created and locally applied by the remover.
When receiving a commit with a remove proposal it is processed by the user.&lt;/li>
&lt;li>&lt;strong>Application messages:&lt;/strong>
Sending an application message consists of creating the plaintext message and encrypting it for the group.
In order to receive an application message the user has to decrypt and parse the message.
We measure performance of a single message that is being sent and processed.
Note that the processing time of subsequent messages is not significantly different from the first one.&lt;/li>
&lt;/ul>
&lt;h2 id="results">Results
&lt;/h2>&lt;p>You can find the raw data and some more graphs in the &lt;a class="link" href="https://docs.google.com/spreadsheets/d/1nZv8lpT28JctDVo4ARBLZCKcIdvo-h8cIyN3_dIedFU" target="_blank" rel="noopener"
>OpenMLS performance spreadsheet&lt;/a>.&lt;/p>
&lt;p>All measurements were performed on a laptop with Arch Linux, an Intel Core i7-4900MQ @ 2.80GHz and 16 GB memory.&lt;/p>
&lt;h3 id="group-setup">Group setup
&lt;/h3>&lt;p>As the following graph shows the time needed to create a group is linear in the number of participants added when creating the group.
The blue line shows the actual measurements while the magenta one is a trend line showing the linear relation.
This is what is to be expected because the performance is dominated by the creation of welcome messages, which have to be created for each member.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/group-creation.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/group-creation_hu_711f7220390f570b.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/group-creation_hu_a7c4146796121254.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h3 id="join-group">Join group
&lt;/h3>&lt;p>The performance of joining a group is linear in the group size because the information in the welcome message as well as the tree that is being processed when joining the group are linear in the number of group members.
Note that it is not logarithmic because the tree needs to be constructed.
This requires processing of each node in some way, which is linear in the group size.
The blue line again shows the actual measurements while the magenta one is a trend line for the linear relation.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/join.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/join_hu_6aaf206d7a3d39eb.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/join_hu_9f767674d648977f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h3 id="update">Update
&lt;/h3>&lt;p>Sending and processing updates are both sub-linear in the number of group members because the number of computations depend on the height of the tree in the &lt;em>base&lt;/em> case.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/update.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/update_hu_b6384e698aef9ecf.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/update_hu_9f03c3b6a007180.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>In the case of a very sparse tree, which we have in the &lt;em>bare&lt;/em> case because every leaf only processed the welcome message, the performance of sending an update however is linear in the group size.
When creating a commit for an update proposal the sender has to include a path and refresh the private tree.
The following two flamegraphs show the difference between the base and the bare case.
While it doesn&amp;rsquo;t show directly what&amp;rsquo;s going on, it can be seen that in the base case (first flamegraph) the &lt;code>new_with_keys&lt;/code> function requires a lot more time relative to the rest of the &lt;code>replace_private_tree&lt;/code> function.
This is a strong indicator for where to look for the differences.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/send-update-base.png"
width="3606"
height="762"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/send-update-base_hu_ebfa9c70c142c4cd.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/send-update-base_hu_eac6b5d50105e99f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="473"
data-flex-basis="1135px"
>&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/send-update-bare.png"
width="3606"
height="900"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/send-update-bare_hu_dd7355c5d880ac03.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/send-update-bare_hu_ac606ee3ba0048bc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="400"
data-flex-basis="961px"
>&lt;/p>
&lt;p>Looking at a tree with 300 leaves for example we have to encrypt 299 times (for every other leaf) in the case of a bare tree.
In a fully updated tree however only 9 encryptions are necessary, one for each level of the tree.
It is therefore expected that the performance of sending an update (with commit) in the bare case is linear in the group size.&lt;/p>
&lt;h3 id="adding-a-user">Adding a user
&lt;/h3>&lt;p>Looking at the performance of adding a user and processing an add commit in the following graph we can again see the linear growth in relation to the number of group members.
This is almost independent of the state of the tree.
The operations appear to be slightly more expensive in a fully updated tree though.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/add.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/add_hu_9c38b82ff3e244c2.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/add_hu_2ead502d3b5dff0b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h3 id="removing-a-user">Removing a user
&lt;/h3>&lt;p>Like updating, removing a user and processing a remove commit are linear in complexity in the base case as the following graph shows.
Removing in a very sparse tree is significantly more expensive than in a fully updated tree.
The reason is the same as for updating the tree.
The remove information has to be encrypted to all other remaining participants in the tree.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/remove.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/remove_hu_7ecf46df3ffbc881.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/remove_hu_4724a6e21d07a0ac.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h3 id="application-messages">Application messages
&lt;/h3>&lt;p>Sending and receiving application messages is essentially independent of the group size, as expected.
Receiving the first message within an epoch has a small overhead compared to subsequent message as seen in the second graph.
This should be negligible in practice though.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/application-message-send.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/application-message-send_hu_edc77415743ac28a.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/application-message-send_hu_4d09a3ffb2673bb6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/openmls-performance/application-message-receive.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/openmls-performance/application-message-receive_hu_fde770f19d41ed90.png 480w, https://www.franziskuskiefer.de/p/openmls-performance/application-message-receive_hu_8836068b72b1aff6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h2 id="analysis">Analysis
&lt;/h2>&lt;p>First, the plain performance numbers tell us that the goal of the MLS charter of a protocol that scales well for large groups has been mostly.
Depending on the state of the tree some operations might take longer than expected.
However, this can be mitigated by the application ensuring that the tree is updated and shrunk regularly.
Notably, the real world performance appears to be consistent with the theoretical expectations.&lt;/p>
&lt;h2 id="technical-background">Technical background
&lt;/h2>&lt;p>The measurements are &lt;em>not&lt;/em> done with any Rust benchmarking framework such as &lt;a class="link" href="https://crates.io/crates/criterion" target="_blank" rel="noopener"
>criterion&lt;/a>.
Due to the way criterion works there&amp;rsquo;s significant &lt;a class="link" href="https://github.com/bheisler/criterion.rs/issues/475" target="_blank" rel="noopener"
>overhead in criterion&lt;/a>.
While the numbers in this post can be reliably reproduced a more thorough measurement framework&lt;/p>
&lt;p>The flamegraphs are produced with &lt;a class="link" href="https://crates.io/crates/pprof" target="_blank" rel="noopener"
>pprof&lt;/a>, a simple to use CPU profiler for Rust.&lt;/p>
&lt;p>All measurements were performed on &lt;a class="link" href="https://github.com/openmls/openmls/tree/65030529e43716d482a6e57a432da5a388fd0a3c" target="_blank" rel="noopener"
>this revision&lt;/a>.
To reproduce them check out the revision and run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> i in &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="m">20&lt;/span> &lt;span class="m">30&lt;/span> &lt;span class="m">40&lt;/span> &lt;span class="m">50&lt;/span> &lt;span class="m">100&lt;/span> &lt;span class="m">200&lt;/span> &lt;span class="m">300&lt;/span> &lt;span class="m">400&lt;/span> &lt;span class="m">500&lt;/span> 1000&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> cargo bench --bench group -- &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion--future-work">Conclusion &amp;amp; Future work
&lt;/h2>&lt;p>Measuring performance of a protocol as complex as MLS is pretty difficult.
Without an application and elaborate test framework that can simulate many different scenarios it is only possible to get the basic numbers as shown here.
While they give a good indicator towards the performance of the MLS protocol they are insufficient to claim any performance of real applications that use MLS.&lt;/p>
&lt;p>Nonetheless, the numbers show that the MLS protocol appears to allow for efficient, end-to-end-encrypted messaging in large groups.
Sending and receiving application messages is independent of the group size while group operations are sub-linear in the group size in most cases.&lt;/p>
&lt;p>When OpenMLS is further developed and we have a messaging client using it another set of measurements should be performed with real world usage scenarios in mind in order to investigate whether the performance we have seen here translates to efficient group messaging in an application.
The MLS specification further leaves anything around authentication and authorization policies open to the application.
These might be complex procedures and impact the MLS performance as well.&lt;/p></description></item><item><title>💲 Web Monetization 💲</title><link>https://www.franziskuskiefer.de/p/web-monetization/</link><pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/web-monetization/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/web-monetization/hero.jpg" alt="Featured image of post 💲 Web Monetization 💲" />&lt;p>Thanks to &lt;a class="link" href="https://about.me/cyberdees" target="_blank" rel="noopener"
>Deez&lt;/a> I gave &lt;a class="link" href="https://webmonetization.org" target="_blank" rel="noopener"
>web monetization&lt;/a> a spin on this website today.
Here I write up how I did it, how it went, and what I think about it.&lt;/p>
&lt;p>The proposed &lt;a class="link" href="https://webmonetization.org/specification.html" target="_blank" rel="noopener"
>web monetization standard&lt;/a> allows browsers to securely pay websites, and, in turn, allows for websites to react to being paid, for example by turning off ads or providing extra functionality to paying visitors.
There is some good description of use cases on &lt;a class="link" href="https://developers.coil.com/" target="_blank" rel="noopener"
>Coil&amp;rsquo;s website&lt;/a> if you&amp;rsquo;re looking for a more general explainer.&lt;/p>
&lt;p>The following diagram from the &lt;a class="link" href="https://webmonetization.org/docs/explainer/" target="_blank" rel="noopener"
>web monetization docs&lt;/a> illustrate the information flow.
In short, the &lt;code>monetization&lt;/code> meta-tag on the page is parsed by the browser, which initiates a session for a page visit and triggers the payment through the payment pointer.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/web-monetization/webmonetization-flow.png"
width="1050"
height="570"
srcset="https://www.franziskuskiefer.de/p/web-monetization/webmonetization-flow_hu_5815eb18ee3ef2a4.png 480w, https://www.franziskuskiefer.de/p/web-monetization/webmonetization-flow_hu_d27efa21a9759bb2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;h2 id="payment-pointer-">Payment pointer 📬
&lt;/h2>&lt;p>To set up web monetization on a website like this, one first has to get a payment pointer that can receive payments.
Getting this payment pointer was probably the hardest part for me.&lt;/p>
&lt;p>I selected one of the recommended wallet providers &lt;a class="link" href="https://uphold.com" target="_blank" rel="noopener"
>Uphold&lt;/a>.
Uphold has a support page for &lt;a class="link" href="https://support.uphold.com/hc/en-us/articles/360043227832-How-to-find-your-ILP-address-Interledger-payment-pointer-" target="_blank" rel="noopener"
>how to get the ILP (Interledger payment pointer)&lt;/a>.
The problem is that it&amp;rsquo;s difficult to understand how to get to the &amp;ldquo;sub-account for the asset&amp;rdquo;.
In fact I was only able to do this in &lt;a class="link" href="https://brave.com/" target="_blank" rel="noopener"
>Brave&lt;/a> because &lt;a class="link" href="https://uphold.com/dashboard" target="_blank" rel="noopener"
>uphold.com/dashboard&lt;/a> always forwards me to &lt;a class="link" href="https://wallet.uphold.com/dashboard" target="_blank" rel="noopener"
>wallet.uphold.com/dashboard&lt;/a>, which doesn&amp;rsquo;t have the necessary information (or I just didn&amp;rsquo;t find it).&lt;/p>
&lt;p>Setting all trust concerns aside (see the &lt;a class="link" href="#security-privacy" >privacy section&lt;/a>) I tried to verify my Uphold account.
The verification didn&amp;rsquo;t go through yet 🤔.
But I can still receive funds and have honestly no idea what&amp;rsquo;s happening here.
This is a pretty bad sign for a provider that&amp;rsquo;s supposed to handle money for me.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/web-monetization/UpholdWallet.png"
width="845"
height="237"
srcset="https://www.franziskuskiefer.de/p/web-monetization/UpholdWallet_hu_56bc4ad312e0bedd.png 480w, https://www.franziskuskiefer.de/p/web-monetization/UpholdWallet_hu_5b48612fa2a6af42.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="356"
data-flex-basis="855px"
>&lt;/p>
&lt;h3 id="the-interledger-">The Interledger 📒
&lt;/h3>&lt;p>The &lt;a class="link" href="https://interledger.org/" target="_blank" rel="noopener"
>Interledger&lt;/a> is an open protocol suite for sending payments across different ledgers.
It is used by the web monetization framework to send the money to the website owner or content creator.
You might know that I have opinions on cryptocurrencies and blockchain technologies (hint: they are not very positive).
I understand that there aren&amp;rsquo;t a lot of good ways of sending money to individuals or organisations that supports a lot of different technologies and currencies.
But I don&amp;rsquo;t understand why any sort of ledger needs to be involved.&lt;/p>
&lt;h3 id="security-privacy">Privacy &amp;amp; Security considerations 🔐🕵🏻‍♀️
&lt;/h3>&lt;p>The first road block I hit was the registration of the uphold account.
It looks like it requires registration with a government ID.
While the banking industry is for obvious reasons heavily regulated, I don&amp;rsquo;t understand why I need to send highly sensitive documents to a provider with a low trust level.
Signing up with an existing bank account or credit card might have other privacy implications but would not have the trust issues a provider like Uphold has.&lt;/p>
&lt;p>If the web monetization protocol wants to be successful, it has to be better than existing solutions (ads).
Also in terms of privacy.
It is therefore paramount in my opinion that the protocol does not yield any information about the person visiting a website.
But I can see a couple ways privacy could get compromised here and no documents addressing them.
A particular concern I have is how tracking users across different websites is prevented given that the user is always sending from the same account.
The subscription provider like &lt;a class="link" href="https://coil.com/" target="_blank" rel="noopener"
>Coil&lt;/a> is another big privacy risk as they see every transaction a user is taking.&lt;/p>
&lt;p>All this can be remedied but requires transparency and clear technical solutions.&lt;/p>
&lt;h2 id="getting-started-">Getting started 🌐
&lt;/h2>&lt;p>There is a &lt;a class="link" href="https://github.com/sabinebertram/hugo-webmonetization-component" target="_blank" rel="noopener"
>web monetization theme&lt;/a> for &lt;a class="link" href="https://gohugo.io" target="_blank" rel="noopener"
>hugo&lt;/a> (the framework I use for this site) that allows for easy integration of web monetization.&lt;/p>
&lt;p>First I added the hugo-webmonetization-component as second theme to my site:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git submodule add git@github.com:sabinebertram/hugo-webmonetization-component.git themes/webmonetization
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then I changed my theme in the &lt;code>config.toml&lt;/code> as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">theme&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;gohugo-theme-ananke&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;webmonetization&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then set my &lt;a class="link" href="https://paymentpointers.org/" target="_blank" rel="noopener"
>payment pointer&lt;/a> in the &lt;code>params&lt;/code> section of the &lt;code>config.toml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">monetization&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;$ilp.uphold.com/NMNKYReeKNNw&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to actually use the monetization parameter I added it to the ananke theme&amp;rsquo;s &lt;code>&amp;lt;head&amp;gt;&lt;/code>.
The &lt;code>head&lt;/code> is defined in &lt;code>themes/gohugo-theme-ananke/layouts/_default/baseof.html&lt;/code>, which includes a &lt;code>head-additions.html&lt;/code> where we can add the monetization partial.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">{{ partial &amp;#34;webmonetization.html&amp;#34; .}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sample-exclusive-content-">Sample exclusive content 💎
&lt;/h3>&lt;p>In hugo it is simple to add exclusive content with the following short code.
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{{&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">exclusive&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span> &lt;span class="n">exclusive&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{{&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">exclusive&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">}}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
Note that this only works if &lt;code>blackfriday&lt;/code> is used as markup engine and things like markdown code blocks don&amp;rsquo;t work in there.
This might be a shortcoming of the hugo theme I&amp;rsquo;m using here.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">markup&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">defaultMarkdownHandler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;blackfriday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>⚠️ I switched to a new theme on this blog that does not support webmonetization right now!&lt;/strong>&lt;/p>
&lt;h3 id="issues-i-encountered-">Issues I encountered 🐞
&lt;/h3>&lt;p>First this only worked on the main page after following the instructions.
It turned out that I had to update &lt;a class="link" href="https://github.com/budparr/gohugo-theme-ananke" target="_blank" rel="noopener"
>my hugo theme&lt;/a> to get support on every page.&lt;/p>
&lt;p>The description on the &lt;a class="link" href="https://github.com/sabinebertram/hugo-webmonetization-component" target="_blank" rel="noopener"
>web monetization theme&lt;/a> appears to be a little outdated.
It is even easier to include it now.&lt;/p>
&lt;h2 id="the-consumer-side---coil-">The consumer side - Coil 👩🏾‍💻
&lt;/h2>&lt;p>To see how consumers visiting a website experience web monetization I used &lt;a class="link" href="https://coil.com" target="_blank" rel="noopener"
>Coil&lt;/a>.
With an account and an &lt;a class="link" href="https://coil.com/#Extension-Install-Section" target="_blank" rel="noopener"
>extension for your favourite browser&lt;/a> we see that it is working.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/web-monetization/franziskuskiefer.de-coil.png"
width="1822"
height="1414"
srcset="https://www.franziskuskiefer.de/p/web-monetization/franziskuskiefer.de-coil_hu_e086fa890bdc182f.png 480w, https://www.franziskuskiefer.de/p/web-monetization/franziskuskiefer.de-coil_hu_183806739d6d944f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;h3 id="thoughts-on-the-user-experience-">Thoughts on the user experience 🤔
&lt;/h3>&lt;p>Seeing the green &lt;code>$&lt;/code> when visiting a page that uses web monetization shows the user that they are supporting the content creator and feels good.
However, it takes a while for the monetization to kick in such that it looks like the page refreshes after a second for exclusive content.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/web-monetization/monetization-loading.gif"
width="1296"
height="234"
srcset="https://www.franziskuskiefer.de/p/web-monetization/monetization-loading_hu_11503fa888298593.gif 480w, https://www.franziskuskiefer.de/p/web-monetization/monetization-loading_hu_f3e3553cdea5853d.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="553"
data-flex-basis="1329px"
>&lt;/p>
&lt;p>It is also not entirely clear how the membership works from the popup.
In particular what&amp;rsquo;s included and how the money gets distributed.
But this might be a trade-off for the sake of usability.
A more detailed information panel would be nice though.
The mobile &lt;a class="link" href="https://www.pumabrowser.com/" target="_blank" rel="noopener"
>Puma browser&lt;/a> is a little better here.&lt;/p>
&lt;p>Overall this reminds me a little of the donation system Amazon is running through smile.amazon.com, which is great idea but not very transparent (though this improved over time).&lt;/p>
&lt;div class="row">
&lt;div class="column" style="float: left; width: 50%;">
&lt;img src="../../images/webmonetization-puma1.png" alt="Puma1" style="width:90%">
&lt;/div>
&lt;div class="column" style="float: left; width: 50%; margin-bottom: 25px;">
&lt;img src="../../images/webmonetization-puma2.png" alt="Puma2" style="width:90%">
&lt;/div>
&lt;/div>
&lt;h2 id="conclusion-">Conclusion 🚧
&lt;/h2>&lt;p>First, I really like the idea of allowing users to give money directly to websites and content creators.
It is also relatively easy to get web monetization set up on a website.
If this is through integration in a framework or by manually adding the header tag.&lt;/p>
&lt;p>My two main concerns are around privacy and the state of tooling.
This is obviously not a final standard such that some hiccups are to be expected.
Issues around more mature tools such as Uphold are a little more concerning though.
To judge the real privacy impact a more in depth analysis of the standard as well as the implementations and services are needed.
But it is worrying that the specification doesn&amp;rsquo;t even mention privacy implications.&lt;/p>
&lt;hr>
&lt;h2 id="update">Update
&lt;/h2>&lt;p>I was pointed to a blog post on &lt;a class="link" href="https://coil.com/p/sharafian/Doubling-Down-on-Privacy/cD_ZiwT2J" target="_blank" rel="noopener"
>privacy in Coil&lt;/a> that explains how they use &lt;a class="link" href="https://privacypass.github.io/" target="_blank" rel="noopener"
>privacy pass&lt;/a> for user privacy (there&amp;rsquo;s an &lt;a class="link" href="https://datatracker.ietf.org/group/privacypass/documents/" target="_blank" rel="noopener"
>IETF working group&lt;/a> in the process of standardising privacy pass) and something they call wallet privacy.&lt;/p>
&lt;p>I also filed &lt;a class="link" href="https://github.com/WICG/webmonetization/issues/165" target="_blank" rel="noopener"
>a spec issue&lt;/a> to get more explicit privacy treatment in the spec.&lt;/p>
&lt;h2 id="update-2">Update 2
&lt;/h2>&lt;p>I mentioned above that Uphold appears to be dubious.
Now that they disabled my account I have to disable the web monetization experiment on this page.
I don&amp;rsquo;t really care, but Uphold appears to be as bad as I expected.
There was no communication whatsoever from Uphold except the following screen when logging in.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/web-monetization/uphold-account-lock.png"
width="880"
height="1262"
srcset="https://www.franziskuskiefer.de/p/web-monetization/uphold-account-lock_hu_6b74195670761a7c.png 480w, https://www.franziskuskiefer.de/p/web-monetization/uphold-account-lock_hu_f388b809cf653a6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="167px"
>&lt;/p>
&lt;p>While being logged in it actually says &amp;quot; Uphold is currently unavailable&amp;quot; 🤷🏻‍♂️&lt;/p>
&lt;h2 id="update-3">Update 3
&lt;/h2>&lt;p>After getting in touch with Uphold (thanks Kaily!) it turned out that the account verification didn&amp;rsquo;t go through for some reason and I had to redo it to unlock my account.&lt;/p>
&lt;p>I got an innocuous email saying&lt;/p>
&lt;blockquote>
&lt;p>We’ve had to temporarily restrict your account while we gather some more information. You can still trade but you won’t be able to withdraw funds.&lt;/p>&lt;/blockquote>
&lt;p>What this actually meant is that I had to get in touch with the Uphold support team to figure out what&amp;rsquo;s going on.&lt;/p>
&lt;p>I re-enabled web-monetization on this page.
While the initial experience on my end wasn&amp;rsquo;t great it was unrelated to web-monetization and due to some shortcomings in Uphold&amp;rsquo;s communication and me ignoring some of it 😬.&lt;/p></description></item><item><title>I'm leaving AISEC</title><link>https://www.franziskuskiefer.de/p/im-leaving-aisec/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/im-leaving-aisec/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/im-leaving-aisec/hero.jpg" alt="Featured image of post I'm leaving AISEC" />&lt;p>I don&amp;rsquo;t like to write a post like this but I really feel that this one is necessary.
After not even half a year I&amp;rsquo;m going to leave the &lt;a class="link" href="https://www.aisec.fraunhofer.de" target="_blank" rel="noopener"
>Fraunhofer AISEC&lt;/a> at the end of May.
In this post I want to explain why.&lt;/p>
&lt;p>&lt;em>This is not a post about contact tracing!&lt;/em>&lt;/p>
&lt;p>During the week of April 13 the controversy around &lt;a class="link" href="https://www.pepp-pt.org/" target="_blank" rel="noopener"
>PEPP-PT&lt;/a> started to heat up. Articles from &lt;a class="link" href="https://www.coindesk.com/decentralized-protocol-removed-from-eu-contact-tracing-website-with-no-notice" target="_blank" rel="noopener"
>coindesk&lt;/a> and other media such as &lt;a class="link" href="https://www.golem.de/news/pepp-pt-streit-beim-corona-app-projekt-2004-147925.html" target="_blank" rel="noopener"
>Golem&lt;/a> (German), started to pop up and I started to get a little concerned knowing that AISEC is part of the PEPP-PT organization.
This quickly changed from being a sensible thing done by some people in the organization that employs me to something pretty sketchy that I definitely wanted to learn more about.
Note that I haven&amp;rsquo;t been involved in any of the contact tracing approaches at AISEC or anywhere else.&lt;/p>
&lt;p>There were three separate points that concerned me.&lt;/p>
&lt;ol>
&lt;li>Everything I have seen pointed to an approach to contact tracing that has huge potential to being abused. An approach that needs careful consideration and maybe shouldn&amp;rsquo;t be used in the first place. But without knowing any details I could hardly tell if this was really the case.&lt;/li>
&lt;li>The way PEPP-PT and AISEC communicated not only with the public but, as it appeared, also with other members of the consortium and employees, didn&amp;rsquo;t seem compatible with my understanding of responsible science, which requires an open discussion.&lt;/li>
&lt;li>This situation started to shed a bad light on everyone working for AISEC who&amp;rsquo;s taking privacy and open communication on such an important topic seriously.&lt;/li>
&lt;/ol>
&lt;p>In order to be able to judge the situation a little better and potentially help the necessary discussion around privacy in contact tracing apps I decided to reply to the only e-mail I had on the topic.
This was before anything was published by PEPP-PT or AISEC.
On April 1st when PEPP-PT was launched the AISEC director Claudia Eckert sent out an e-mail informing everyone that &lt;a class="link" href="https://www.aisec.fraunhofer.de/de/presse-und-veranstaltungen/presse/pressemitteilungen/2020/PEPP-PT.html" target="_blank" rel="noopener"
>AISEC was part of PEPP-PT&lt;/a> (press release from AISEC on that day in German).
I noted that the optics were pretty bad and other institutions such as ETH Zürich left PEPP-PT. In particular, I wanted to know&lt;/p>
&lt;ol>
&lt;li>in which way AISEC is involved in PEPP-PT and how the future collaboration is supposed to look like;&lt;/li>
&lt;li>how the institute wants to ensure that the situation doesn&amp;rsquo;t deteriorate any further (prevent further loss in credibility);&lt;/li>
&lt;li>when specifications, security models, and code would be published.&lt;/li>
&lt;/ol>
&lt;p>I didn&amp;rsquo;t want to get involved in any (public) discussion before knowing what&amp;rsquo;s going on.
Asking internally, the person who should know, seemed like the obvious way to go.&lt;/p>
&lt;p>The response was a little disappointing.&lt;/p>
&lt;p>I won&amp;rsquo;t disclose any content of internal e-mails.
But the last sentence said that I&amp;rsquo;m of course free to hand in my notice and leave AISEC at any time.&lt;/p>
&lt;p>So that&amp;rsquo;s what I&amp;rsquo;m doing.
I leave.
This is not an organization I want to work for.
Neither does the behavior of AISEC as part of PEPP-PT reflect my understanding of research, science, and social responsibility, nor does the response of the AISEC leadership demonstrate an environment in which I want to work.&lt;/p>
&lt;p>&lt;em>(While I got a half-hearted explanation relayed a week later that tried to explain the e-mail with stress and the influx of many hostile e-mails, I believe that it is a symptom of a disrespectful culture within the organization.
Actually, I haven&amp;rsquo;t heard from Claudia Eckert since that e-mail.)&lt;/em>&lt;/p>
&lt;hr>
&lt;p>So if you are interested in hiring me, send me an e-mail (mail@ this domain).&lt;/p></description></item><item><title>Shared-Secrets Service</title><link>https://www.franziskuskiefer.de/p/shared-secrets-service/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/shared-secrets-service/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/shared-secrets-service/hero.jpg" alt="Featured image of post Shared-Secrets Service" />&lt;p>At the &lt;a class="link" href="https://berlin-crypto.github.io" target="_blank" rel="noopener"
>Berlin Crypto&lt;/a> this month we had a talk by &lt;a class="link" href="https://twitter.com/xyahe/" target="_blank" rel="noopener"
>Kevin&lt;/a> about a &lt;a class="link" href="https://secrets.syseleven.de" target="_blank" rel="noopener"
>shared-secret service&lt;/a> they developed at &lt;a class="link" href="https://syseleven.de" target="_blank" rel="noopener"
>Syselevn&lt;/a>.
After experimenting with PGP and deciding that it doesn&amp;rsquo;t do what they needed, they decided to go with a very simple, custom encrypt-then-mac scheme. You can find details &lt;a class="link" href="https://github.com/syseleven/shared-secrets/blob/master/ENCRYPTION.md" target="_blank" rel="noopener"
>here&lt;/a>.
When someone says they built their own encryption scheme and message format I get obviously curious.
In this post I want to summarize the scheme, design decisions, compare it standard authenticated encryption schemes, and ponder the question of the right security definitions.&lt;/p>
&lt;p>Note that I refrain from formal definitions in this post.
I only want to give the intuition.
Please read the linked documents for formal definitions and details.
See for example the &lt;a class="link" href="https://cseweb.ucsd.edu/~mihir/papers/oem.pdf" target="_blank" rel="noopener"
>Authenticated Encryption paper by Bellare and Namprempre&lt;/a> for details on authenticated encryption and the &lt;a class="link" href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.76.4921&amp;amp;rep=rep1&amp;amp;type=pdf" target="_blank" rel="noopener"
>Authenticated Encryption with Associated Data by Rogaway&lt;/a> on AEADs.&lt;/p>
&lt;h2 id="shared-secrets">Shared-Secrets
&lt;/h2>&lt;p>The service and scheme are described as follows:&lt;/p>
&lt;blockquote>
&lt;p>Shared-Secrets is an application that helps you to simply share one-time secrets over the web.
Using the Shared-Secrets service allows you to transfer the actual secret in an encrypted form.
Retrieving the secret is as simple as following a link.
In contrast to other secret sharing services, Shared-Secrets does not store the secret on the server, but puts the encrypted secret into the link that you share with the desired recipient.&lt;/p>&lt;/blockquote>
&lt;p>I leave aside the fact that any attacker that can intercept the message can trivially retrieve the secret and focus on the encryption scheme used for the service.
Note that the service allows to encrypt the message with a password before sharing it to prevent the aforementioned attack.&lt;/p>
&lt;p>The encryption scheme used for this service is a basic encrypt-then-mac scheme that can be written as&lt;/p>
&lt;pre tabindex="0">&lt;code>(c, t) &amp;lt;- EtM(key, nonce, msg, aad)
&lt;/code>&lt;/pre>&lt;p>where &lt;code>aad&lt;/code> contains all meta-data (version etc.).
Keys for the mac and encryption algorithms are derived as follows&lt;/p>
&lt;pre tabindex="0">&lt;code>key &amp;lt;- random() # 32-byte
(k_c, k_t) &amp;lt;- (HMAC-SHA256(key, &amp;#34;enc&amp;#34;), HMAC-SHA256(key, &amp;#34;mac&amp;#34;))
rsakey &amp;lt;- RSA-OAEP(pk, key)
&lt;/code>&lt;/pre>&lt;p>The RSA key &lt;code>pk&lt;/code> is the server&amp;rsquo;s public key.
Now we can compute the ciphertext and mac.&lt;/p>
&lt;pre tabindex="0">&lt;code>c &amp;lt;- AES-256-CTR(k_c, nonce, msg)
t &amp;lt;- HMAC-SHA256(k_t, aad, c)
&lt;/code>&lt;/pre>&lt;p>The message format is defined as&lt;/p>
&lt;pre tabindex="0">&lt;code>[version:01][rsakeycount:02][rsakeyid:32][rsakeylength:02][rsakey:mm][...][rsakeyid:32][rsakeylength:02][rsakey:mm][nonce:16][message:nn][mac:32]
&lt;/code>&lt;/pre>&lt;p>with &lt;code>rsakeyid := SHA256(pk)&lt;/code> and &lt;code>nonce := $(date +%s)|0..0&lt;/code> (8-byte unix timestamp, padded 8 zero bytes).&lt;/p>
&lt;h3 id="observations">Observations
&lt;/h3>&lt;p>Looking at the scheme there are a two things that stand out.
This is in addition to the unclear threat scenario that I won&amp;rsquo;t discuss in this post.&lt;/p>
&lt;p>Note that there&amp;rsquo;s currently no standardized way of doing hybrid encryption. There&amp;rsquo;s currently an &lt;a class="link" href="https://tools.ietf.org/html/draft-irtf-cfrg-hpke-02" target="_blank" rel="noopener"
>RFC in the making&lt;/a> but until that&amp;rsquo;s finished it is necessary to define custom hybrid schemes as done here.&lt;/p>
&lt;h4 id="the-nonce-is-not-random">The nonce is not random
&lt;/h4>&lt;p>When using encryption schemes such as AES-CTR it is paramount that the nonce is unique.
If this is not the case, the key-stream becomes known and allows full message recovery.
Using a timestamp as nonce is usually a bad move as time is predictable and not random.&lt;/p>
&lt;h4 id="how-is-this-different-from-an-aead">How is this different from an AEAD
&lt;/h4>&lt;p>The scheme as described above looks like an AEAD scheme.
So the question is why didn&amp;rsquo;t they just use an established AEAD scheme such as AES-GCM or ChaCha20Poly1305.&lt;/p>
&lt;h2 id="encrypt-then-mac--aead">Encrypt-then-Mac == AEAD?
&lt;/h2>&lt;p>Let&amp;rsquo;s talk about encryption and authentication first.
Historically encryption offered confidentiality but no integrity.
Something that&amp;rsquo;s not immediately obvious to non-cryptographers who want to use encryption to protect their data.
Authenticated Encryption (AE) and its relation to non-authenticated encryption was first described in the previously mentioned paper by &lt;a class="link" href="https://cseweb.ucsd.edu/~mihir/papers/oem.pdf" target="_blank" rel="noopener"
>Bellare and Namprempre&lt;/a> in 2000.&lt;/p>
&lt;p>Encryption was considered secure if it satisfied the indistinguishable under chosen plaintext property, i.e. if an attacker couldn&amp;rsquo;t distinguish whether a ciphertext encrypts message &lt;code>a&lt;/code> or message &lt;code>b&lt;/code>.
But &amp;ldquo;security&amp;rdquo; of an encryption scheme intuitively might mean something else as well.
In addition to not being able to know which message is encrypted in a ciphertext it shouldn&amp;rsquo;t be possible for an attacker to change the content of the message or the ciphertext without the recipient noticing it.
This property can be described as ciphertext (or plaintext) integrity and allows the definition of authenticated encryption.
Adding associated data (AD) that is not encrypted but authenticated we get Authenticated Encryption with Associated Data (AEAD).
For a comprehensive overview of AEAD and its history I recommend checking out these &lt;a class="link" href="https://summerschool-croatia.cs.ru.nl/2016/slides/PhilRogaway.pdf" target="_blank" rel="noopener"
>slides by Phillip Rogaway&lt;/a>.&lt;/p>
&lt;h3 id="encrypt-then-mac--aead-1">Encrypt-then-Mac != AEAD
&lt;/h3>&lt;p>Generally encrypt-then-mac schemes can be considered AEADs.
For this to be true however, the Mac has to be strongly unforgeable.
Luckily this is the case for HMAC such that the scheme described above is fine in this regard.&lt;/p>
&lt;p>A MAC scheme is weakly unforgeable (WUF-CMA) if an attacker is not able to generate a tag for a new message, i.e. a message that she hasn&amp;rsquo;t seen a tag for before.
If a scheme is strongly unforgeable (SUF-CMA), it must me impossible for an attacker to generate a new message, tag pair, i.e. not only a new message but also a new tag.
While SUF-CMA seems like an artificial extension of the intuitive notion of WUF-CMA it is necessary to build an AEAD as WUF-CMA doesn&amp;rsquo;t provide integrity guarantees for the ciphertext or plaintext.&lt;/p>
&lt;h2 id="aead-properties">AEAD Properties
&lt;/h2>&lt;p>The motivation to build this custom AEAD scheme instead of using an existing one was a big point of discussion at the meetup.
The essence is that Kenny didn&amp;rsquo;t trust that an AEAD provided exactly what he needed.
So what are properties of an AEAD?
Generally AEADs are supposed to offer IND-CCA security where the attacker is allowed to decrypt arbitrary ciphertexts.
Instead of thinking of AEAD as IND-CCA secure it is more intuitive to think of it as IND-CPA secure (i.e. the attacker can&amp;rsquo;t do better than guessing which message is encrypted in a ciphertext when given the ciphertext to one of two adversarially chosen messages) and offering INT-CTXT, i.e. integrity of the ciphertext.
Note that this &lt;strong>does not&lt;/strong> imply authenticity of the plaintext because IND-CCA does not guarantee that it is impossible for an attacker to generate a valid ciphertext for a specially crafted message.&lt;/p>
&lt;h3 id="uniqueness-of-tags">Uniqueness of Tags
&lt;/h3>&lt;p>The property that was questioned to be part of the AEAD security definition but was important to the Shared-Secrets service is the uniqueness of the ciphertext and tag.
This is necessary to make sure secrets can only be retrieved once.
According to the &lt;a class="link" href="https://secrets.syseleven.de/how" target="_blank" rel="noopener"
>website&lt;/a> the server uses a fingerprint to achieve this.
First I notice that fingerprint is not defined in the encryption scheme.
Looking at &lt;a class="link" href="https://github.com/syseleven/shared-secrets/blob/2fa63d5bf0673d497c7ee5afa766176ccb34b34f/lib/shared-secrets.exec.php#L256" target="_blank" rel="noopener"
>the code&lt;/a> it appears that the fingerprint is the tag.
The fingerprint is stored on the server and the service refuses to decrypt anything with the fingerprint if it did so once before.&lt;/p>
&lt;p>So the question is whether the used encrypt-then-mac scheme makes sure that the tag is unique and whether an AEAD would have offered this property as well.&lt;/p>
&lt;p>In other words, can an attacker generate a second, different, valid tag &lt;code>t'&lt;/code> for an existing ciphertext, tag pair &lt;code>(c, t)&lt;/code>.
Note that I do not consider encodings here.
(Using base64 encoding for example it is possible to generate two different base64 strings that decode to the same binary message.)
To this end there has to exist a pair &lt;code>(c, t), (c', t')&lt;/code> with &lt;code>Dec(c) == Dec(c') &amp;amp;&amp;amp; Verify(t) == Verify(t')&lt;/code> i.e. two ciphertext, tag pairs that decrypt to the same message and both tags are valid.
First note that the unforgeability of the Mac ensures that it is impossible to generate a valid tag &lt;code>t'&lt;/code> for a given ciphertext &lt;code>c&lt;/code> without knowledge of the key.
It follows that the ciphertext &lt;code>c'&lt;/code> has to be different from the original ciphertext &lt;code>c&lt;/code>.
But without knowledge of the message &lt;code>m&lt;/code> encrypted in &lt;code>c&lt;/code> (or the key) it is impossible to generate a ciphertext &lt;code>c'&lt;/code> that decrypts to &lt;code>m&lt;/code>.
Hence this is not possible.&lt;/p>
&lt;p>While everything else in this post were well established properties of AEADs this one doesn&amp;rsquo;t appear to follow trivially.
However, this applies to the custom scheme used in Shared-Secrets as well as an off-the-shelf AEAD.&lt;/p>
&lt;h2 id="timestamps-as-nonces">Timestamps as Nonces
&lt;/h2>&lt;p>Non-random nonces break most AEAD schemes.
This is one reason &lt;a class="link" href="https://web.cs.ucdavis.edu/~rogaway/papers/keywrap.pdf" target="_blank" rel="noopener"
>Misuse-Resistant AE (MRAE)&lt;/a> was introduced and specified for schemes such as AES-GCM (&lt;a class="link" href="https://tools.ietf.org/html/rfc8452" target="_blank" rel="noopener"
>AES-GCM-SIV&lt;/a>).&lt;/p>
&lt;p>So how does choosing a timestamp as nonce fare in the Shared-Secret scheme?&lt;/p>
&lt;p>Recall that AES in counter mode, as used here, is an XOR of a plaintext block with the AES encryption of the concatenation of the nonce and the counter (&lt;code>c_i = m_i xor AES(key, nonce||ctr)&lt;/code>).
Thus, one can recover an unknown plaintext by computing the xor of its ciphertext with the xor of a known ciphertext, plaintext pair (&lt;code>m_i = c_i xor (c'_i xor m'_i)&lt;/code>) when the nonce is known.&lt;/p>
&lt;p>While the Shared-Secrets scheme is very fragile here and not well-designed here (why not just take a random nonce?) I can&amp;rsquo;t see how this can be exploited.
Even if an attacker is able to generate two ciphertexts with the same nonce (this can be easily done by sending two requests to the server at the same time), the key will be different in both cases.&lt;/p>
&lt;h2 id="discussion-how-to-define-security">Discussion: How to define security?
&lt;/h2>&lt;p>This episode illustrates how important it is for security definitions to model real-world scenarios that people actually have when using a primitive.
But it also shows that sometimes, even though standard primitives with appropriate security definitions exist, communicating these properties fail.
The use case of the Shared-Secrets is a peculiar one but highlights these issues.
Something I did not expect is that people rather define their own crypto schemes than using existing ones because they think they don&amp;rsquo;t understand the properties properly.
But this is all the more reason to make sure the exact security properties a scheme offers are communicated and well understood by everyone.&lt;/p>
&lt;p>For me this is another pointer that it is important to have properly working communication channels between people analyzing crypto and everyone using it in order to transport requirements and make sure everyone is on the same page.
And this is, among others things, what we do at the &lt;a class="link" href="https://berlin-crypto.github.io" target="_blank" rel="noopener"
>Berlin Crypto&lt;/a> meetup in a very informal and local setting.&lt;/p></description></item><item><title>Mozilla SURF Summit Vienna 2019</title><link>https://www.franziskuskiefer.de/p/mozilla-surf-summit-vienna-2019/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/mozilla-surf-summit-vienna-2019/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/mozilla-surf-summit-vienna-2019/surf-vienna-2019.jpg" alt="Featured image of post Mozilla SURF Summit Vienna 2019" />&lt;p>Last week we had the third Security Engineering University Relationship Framework (&lt;a class="link" href="https://surf.mozilla.org/" target="_blank" rel="noopener"
>SURF&lt;/a>) &lt;a class="link" href="https://web.archive.org/web/20191111151144/https://events.mozilla.org/mozillasecurityresearchsummit2019" target="_blank" rel="noopener"
>summit in Vienna&lt;/a>.
The last SURF summit I attended was the first one &lt;a class="link" href="../mozilla-security-research-summit-london-2018/" >in London 2018&lt;/a>.&lt;/p>
&lt;p>This time we had four talks by Mozillians, three invited talks, as well as eight lightning talks.
I &lt;a class="link" href="https://twitter.com/_franziskus_/status/1192730087487135744" target="_blank" rel="noopener"
>live-tweeted&lt;/a> a little during the event if you like slides on photos.&lt;/p>
&lt;p>&lt;a class="link" href="https://christophkerschbaumer.com/" target="_blank" rel="noopener"
>Christoph&lt;/a> talked about how to &lt;a class="link" href="surf_vienna_kerschbaumer.pdf" >harden the content security landscape of Firefox&lt;/a> and posed the question how we could do some of that on the web.
The web PKI with all its problems was the topic of &lt;a class="link" href="thyla-webpki.pdf" >Thyla&amp;rsquo;s talk&lt;/a>, with a focus on &lt;a class="link" href="https://mislove.org/publications/CRLite-Oakland.pdf" target="_blank" rel="noopener"
>CRLite&lt;/a>. There&amp;rsquo;s also a &lt;a class="link" href="https://blog.mozilla.org/security/2019/11/01/validating-delegated-credentials-for-tls-in-firefox/" target="_blank" rel="noopener"
>blog post&lt;/a> on the Mozilla security blog on this with more details and links.&lt;/p>
&lt;p>One prominent topic at this SURF summit was how to preserve privacy online and counter tracking.
&lt;a class="link" href="https://twitter.com/nataliabielova" target="_blank" rel="noopener"
>Natliia&lt;/a> gave an invited talk on &lt;a class="link" href="https://arxiv.org/abs/1812.01514" target="_blank" rel="noopener"
>detecting trackers missed by filter lists and browser extensions&lt;/a>, &lt;a class="link" href="https://senglehardt.com/" target="_blank" rel="noopener"
>Steven&lt;/a> talked about &lt;a class="link" href="senglehardt-private-web.pdf" >challenges in building a private web&lt;/a> and &lt;a class="link" href="https://www.esat.kuleuven.be/cosic/people/gunes-acar/" target="_blank" rel="noopener"
>Gunes&lt;/a> about &lt;a class="link" href="dark_patterns_surf_vienna_mozilla.pdf" >dark patterns&lt;/a> and how to find them on the web.&lt;/p>
&lt;p>On the crypto side we had &lt;a class="link" href="https://twitter.com/kennyog" target="_blank" rel="noopener"
>Kenny&lt;/a> talk about &lt;a class="link" href="kenny-api-design.pdf" >API design of crypto primitves&lt;/a> and primality testing.
Details can be found in the well titled papers &lt;a class="link" href="https://eprint.iacr.org/2019/032" target="_blank" rel="noopener"
>safety in numbers&lt;/a> and &lt;a class="link" href="https://eprint.iacr.org/2018/749" target="_blank" rel="noopener"
>prime and prejudice&lt;/a>.
I talked about &lt;a class="link" href="kiefer-pq-mozilla.pdf" >Post Quantum Crypto and Mozilla&lt;/a> calling on more experiments with post quantum crypto beyond TLS key exchange.&lt;/p>
&lt;p>We closed the summit with a panel discussion on the gap between theory and practice.&lt;/p></description></item><item><title>Wrapping arithmetic in Rust</title><link>https://www.franziskuskiefer.de/p/wrapping-arithmetic-in-rust/</link><pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/wrapping-arithmetic-in-rust/</guid><description>&lt;p>One of Rusts great feature is that it catches integer overflows at runtime and panics rather than wraps (in debug builds).
I recommend you read &lt;a class="link" href="https://huonw.github.io/blog/2016/04/myths-and-legends-about-integer-overflow-in-rust/" target="_blank" rel="noopener"
>Huon&amp;rsquo;s blog post&lt;/a> about this from a couple years ago.&lt;/p>
&lt;p>While this is a desirable behaviour in general, integer overflows are commonly used when implementing cryptography primitives.
Rust offers wrapping alternatives such as &lt;code>wrapping_add&lt;/code> etc. to allow wrapping behaviour.
However, this makes code very hard to read, e.g. &lt;code>let c = a + b&lt;/code> is easier to read than &lt;code>let c = a.wrapping_add(b)&lt;/code>.&lt;/p>
&lt;h2 id="other-wrapping-arithmetic">Other wrapping arithmetic
&lt;/h2>&lt;p>Rust itself provides a wrapping integer type in &lt;a class="link" href="https://doc.rust-lang.org/std/num/struct.Wrapping.html" target="_blank" rel="noopener"
>&lt;code>std::num::Wrapping&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Rust" data-lang="Rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">num&lt;/span>::&lt;span class="n">Wrapping&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">zero&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Wrapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="k">u32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Wrapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="k">u32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="kt">u32&lt;/span>::&lt;span class="no">MAX&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">zero&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a good solution when you want to be explicit about what you&amp;rsquo;re doing.
However, its readability is still not great.&lt;/p>
&lt;h2 id="wrappit">#[wrappit]
&lt;/h2>&lt;p>To alleviate this shortcoming I implemented a &lt;a class="link" href="https://doc.rust-lang.org/reference/procedural-macros.html" target="_blank" rel="noopener"
>procedural macro&lt;/a> that rewrites arithmetic operators &lt;code>+,-,*&lt;/code> into their wrapping equivalents &lt;code>wrapping_add, wrapping_sub, wrapping_mul&lt;/code> as well as their assigning versions &lt;code>+=,-=,*=&lt;/code>.&lt;/p>
&lt;p>The following function for example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Rust" data-lang="Rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[wrappit]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">mix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">u32&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">u32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>is rewritten to&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Rust" data-lang="Rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">mix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">u32&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">u32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wrapping_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wrapping_mul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find wrapping_arithmetic on &lt;a class="link" href="https://github.com/franziskuskiefer/wrapping-arithmetic" target="_blank" rel="noopener"
>GitHub&lt;/a> and on &lt;a class="link" href="https://crates.io/crates/wrapping_arithmetic" target="_blank" rel="noopener"
>crates.io&lt;/a>.
To use &lt;code>#[wrappit]&lt;/code> add &lt;code>wrapping_arithmetic = &amp;quot;0.1&amp;quot;&lt;/code> to your &lt;code>cargo.toml&lt;/code>.&lt;/p></description></item><item><title>Update on hacspec</title><link>https://www.franziskuskiefer.de/p/update-on-hacspec/</link><pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/update-on-hacspec/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/update-on-hacspec/hacspec2-architecture.png" alt="Featured image of post Update on hacspec" />&lt;p>Earlier this year I introduced &lt;a class="link" href="../hacspec1" >hacspec, a new specification language for cryptographic primitives&lt;/a>.
After Karthik presented the idea and very preliminary results at &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/blob/master/doc/hacspec-short-talk-CFRG-IETF-101.pdf" target="_blank" rel="noopener"
>IETF 101&lt;/a> in March we made quite some progress and presented a paper with a little more detail at &lt;a class="link" href="https://ssr2018.net/" target="_blank" rel="noopener"
>SSR&lt;/a> earlier this week.
In this blog post I&amp;rsquo;ll give the gist of the &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/blob/master/doc/hacspec-ssr18-paper.pdf" target="_blank" rel="noopener"
>SSR paper&lt;/a> and introduce the first version of &lt;em>hacspec&lt;/em>.&lt;/p>
&lt;p>All information about &lt;em>hacspec&lt;/em> can be found at &lt;a class="link" href="https://hacs-workshop.github.io/hacspec/" target="_blank" rel="noopener"
>https://hacs-workshop.github.io/hacspec/&lt;/a>.&lt;/p>
&lt;h2 id="the-language">The language
&lt;/h2>&lt;p>The &lt;em>hacspec&lt;/em> language is a DSL for cryptographic algorithms.
But it can also be seen as a typed subset of Python.
The following describes the language.&lt;/p>
&lt;pre tabindex="0">&lt;code> Values v ::=
n integer constants
| True | False boolean constants
| &amp;#39;...&amp;#39; | &amp;#34;...&amp;#34; string constants
| (v1,...,vn) tuple constant
| array([v1,...,vn]) array constant
Expressions e ::=
v values
| x | m.x local and global variables
| (e1,...,en) tuple construction
| array([e1,...,en]) array construction
| array.length(e) array length
| e[e0] array access
| e[e0:e1] array slice
| e(e1,...,en) function call
| e1 binop e2 builtin binary operators
| unaryop e builtin unary operators
Types t ::=
int, str, bool basic types
| tuple_t(t1,...,tn) tuples
| vlarray_t(t) variable-length array
| x user-defined or builtin type
| x(t1,...,tn,e1,...,em) builtin type application
Statements s ::=
x: Type = t type declaration
| x: t variable declaration
| x = e variable assignment
| x binop= e augmented variable assignment
| (x1,..,xn) = e tuple matching
| x[i] = e array update
| x[i] binop= e augmented array update
| x[i:j] = e array slice update
| if e: if-elif-else conditional
s1...sn
elif e:
s1&amp;#39;...sn&amp;#39;
else
s1&amp;#39;&amp;#39;...sn&amp;#39;&amp;#39;
| for i in range(e): for loop
s1...sn
| break break from loop
| def x(x1:t1,...,xn:tn) -&amp;gt; t: function declaration
s1 ... sn
| return e return from function
| from x import x1, x2,..., xn module import
Specs σ ::= s1...sn sequence of statements
&lt;/code>&lt;/pre>&lt;h2 id="hacspec-architecture">hacspec architecture
&lt;/h2>&lt;p>The &lt;em>hacspec&lt;/em> architecture is depicted in the following graph.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/update-on-hacspec/hacspec2-architecture.png"
width="2873"
height="2451"
srcset="https://www.franziskuskiefer.de/p/update-on-hacspec/hacspec2-architecture_hu_8de99e7eeff4771e.png 480w, https://www.franziskuskiefer.de/p/update-on-hacspec/hacspec2-architecture_hu_950af34ffa8e638f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;h2 id="writing-hacspec">Writing hacspec
&lt;/h2>&lt;p>Every spec should be accompanied by a test and some test vectors leaving the author with at least two files, e.g. &lt;code>poly.py&lt;/code> and &lt;code>poly_test.py&lt;/code> (also see &lt;a class="link" href="#Example" >Example section&lt;/a>).
Note that only the spec file has to be &lt;em>hacspec&lt;/em> syntax.
The test file can make use of all of Python.
&lt;em>hacspec&lt;/em> comes with a standard library called speclib and a spec-checker.
To use the &lt;em>hacspec&lt;/em> speclib and spec-checker install them via &lt;code>pip install hacspec&lt;/code> or from the source (the &lt;code>setup.py&lt;/code> for the Python package can be found in &lt;code>/build/&lt;/code>).
Running &lt;em>hacspec&lt;/em> requires a Python interpreter version 3.6.4 or newer.&lt;/p>
&lt;h3 id="speclib">speclib
&lt;/h3>&lt;p>Commonly used functionality is provided in &lt;em>speclib&lt;/em> (&lt;code>from hacspec.speclib import *&lt;/code>).
The full speclib documentation can be found &lt;a class="link" href="https://hacs-workshop.github.io/hacspec/docs/" target="_blank" rel="noopener"
>here&lt;/a>.
Some highlights are&lt;/p>
&lt;ul>
&lt;li>&lt;em>modular arithmetic&lt;/em>: &lt;code>natmod_t&lt;/code> is an integer data type that provides modular arithmetic, e.g. &lt;code>felem_t = natmod_t((2**130)-5)&lt;/code> defines field elements modulo &lt;code>(2**130)-5&lt;/code>.&lt;/li>
&lt;li>&lt;em>machine integers&lt;/em>: &lt;code>unitN_t&lt;/code> define commonly used machine integer types for &lt;code>N = 8, 16, 32, 64, 128&lt;/code>.&lt;/li>
&lt;li>&lt;em>byte arrays, vectors, and matrices&lt;/em>: provided data structures are &lt;code>array_t, bytes_t, vector_t, matrix_t&lt;/code> as well as the variable length versions &lt;code>vlarray_t&lt;/code> and &lt;code>vlbytes_t&lt;/code>. Note that the vector and matrix data types offer point-wise arithmetic.&lt;/li>
&lt;li>&lt;em>refinements&lt;/em>: &lt;code>refine_t&lt;/code> allows to refine data types.&lt;/li>
&lt;li>&lt;em>contracts&lt;/em>: &lt;code>@contract&lt;/code> annotation on functions can be used for pre- and post-conditions.&lt;sup>1&lt;/sup>&lt;/li>
&lt;/ul>
&lt;h3 id="spec-checker">spec-checker
&lt;/h3>&lt;p>Since hacspecs are executed with a Python interpreter it is not sufficient to run &lt;em>hacspec&lt;/em> to check their syntax.
To check that the syntax is valid a spec-checker is provided.&lt;sup>2&lt;/sup>&lt;/p>
&lt;pre tabindex="0">&lt;code>hacspec-check &amp;lt;your-hacspec&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="executing-hacspec">Executing hacspec
&lt;/h3>&lt;p>&lt;em>hacspec&lt;/em> tests are executed with the Python interpreter.
Executing tests on a spec can yield three different results.&lt;/p>
&lt;ol>
&lt;li>The execution is successful and all test vectors pass. In this case the spec is most likely correct and doesn&amp;rsquo;t contain any obvious typing issues.&lt;/li>
&lt;li>The execution fails because of a failing test case. In this case the spec is probably wrong (or the test vectors are incorrect).&lt;/li>
&lt;li>The execution fails because of a type error. The speclib as well as &lt;a class="link" href="https://github.com/agronholm/typeguard/" target="_blank" rel="noopener"
>typeguard&lt;/a> are used to perform runtime type checks.&lt;/li>
&lt;/ol>
&lt;h2 id="checking-and-compiling-hacspec">Checking and compiling hacspec
&lt;/h2>&lt;p>To use &lt;em>hacspecs&lt;/em> for formal verification such as verification of cryptographic properties of an algorithm, generating code in other languages from the spec, or verifying correctness of other implementations with it, a second set of tools is provided.
These tools are written in OCaml and thus require additional setup and are not packaged right now.&lt;sup>3&lt;/sup>
Check out the &lt;a class="link" href="https://github.com/HACS-workshop/hacspec" target="_blank" rel="noopener"
>repository&lt;/a> to use them.
All tools can be easily called via &lt;code>make&lt;/code> (see documentation in the repo &lt;code>/compiler/&lt;/code> for details).&lt;/p>
&lt;h3 id="type-checker">Type checker
&lt;/h3>&lt;p>To perform proper type checking Python is impractical.
A native type checker is implemented in OCaml that performs syntax and type checking for &lt;em>hacspec&lt;/em>.
To run the type checker on a spec simply run &lt;code>./checker.native &amp;lt;your-spec&amp;gt;&lt;/code>.&lt;/p>
&lt;h3 id="compiler">Compiler
&lt;/h3>&lt;p>The type checker also produces a typed AST that can be used to generate the spec in another formal language.
There are currently compiler for EasyCrypt and F*.
I&amp;rsquo;ll only describe the F* compiler as it&amp;rsquo;s more complete.&lt;/p>
&lt;h4 id="f-compiler">F* compiler
&lt;/h4>&lt;p>The F* compiler requires &lt;a class="link" href="https://github.com/mitls/hacl-star/" target="_blank" rel="noopener"
>&lt;code>HACL_HOME&lt;/code>&lt;/a> and &lt;a class="link" href="https://github.com/FStarLang/FStar" target="_blank" rel="noopener"
>&lt;code>FSTAR_HOME&lt;/code>&lt;/a> environment variables to be set.
The compiler is then invoked like this &lt;code>./to_fstar &amp;lt;your-spec&amp;gt;&lt;/code>.
The generated F* spec can then be type checked or executed on test vectors to check correctness of the spec.
Using &lt;a class="link" href="https://github.com/FStarLang/kremlin" target="_blank" rel="noopener"
>kremlin&lt;/a> the F* code can also be used to generate C code.&lt;/p>
&lt;h2 id="Example">Example
&lt;/h2>&lt;p>The &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/specs" target="_blank" rel="noopener"
>&lt;em>hacspec&lt;/em> repo&lt;/a> has many examples.
I&amp;rsquo;ll only give a short one here.&lt;/p>
&lt;p>The spec &lt;code>poly.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">hacspec.speclib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p130m5&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">nat_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">130&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">felem_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">natmod_t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p130m5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@typechecked&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">nat_t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">natmod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">p130m5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@typechecked&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">poly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">vlarray_t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">felem_t&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">felem_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">acc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">r&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">acc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The test &lt;code>poly_test.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">poly&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x6f4620636968706172676f7470797243&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x6f7247206863726165736552206d7572&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">felem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xa806d542fe52447f336d555778bed685&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">expected&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">natmod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xa01b776a69ea8c1cd3ba00179dc218ab&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p130m5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">poly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">expected&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Error&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Expected: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expected&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Got: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Test successful&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This can now be run with &lt;code>python poly_test.py&lt;/code> and checked with &lt;code>hacspec-check poly.py&lt;/code> and &lt;code>checker.native poly.py&lt;/code>.
Compiling this to F* can be done with &lt;code>to_fstar.native poly.py&lt;/code>, generating the following F* code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ocaml" data-lang="ocaml">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="nc">Poly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">open&lt;/span> &lt;span class="nc">Speclib&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">p130m5&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">nat_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="o">**.&lt;/span> &lt;span class="n">130&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-.&lt;/span> &lt;span class="n">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">felem_t&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nc">Type0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">natmod_t&lt;/span> &lt;span class="n">p130m5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">felem&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">nat_t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">felem_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">natmod&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="n">p130m5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">poly&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">vlarray_t&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">felem_t&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">felem_t&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">felem&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repeati&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">array_length&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">acc&lt;/span> &lt;span class="o">+.&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">*.&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="next-steps">Next steps
&lt;/h1>&lt;p>We hope that &lt;em>hacspec&lt;/em> is a useful tool for spec authors and many people indeed voiced interest already.
While the tooling isn&amp;rsquo;t perfect yet, the language is developed enough to start using it.
The next steps for &lt;em>hacspec&lt;/em> is to get some usage from spec authors and improve tooling.
We also hope to get more compilers for different formal languages implemented.&lt;/p>
&lt;br>
&lt;hr>
&lt;br>
&lt;ol>
&lt;li>Note that contracts are still in development and not fully supported yet.&lt;/li>
&lt;li>In future &lt;em>hacspec&lt;/em> syntax checks and running test vectors on the spec should be done in one invocation.&lt;/li>
&lt;li>In future pre-built binaries should be distributed to make this easier.&lt;/li>
&lt;/ol>
&lt;p>&lt;em>hacspec is mostly a spare time project for me at the moment. Development is therefore not always as fast as I&amp;rsquo;d like.&lt;/em>&lt;/p></description></item><item><title>Mozilla Security Research Summit London 2018</title><link>https://www.franziskuskiefer.de/p/mozilla-security-research-summit-london-2018/</link><pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/mozilla-security-research-summit-london-2018/</guid><description>&lt;p>The Security Engineering University Relationship Framework (SURF) is an initiative within the Firefox security engineering team to improve relations with privacy and security researchers.
SURF includes a variety of possible relationships but is focused on building long-term relationships with researchers and organisations.
The goal of SURF projects is to explore topics that are outside of Mozilla&amp;rsquo;s immediate product needs, influence Mozilla&amp;rsquo;s long-term product development and vision.&lt;/p>
&lt;p>On November 12th the &lt;a class="link" href="https://web.archive.org/web/20181119104824/https://events.mozilla.org/securityresearchsummit" target="_blank" rel="noopener"
>first SURF summit&lt;/a> was held in London.
SURF summits are an opportunity for researchers and Mozillians to get together and exchange ideas.
This very first summit, organised by &lt;a class="link" href="https://twitter.com/ThylaVdMerwe" target="_blank" rel="noopener"
>Thyla&lt;/a>, was attended by a number of Mozillians, UK academics, and grad students.&lt;/p>
&lt;p>Four Mozillians presented challenges they are currently facing, pitching possible research challenges.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://senglehardt.com/" target="_blank" rel="noopener"
>Steven Englehardt&lt;/a> talked about the need for &lt;a class="link" href="https://drive.google.com/file/d/1AG_fFXiJOUSAj3Bwe9UVxO3aSL-2YVAP/view" target="_blank" rel="noopener"
>tracking protection&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://christophkerschbaumer.com/" target="_blank" rel="noopener"
>Christoph Kerschbaumer&lt;/a> talked about &lt;a class="link" href="https://drive.google.com/file/d/1CwhFz3sUs3qbL1X8LGM9DcGmC9RQWTkJ/view" target="_blank" rel="noopener"
>preventing data exfiltration from the browser&lt;/a>&lt;/li>
&lt;li>I talked about &lt;a class="link" href="https://drive.google.com/file/d/1Ly3S3BE-S8tDbty7nX6UTcuwn2CrGyAe/view" target="_blank" rel="noopener"
>securely implementing cryptography&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://twitter.com/ThylaVdMerwe" target="_blank" rel="noopener"
>Thyla van der Merwe&lt;/a> talked about &lt;a class="link" href="https://drive.google.com/file/d/1XIJLIp-TuG9tSiu40EfatAOWydnUQIFB/view" target="_blank" rel="noopener"
>Tor at scale&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>There were also two invited speakers.
&lt;a class="link" href="https://www.kcl.ac.uk/nms/depts/informatics/people/Academic-Staff.aspx" target="_blank" rel="noopener"
>Lorenzo Cavallaro&lt;/a> introduced us to &lt;a class="link" href="https://drive.google.com/file/d/1t4Y1QpJqZ0wZ6C1vmW0bLqJu3zTExTyH/view" target="_blank" rel="noopener"
>TESSERACT&lt;/a>, an attempt to elliminate experimental bias in malware classification systems.
And &lt;a class="link" href="https://www.sba-research.org/team/key-researchers/stefan-brunthaler/" target="_blank" rel="noopener"
>Stefan Brunthaler&lt;/a> talked about software diversity as possible solutions to spectre-like attacks (no slides online yet).
In two rounds grad students also presented ongoing work on &lt;a class="link" href="https://drive.google.com/file/d/1wShMHfhrfSxGqJDv7XNpnjEK4wgVshDc/view" target="_blank" rel="noopener"
>MPC&lt;/a>, &lt;a class="link" href="https://drive.google.com/file/d/16R_O-Y14wt5cr0zqL_IdW63ri3ZYQOPE/view" target="_blank" rel="noopener"
>Primality Testing&lt;/a>, &lt;a class="link" href="https://drive.google.com/file/d/1On2B8v6Dfw-N3hY3mKWKAOCAZCMPuZU1/view" target="_blank" rel="noopener"
>Blockchains&lt;/a>, and &lt;a class="link" href="https://drive.google.com/file/d/1iOZAUSdBpGXi9WfZJg4NdcpBfvE10MV6/view" target="_blank" rel="noopener"
>UnlimitID&lt;/a> in lightning talks.&lt;/p></description></item><item><title>Shipping (some) HACL*</title><link>https://www.franziskuskiefer.de/p/shipping-some-hacl/</link><pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/shipping-some-hacl/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/shipping-some-hacl/hero.jpg" alt="Featured image of post Shipping (some) HACL*" />&lt;p>If you didn&amp;rsquo;t read the article about the &lt;a class="link" href="../hacl-star/" >HACL* approach&lt;/a>, go there first and read it. tl;dr&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/mitls/hacl-star/" target="_blank" rel="noopener"
>HACL*&lt;/a> is a cryptographic library written in &lt;a class="link" href="https://www.fstar-lang.org/" target="_blank" rel="noopener"
>F*&lt;/a> that allows translation to C using kremlin.
It guarantees memory safety, secret independent computation, and functional correctness with respect to a mathematical specification.&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;p>In this second blog post I describe the process of integrating code from HACL*, a researchy crypto library, into NSS, a production library shipping to millions of people, running on a plethora of platforms.
In short, how to ship (some parts of) HACL*.&lt;/p>
&lt;h1 id="shipping-formally-verified-code">Shipping formally verified code
&lt;/h1>&lt;p>Before integrating any code from HACL* into NSS there had to be some criteria the code had to fulfil in order to get considered and a process of integrating, maintaining, and updating the code.
The criteria roughly looked like this:&lt;/p>
&lt;ul>
&lt;li>The code has to be correct.&lt;/li>
&lt;li>Performance must not be degraded by any new code.&lt;/li>
&lt;li>The code has to be human readable and modifiable, i.e. it must pass a code review process.&lt;/li>
&lt;li>The code must run on all platforms supported by NSS or must have fallback code for platforms that are not supported.&lt;/li>
&lt;li>Upstream changes can to be integrated easily into NSS and fixes can be integrated upstream.&lt;/li>
&lt;li>The verification and generation toolchain has to run in the NSS world.&lt;/li>
&lt;/ul>
&lt;p>We started integrating HACL* crypto primitives into NSS with &lt;a class="link" href="https://tools.ietf.org/html/rfc7748" target="_blank" rel="noopener"
>Curve25519&lt;/a>.
At the time of writing NSS contains code from HACL* for Curve25519 64-bit, &lt;a class="link" href="https://tools.ietf.org/html/rfc7539" target="_blank" rel="noopener"
>Poly1305&lt;/a> 32-bit and 64-bit, &lt;a class="link" href="https://tools.ietf.org/html/rfc7539" target="_blank" rel="noopener"
>ChaCha20&lt;/a>, and ChaCha20 with SSSE3 hardware acceleration.
More primitives are in the pipeline and will be integrated in the near future.&lt;/p>
&lt;h2 id="correctness">Correctness
&lt;/h2>&lt;p>Any code that lands in NSS has to be correct, obviously.
This might be evident but when talking about HACL* generated C code, correctness is not so simple.
Correctness can be checked relatively easily by looking at the HACL* specification of a given primitive.
This code is relatively easy to review (when familiar with F*) as it closely resembles the mathematical specification of the primitive.
The correctness of the C code is guaranteed by the formal proofs from HACL*.
In addition we run all the usual test vectors on it of course.
To catch any errors in the extraction chain from F* to C the extracted C code is reviewed for correctness as well.&lt;/p>
&lt;h2 id="performance">Performance
&lt;/h2>&lt;p>Performance was not a big concern.
As shown in the &lt;a class="link" href="https://github.com/mitls/hacl-star/blob/master/doc/papers/hacl-star-ccs2017.pdf" target="_blank" rel="noopener"
>HACL* paper from CCS 2017&lt;/a>, performance of most primitives is on par with or better than the fastest C implementations out there.
Nonetheless, performance of each primitive is compared between HACL* and the NSS to make sure not to degrade performance.
For every primitive I looked at so far the performance of HACL* was at least as good as the performance of the NSS code.&lt;/p>
&lt;h2 id="code-quality">Code quality
&lt;/h2>&lt;p>Code quality was, as with any generated code, a big concern.
How readable is the generated code? Can it easily be changed if the need arises?
The first versions we looked at weren&amp;rsquo;t that great &amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/shipping-some-hacl/hacl-review.png"
width="1983"
height="747"
srcset="https://www.franziskuskiefer.de/p/shipping-some-hacl/hacl-review_hu_dc7cc53ebaebad91.png 480w, https://www.franziskuskiefer.de/p/shipping-some-hacl/hacl-review_hu_9b604c9cc957aac.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="637px"
>
&lt;img src="https://www.franziskuskiefer.de/p/shipping-some-hacl/ugly-hacl.png"
width="755"
height="147"
srcset="https://www.franziskuskiefer.de/p/shipping-some-hacl/ugly-hacl_hu_a335ff08fbc7a63a.png 480w, https://www.franziskuskiefer.de/p/shipping-some-hacl/ugly-hacl_hu_67d61d8e2d1f243c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="513"
data-flex-basis="1232px"
>&lt;/p>
&lt;p>But after a couple improvements to kremlin the code was good to go.
While every new piece of code that&amp;rsquo;s being integrated has to pass code review the C code produced by kremlin is good enough now to land new primitives without having to improve upstream code first.
Note however that code passes review here that wouldn&amp;rsquo;t pass if it were hand-written.
The code generator is not perfect.
We have to live with some rough edges.
The most important point is that the code is understandable.&lt;/p>
&lt;p>NSS if formatted with &lt;code>clang-format&lt;/code>, which is checked on CI.
So the only change to the verified C code imported from HACL* is formatting.&lt;/p>
&lt;h3 id="some-pain-points-remain">Some pain points remain
&lt;/h3>&lt;p>There are some outstanding issues that I hope get fixed in kremlin and would improve code quality significantly.
Kremlin doesn&amp;rsquo;t know &lt;code>const&lt;/code>, which is one of the few nice helpers one can use in C to control what&amp;rsquo;s happening to your pointer.
While &lt;code>const&lt;/code> is not necessary because of the HACL* proofs, it would be nice to have.
Kremlin further generates unnecessary casts such as &lt;code>(uint32_t)4U&lt;/code>.
This is not a big deal but makes code harder to read.
There&amp;rsquo;s also a big number of temporary variables that aren&amp;rsquo;t necessary and make the code harder to read.&lt;/p>
&lt;h2 id="platform-support">Platform support
&lt;/h2>&lt;p>Being a researchy library HACL* is not tested on a big variety of platforms.
NSS on the other hand has to run on most available platforms as well as a number of legacy platforms.
While the NSS CI covers Windows, Linux, and Mac in different configurations such as Intel 32-bit, 64-bit, and aarch64, there are other platforms such as BSD using NSS that are not covered.
As expected we ran into a couple issues on some platforms such as BSD and Solaris but they were quickly resolved.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-bsd-hacl-bug.png"
width="2048"
height="184"
srcset="https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-bsd-hacl-bug_hu_22de423f74418db3.png 480w, https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-bsd-hacl-bug_hu_fe22262a6f4debb0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1113"
data-flex-basis="2671px"
>&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-solaris-hacl-bug.png"
width="2048"
height="184"
srcset="https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-solaris-hacl-bug_hu_880cd95fb94c19bd.png 480w, https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-solaris-hacl-bug_hu_3d611ef34f96cbd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1113"
data-flex-basis="2671px"
>&lt;/p>
&lt;p>Especially code that is hardware dependent such as Intel intrinsics needs extra attention.
The &lt;a class="link" href="https://github.com/mitls/hacl-star/blob/master/snapshots/kremlib/vec128.h" target="_blank" rel="noopener"
>&lt;code>vec128.h&lt;/code>&lt;/a> header used by HACL* to abstract hardware instructions needed a couple iterations before it worked on all supported platforms.&lt;/p>
&lt;h2 id="handling-change">Handling change
&lt;/h2>&lt;p>The code imported from HACL* into NSS is not expected to change a lot.
But there are always reasons why the code has to get updated and a process is required to do so.
To fix issues like broken platforms, changes to the upstream projects have to be landed and the snapshot in NSS has to get updated to the new upstream version.
For this process to run smoothly it&amp;rsquo;s necessary for both teams to work together.&lt;/p>
&lt;p>Updating the HACL* code in NSS is pretty easy.
First the new code is generated with a new version of HACL*, formatted, and copied to NSS.
Then the docker image running the CI gets updated.
Here&amp;rsquo;s a diff for a recent update.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-hacl-patch.png"
width="2922"
height="1264"
srcset="https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-hacl-patch_hu_cd3aa9c5c2b53aa9.png 480w, https://www.franziskuskiefer.de/p/shipping-some-hacl/nss-hacl-patch_hu_7a01cd98eb0314ff.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="554px"
>&lt;/p>
&lt;h2 id="running-the-verification-in-nss">Running the verification in NSS
&lt;/h2>&lt;p>To make sure that whatever we use in NSS actually verifies and the generated code isn&amp;rsquo;t changed manually, the NSS CI has to verify the HACL* snapshot it uses on every run.
NSS uses &lt;a class="link" href="https://github.com/taskcluster" target="_blank" rel="noopener"
>taskcluster&lt;/a> as CI, which allows us to use a &lt;a class="link" href="https://searchfox.org/nss/source/automation/taskcluster/docker-hacl" target="_blank" rel="noopener"
>docker image&lt;/a> that re-verifies the used HACL* revision on every push.
Checking the code in NSS is then a simple diff.&lt;/p>
&lt;h1 id="lessons-learned">Lessons learned
&lt;/h1>&lt;p>The first lesson is that it&amp;rsquo;s possible to ship formally verified software.
The code is relatively simple and self-contained, which makes this easier.
But it shows that formal verification tools are good enough to be used in production.&lt;/p>
&lt;p>The second lesson we learned is probably the more valuable one.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Talk to each other and work together.&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>From an engineering standpoint it might be frightening to start looking at formal verification tools and corresponding languages.
But people working with these tools are happy to help out if that means more people are using their tools.
It will need some effort getting used to the tools and languages but it&amp;rsquo;s well worth it.&lt;/p>
&lt;p>For people working on formal methods; You might have to learn a little more than you wanted to know about differences between different platforms and compilers and how to ship software.
But that might be worth the effort if it means your proofs are used in production software that&amp;rsquo;s used by millions of people.&lt;/p>
&lt;hr>
&lt;p>Looking for more material on this?
There&amp;rsquo;s a high-level &lt;a class="link" href="https://blog.mozilla.org/security/2017/09/13/verified-cryptography-firefox-57/" target="_blank" rel="noopener"
>blog post&lt;/a> that talks about the formal verification work in NSS happening at Mozilla.
There has also been a talk at RWC 2018 earlier this year on this work (&lt;a class="link" href="https://rwc.iacr.org/2018/Slides/Beurdouche.pdf" target="_blank" rel="noopener"
>slides&lt;/a>, &lt;a class="link" href="https://www.youtube.com/watch?v=xrZTVRICpSs" target="_blank" rel="noopener"
>video&lt;/a>).&lt;/p></description></item><item><title>The HACL* approach</title><link>https://www.franziskuskiefer.de/p/the-hacl-approach/</link><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/the-hacl-approach/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/the-hacl-approach/hacl-chart.png" alt="Featured image of post The HACL* approach" />&lt;p>HACL* (High-Assurance Cryptographic Library) is a formally verified cryptographic library in &lt;a class="link" href="https://www.fstar-lang.org/" target="_blank" rel="noopener"
>F*&lt;/a>, developed by the &lt;a class="link" href="http://prosecco.inria.fr/" target="_blank" rel="noopener"
>Prosecco team&lt;/a> at &lt;a class="link" href="https://www.inria.fr/en/centre/paris" target="_blank" rel="noopener"
>INRIA Paris&lt;/a> in collaboration with Microsoft Research, as part of &lt;a class="link" href="https://github.com/project-everest" target="_blank" rel="noopener"
>Project Everest&lt;/a>.
HACL* was inspired by discussions at the &lt;a class="link" href="https://hacs-workshop.github.io/" target="_blank" rel="noopener"
>HACS workshop&lt;/a> and aims at developing a set of reference implementations in C for common cryptographic primitives.&lt;/p>
&lt;p>This is the first post in a series describing formal verification in NSS as an approach to improve confidence in highly complex, highly security critical code.
In this first post I describe the most important ideas and concepts of HACL*, the basis of most formally verified code in NSS.
If you want to have all the juicy details about HACL*, I recommend reading the &lt;a class="link" href="https://github.com/mitls/hacl-star/blob/master/doc/papers/hacl-star-ccs2017.pdf" target="_blank" rel="noopener"
>CCS'17 paper&lt;/a>.&lt;/p>
&lt;h1 id="hacl">HACL*
&lt;/h1>&lt;p>HACL*, though written in F*, can be compiled to C code with guaranteed memory safety, secret independent computation, and functional correctness with respect to some mathematical specification.
Let&amp;rsquo;s first have a look at the high-level idea of HACL* on the example of Curve25519.&lt;/p>
&lt;p>The first step is to take the specification (&lt;a class="link" href="https://tools.ietf.org/html/rfc7748" target="_blank" rel="noopener"
>RFC 7748&lt;/a> in this case) and translate it into a high level F* specification.
This specification is easy to read and can be checked for correctness against the RFC easily.
All correctness guarantees HACL* gives for the generated C code are based on this specification, i.e. the C code is proven to be functionally equivalent to the the high level specification.
Here the definition of the Montgomery ladder, an excerpt from the &lt;a class="link" href="https://github.com/mitls/hacl-star/blob/dev_specs/specs/Spec.Curve25519.fst" target="_blank" rel="noopener"
>Curve25519 specification&lt;/a>. (Apologies for the highlighting, no F* support.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ocaml" data-lang="ocaml">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="k">rec&lt;/span> &lt;span class="n">montgomery_ladder_&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">elem&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">xp1&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">scalar&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ctr&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">nat&lt;/span>&lt;span class="o">{&lt;/span>&lt;span class="n">ctr&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">256&lt;/span>&lt;span class="o">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="nc">Tot&lt;/span> &lt;span class="n">proj_point&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">decreases&lt;/span> &lt;span class="n">ctr&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">ctr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">ctr&amp;#39;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctr&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">xp1&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">uint_to_nat&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ith_bit&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="n">ctr&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">nqp2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nqp1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add_and_double&lt;/span> &lt;span class="n">init&lt;/span> &lt;span class="n">xp1&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="n">nqp1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nqp2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="o">)&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">add_and_double&lt;/span> &lt;span class="n">init&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">xp1&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">montgomery_ladder_&lt;/span> &lt;span class="n">init&lt;/span> &lt;span class="n">x&amp;#39;&lt;/span> &lt;span class="n">xp1&amp;#39;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="n">ctr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="o">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Running the reference implementation is possible but obviously slow (it is executed in OCaml).
However a subset of F* (called Low*) can be translated to C using &lt;a class="link" href="https://github.com/FStarLang/kremlin" target="_blank" rel="noopener"
>Kremlin&lt;/a>.
While the specification might be valid Low* code it is not optimised and thus won&amp;rsquo;t yield fast C code.
In order to generate fast C code more efficient Low* code has to be written first.
Looking at state of the art C code for the given algorithm (&lt;a class="link" href="https://github.com/jedisct1/libsodium/blob/e878bc141be12820dc6dbcd7a97bf50070bc1e2a/src/libsodium/crypto_scalarmult/curve25519/donna_c64/curve25519_donna_c64.c" target="_blank" rel="noopener"
>Curve25519 Donna&lt;/a> for example) Low* code can be written that resembles the fast C code and can be extracted via Kremlin to similarly looking C code.&lt;/p>
&lt;p>At this point the main benefit of the HACL* approach comes to light.
The optimised Low* code (as well as the extracted C code) are hard to get right and even harder to review for correctness, memory safety, and secret independent execution.
Using an SMT solver (&lt;a class="link" href="https://github.com/Z3Prover/z3" target="_blank" rel="noopener"
>Z3&lt;/a> is used in HACL*) and F*&amp;rsquo;s strong type system, functional equivalence is proven between the high-level F* specification and the optimised Low* code.
The Low* code usually has to be enhanced with additional information to help prove the equivalence.
This additional code however is ignored by Kremlin and doesn&amp;rsquo;t get translated to C.&lt;/p>
&lt;p>The following graphic gives an overview of the HACL* process.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/the-hacl-approach/hacl-chart.png"
width="842"
height="595"
srcset="https://www.franziskuskiefer.de/p/the-hacl-approach/hacl-chart_hu_9683bf7354fc0b1e.png 480w, https://www.franziskuskiefer.de/p/the-hacl-approach/hacl-chart_hu_7cbcf00e30c5a9f0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;h2 id="an-example---conditional-swap">An Example - Conditional Swap
&lt;/h2>&lt;p>HACL* is a pretty complex library and it might be hard to understand what&amp;rsquo;s going on.
Therefore I&amp;rsquo;ll give a small example of the basic concepts behind HACL* focusing on functional correctness.&lt;/p>
&lt;p>Conditional swaps are used for example in Curve25519 implementations to swap two variables &lt;code>a&lt;/code> and &lt;code>b&lt;/code> if a certain condition is given, &lt;code>c = 0&lt;/code> here.
In F* this can be written as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ocaml" data-lang="ocaml">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="n">cswap&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">uint32&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">uint32&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">uint32&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nc">Tot&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">uint32&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">uint32&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">cswap&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0ul&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This code can be easily inspected for correctness and is used as specification.
However, this is not the code we want to have as it branches on potentially secret data in &lt;code>c&lt;/code>.
Instead of checking &lt;code>c&lt;/code> for &lt;code>0&lt;/code> we should use masking and logical operations to achieve the variable swapping.
Note that we require &lt;code>c&lt;/code> to be either all &lt;code>1&lt;/code> or all &lt;code>0&lt;/code> now.
This can be easily computed from the single bit &lt;code>c&lt;/code> we had in the previous example.
This looks as follows in pseudo-C-code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">cswap_constant_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">mask&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">mask&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The same code in F* (with slightly different input/output behaviour) looks as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ocaml" data-lang="ocaml">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="n">cswap_constant_time&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">uint32&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">uint32&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">uint32&lt;/span>&lt;span class="o">{&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0xFFFFFFFFul&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0ul&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nc">Tot&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">uint32&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">uint32&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">cswap_constant_time&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">^^&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;^&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">^^&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="k">let&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">^^&lt;/span> &lt;span class="n">mask&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This code is not trivially correct anymore and requires considerable thought by both author and reviewer.
But instead of staring at the code to understand it or writing incomplete tests we can use F* now to prove that &lt;code>cswap_constant_time&lt;/code> is equivalent to our spec, i.e. &lt;code>cswap&lt;/code>.
To this end we write a lemma to ensures that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ocaml" data-lang="ocaml">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cswap_constant_time&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cswap&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="err">\&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>While this can&amp;rsquo;t be proven immediately it is relatively easy to write some helper lemmata that help F* and Z3 to understand the correctness of this statement.
The C code extracted by Kremlin from the F* code above then looks as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">fst&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">snd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="n">K___uint32_t_uint32_t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">&lt;span class="n">K___uint32_t_uint32_t&lt;/span> &lt;span class="nf">Impl_CSwap_cswap_constant_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">K___uint32_t_uint32_t&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">fst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">snd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">9&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Check out the &lt;a class="link" href="https://github.com/franziskuskiefer/the-hacl-approach" target="_blank" rel="noopener"
>repository&lt;/a> for the full source code of the example.&lt;/p>
&lt;p>Memory safety can be proven easily as well by specifying liveliness conditions of buffers.
In this example we don&amp;rsquo;t have buffers so no need for verifying memory safety.
We skip proving secret-independent execution here as it requires additional support from HACL*.&lt;/p>
&lt;h1 id="code-generation-vs-code-verification">Code Generation vs Code Verification
&lt;/h1>&lt;p>The HACL* approach as described above is a great way of generating fast C code that&amp;rsquo;s proven to be correct, memory safe, and have secret-independent runtime.
For &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS" target="_blank" rel="noopener"
>NSS&lt;/a> we decided to use code generation and integrate code from HACL* into the code base.
However, instead of generating code it would also be possible to verify existing C code with other tools such as Cryptol/SAW to prove similar properties of the code.&lt;/p>
&lt;p>The main advantage of code generation is that the mathematical specifications can be easily used to build more complex algorithms and protocols on top and allow for re-use of specification code.
The trusted code base written in F* is therefore very small.&lt;/p>
&lt;p>The main drawback of generating code is a relatively large third-party code base that has to be trusted in order to generate the code.
The weakest link in the case of HACL* is probably Kremlin, which has a &lt;a class="link" href="https://www.microsoft.com/en-us/research/wp-content/uploads/2017/05/icfp17main-main96-p-5064b17-32755-submitted.pdf" target="_blank" rel="noopener"
>hand written proof&lt;/a> but is a relatively young piece of code that probably contains bugs.&lt;/p>
&lt;p>There is no optimal solution to this problem that works for everyone but the HACL* approach as described in this post is a great way to get better confidence in correctness and security of complex C code using formal verification.&lt;/p>
&lt;p>In the next post I&amp;rsquo;ll talk about challenges we faced when integrating code from HACL* into NSS and how we solved them.&lt;/p></description></item><item><title>Introducing HacSpec</title><link>https://www.franziskuskiefer.de/p/introducing-hacspec/</link><pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/introducing-hacspec/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/introducing-hacspec/hero.png" alt="Featured image of post Introducing HacSpec" />&lt;p>HacSpec is a proposal for a new specification language for cryptographic primitives that is succinct, that is easy to read and implement, and that lends itself to formal verification.
It aims to formalise the pseudocode used in cryptographic standards by proposing a formal syntax that can be checked for simple errors.
HacSpec specifications are further executable to test against test vectors specified in a common syntax.&lt;/p>
&lt;p>The main focus of HacSpec is to allow specifications to be compiled to formal languages such as cryptol, coq, F*, and easycrypt and thus make it easier to formally verify implementations.
This allows a specification using HacSpec to be the basis not only for implementations but also for formal proofs of functional correctness, cryptographic security, and side-channel resistance.&lt;/p>
&lt;p>The idea of having a language like HacSpec stems from discussions at the recent HACS workshop in Zurich.
The &lt;a class="link" href="https://hacs-workshop.github.io/" target="_blank" rel="noopener"
>High-Assurance-Cryptographic-Software workshop (HACS)&lt;/a> is an invite-only workshop co-located with the &lt;a class="link" href="https://rwc.iacr.org/" target="_blank" rel="noopener"
>Real World Crypto&lt;/a> symposium.&lt;/p>
&lt;p>Anyone interested in moving this project forward should subscribe to the &lt;a class="link" href="https://moderncrypto.org/mail-archive/hacspec/" target="_blank" rel="noopener"
>mailing list&lt;/a> or file issues and pull requests against the &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/" target="_blank" rel="noopener"
>Github repository&lt;/a>.&lt;/p>
&lt;h2 id="how-far-are-we">How far are we?
&lt;/h2>&lt;p>We discussed and hacked at HACS a month ago and improved a little over the last weeks.
The current state can be found at &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/" target="_blank" rel="noopener"
>Github repository&lt;/a>.&lt;/p>
&lt;h3 id="the-language">The language
&lt;/h3>&lt;p>There are &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/specs" target="_blank" rel="noopener"
>examples&lt;/a> written in what we believe could be the HacSpec.
The language is valid Python 3.6 using PEP484 and PEP526 for typing.
It further uses comments (similar to PEP484 types) to define lengths and ranges.&lt;/p>
&lt;p>There are also &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/specs/hacspec-rust" target="_blank" rel="noopener"
>experiments using Rust&lt;/a> as basis for HacSpec.
While Rust&amp;rsquo;s type system makes it a compelling candidate, limitations in handling integers of arbitrary size means we probably won&amp;rsquo;t be basing HacSpec on Rust.&lt;/p>
&lt;p>The &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/blob/master/LANGUAGE.md" target="_blank" rel="noopener"
>language specification&lt;/a> is currently vague and not fully formalised yet.
It lives in a markdown document but will move to an RFC layout later.&lt;/p>
&lt;h3 id="formal-specifications">Formal specifications
&lt;/h3>&lt;p>To show how cryptographic primitives are modelled in formal languages we added a number of &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/formal-models" target="_blank" rel="noopener"
>specifications&lt;/a> in different languages such as cryptol, coq, F*, and easycrypt to the repository.&lt;/p>
&lt;h3 id="spec-checker">Spec checker
&lt;/h3>&lt;p>In order to verify whether a specification is a valid HacSpec Aaron started to implement a &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/spec-checker" target="_blank" rel="noopener"
>spec-checker&lt;/a>.
Basing HacSpec on another language like Python means that not all valid Python programs are valid HacSpec programs.
The spec checker is supposed to tell authors whether a given python program is a valid HacSpec.&lt;/p>
&lt;h3 id="compilers">Compilers
&lt;/h3>&lt;p>There&amp;rsquo;s currently a very basic &lt;a class="link" href="https://github.com/HACS-workshop/hacspec/tree/master/spec-compilers" target="_blank" rel="noopener"
>HacSpec to F* compiler&lt;/a> from Karthik.
Eventually we would like to have compilers from HacSpec to all common formal languages such as cryptol, coq, F*, and easycrypt.&lt;/p>
&lt;h2 id="call-for-participation">Call for participation
&lt;/h2>&lt;p>We invite contributions in the following areas.&lt;/p>
&lt;ul>
&lt;li>We invite people to submit “standalone&amp;quot; formal specs for inclusion in the formal-models directory.&lt;/li>
&lt;li>We invite formal methods people to build compilers from HacSpec to their favourite modelling language.&lt;/li>
&lt;li>We invite spec authors and developers to comment on HacSpec and provide examples of what they consider good crypto specs or beautiful “obviously correct” crypto implementations.&lt;/li>
&lt;li>We invite developers to build compilers from HacSpec to their favourite programming language.&lt;/li>
&lt;/ul>
&lt;h2 id="what-hacspec-is-not-about">What HacSpec is not about
&lt;/h2>&lt;p>HacSpec does &lt;em>not&lt;/em> aim to be general enough to express protocols at this point. While this might be a target in the future the first iteration of HacSpec is only targeting crypto primitives.&lt;/p>
&lt;h2 id="links">Links
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/HACS-workshop/hacspec/" target="_blank" rel="noopener"
>Github repository&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://moderncrypto.org/mail-archive/hacspec/" target="_blank" rel="noopener"
>Mailing list&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CVE-2017-5462 - A PRNG issue</title><link>https://www.franziskuskiefer.de/p/cve-2017-5462-a-prng-issue/</link><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/cve-2017-5462-a-prng-issue/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/cve-2017-5462-a-prng-issue/hero.jpg" alt="Featured image of post CVE-2017-5462 - A PRNG issue" />&lt;p>On April 19, 2017, Mozilla Foundation published the &lt;a class="link" href="https://www.mozilla.org/en-US/security/advisories/mfsa2017-10/%5c#CVE-2017-5462" target="_blank" rel="noopener"
>Security Advisory 2017-10&lt;/a> outlining several recently fixed security vulnerabilities.
One of these vulnerabilities, tracked as CVE-2017-5462, affects the Pseudo-Random Number Generator (PRNG) within the Network Security Services (NSS) library prior to version 3.29.5 and Firefox prior to version 53.&lt;/p>
&lt;p>This post describes the bug and how it was discovered.&lt;/p>
&lt;h1 id="inside-the-nss-prng">Inside the NSS PRNG
&lt;/h1>&lt;p>NSS uses &lt;code>Hash_DRBG&lt;/code> as PRNG, which is one of several PRNG schemes defined in the &lt;a class="link" href="http://csrc.nist.gov/publications/nistpubs/" target="_blank" rel="noopener"
>NIST Special Publication 800-90&lt;/a>.
Like most widely used PRNGs the &lt;code>Hash_DRBG&lt;/code> is a Deterministic Random Bit Generator (DRBG). (Even though this term is usually only used for NIST PRNGs.)
While the standard contains all the details, the relevant features can be summarised as follows.&lt;/p>
&lt;p>The state of &lt;code>Hash_DRBG&lt;/code> is composed of three values:&lt;/p>
&lt;ul>
&lt;li>A 55-byte integer state variable &lt;code>V&lt;/code>, which is updated with each
request of new bits&lt;/li>
&lt;li>A 55-byte integer constant &lt;code>C&lt;/code> that depends on the seed and is updated when re-seeding the PRNG.&lt;/li>
&lt;li>A counter &lt;code>c&lt;/code> tracking when the next re-seeding is needed.&lt;/li>
&lt;/ul>
&lt;p>To generate random bits, &lt;code>Hash_DRBG&lt;/code> concatenates &lt;code>H(V) || H(V+1) || H(V+2) || ...&lt;/code> until enough bits are generated.
&lt;code>H&lt;/code> denotes a cryptographic hash function here.
NSS uses the SHA-256 hash function for &lt;code>H&lt;/code> with a digest length of 32 bytes.
After generating new bits the state variable &lt;code>V&lt;/code> is updated according to the rule &lt;code>V&lt;/code>&lt;sub>&lt;code>c+1&lt;/code>&lt;/sub> &lt;code> = V + H(0x03 || V&lt;/code>&lt;sub>&lt;code>c&lt;/code>&lt;/sub> &lt;code>) + C + c&lt;/code> and counter &lt;code>c&lt;/code> is incremented by one.
Addition is performed modulo &lt;code>2&lt;/code>&lt;sup>&lt;code>440&lt;/code>&lt;/sup> &lt;code> = 2&lt;/code>&lt;sup>&lt;code>8*55&lt;/code>&lt;/sup> to fit it in the 55 bytes of &lt;code>V&lt;/code>.&lt;/p>
&lt;p>The PRNG implementation can be found in the file &lt;a class="link" href="https://searchfox.org/nss/rev/fcdcad1fc1ddb6e70653637b0ea0f3359b8533f2/lib/freebl/drbg.c" target="_blank" rel="noopener"
>drbg.c&lt;/a> within the NSS codebase.&lt;/p>
&lt;h1 id="cve-2017-5462">CVE-2017-5462
&lt;/h1>&lt;p>The issue identified in CVE-2017-5462 is in the code implementing the addition.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * build some fast inline functions for adding.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PRNG_ADD_CARRY_ONLY(dest, start, carry) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> { \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> int k1; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> for (k1 = start; carry &amp;amp;&amp;amp; k1 &amp;gt;= 0; k1--) { \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> carry = !(++dest[k1]); \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> } \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * NOTE: dest must be an array for the following to work.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PRNG_ADD_BITS(dest, dest_len, add, len, carry) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> carry = 0; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> PORT_Assert((dest_len) &amp;gt;= (len)); \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> { \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> int k1, k2; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> for (k1 = dest_len - 1, k2 = len - 1; k2 &amp;gt;= 0; --k1, --k2) { \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> carry += dest[k1] + add[k2]; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> dest[k1] = (PRUint8)carry; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> carry &amp;gt;&amp;gt;= 8; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> } \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PRNG_ADD_BITS_AND_CARRY(dest, dest_len, add, len, carry) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> PRNG_ADD_BITS(dest, dest_len, add, len, carry) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> PRNG_ADD_CARRY_ONLY(dest, dest_len - len, carry)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the PRNG performs addition to update &lt;code>V&lt;/code> it uses the macro &lt;code>PRNG_ADD_BITS_AND_CARRY&lt;/code>, which first delegates to the macro &lt;code>PRNG_ADD_BITS&lt;/code> to add the two summands without considering the final carry and then the macro &lt;code>PRNG_ADD_CARRY_ONLY&lt;/code> to add the carry.&lt;/p>
&lt;p>In this addition code it is clear that the carry should be added at the position &lt;em>preceding&lt;/em> the original most-significant-byte of the shorter of the two summands.
This fact was supposed to be represented by the index &lt;code>dest_len-len&lt;/code> supplied as parameter to &lt;code>PRNG_ADD_CARRY_ONLY&lt;/code>.
Note that numbers are represented as sequences of bytes with byte number zero being the most-significant byte.
The essence of the bug is that &lt;code>dest_len-len&lt;/code> does not point to the correct position of the carry, which should have been added at position &lt;code>dest_len-len-1&lt;/code> instead.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/cve-2017-5462-a-prng-issue/CVE-2017-5462-bug.png"
width="822"
height="302"
srcset="https://www.franziskuskiefer.de/p/cve-2017-5462-a-prng-issue/CVE-2017-5462-bug_hu_e8b8cedd1aa54041.png 480w, https://www.franziskuskiefer.de/p/cve-2017-5462-a-prng-issue/CVE-2017-5462-bug_hu_85a39c5e97dacc3c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="653px"
>&lt;/p>
&lt;h2 id="example">Example
&lt;/h2>&lt;p>We note that &lt;code>3 * 0x40 = 0xc0&lt;/code> under both proper and broken addition (the latter due to absence of carrying in this example).
However, &lt;code>3 * 0x95 = 0x01bf&lt;/code> under proper unbounded addition resp. &lt;code>0xbf&lt;/code> under proper modulo addition.
Yet, the result under broken addition is &lt;code>0x01 + 0xbf = 0xc0&lt;/code>.&lt;/p>
&lt;h1 id="finding-the-bug-with-testing">Finding the Bug with Testing
&lt;/h1>&lt;p>The easiest way to find most types of bugs in PRNGs following NIST SP 800-90 is by testing the implementation with the official test vectors (seeds and outputs) provided in the standard.
I found the bug after implementing these test vectors.
Functional unit testing would probably have caught this particular bug as well.
For PRNGs not following the NIST standard, defining corresponding test vectors is a good idea to avoid regressions during maintenance.&lt;/p>
&lt;p>Statistical tests such as NIST SP 800-22 or &lt;a class="link" href="https://github.com/ticki/diehardest" target="_blank" rel="noopener"
>DIEHARDEST&lt;/a> are not very useful for testing cryptographic PRNGs.
They can be used for testing the entropy pool that is fed into the PRNG.
But such tests will not fail as long as the internal state does not stay constant and output passes through a cryptographic primitive (such as SHA-256) before reaching the consumer.&lt;/p>
&lt;h1 id="formal-analysis">Formal Analysis
&lt;/h1>&lt;p>Independ of my investigation, &lt;a class="link" href="https://formal.iti.kit.edu/klebanov/" target="_blank" rel="noopener"
>Vladimir Klebanov&lt;/a> found this bug using &lt;a class="link" href="https://formal.iti.kit.edu/~klebanov/software/entroposcope/" target="_blank" rel="noopener"
>Entroposcope&lt;/a>, a static analysis tool created for finding implementation bugs in pseudo-random number generators.&lt;/p>
&lt;p>Entropy loss occurs when the number of possible output streams is less than the number of possible seeds.
This is equivalent to the case when two different seeds produce the same output stream (also called a collision).
Entroposcope is built on top of the bounded model checker &lt;a class="link" href="https://link.springer.com/chapter/10.1007/978-3-642-54862-8_26" target="_blank" rel="noopener"
>CBMC&lt;/a>, which in turn transforms the problem into a challenge for a &lt;a class="link" href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem" target="_blank" rel="noopener"
>SAT solver&lt;/a>.&lt;/p>
&lt;p>Considering the &lt;code>Hash_DRBG&lt;/code>, the question whether &lt;code>V&lt;/code>&lt;sub>&lt;code>c+1&lt;/code>&lt;/sub> &lt;code> = V + H(0x03 || V&lt;/code>&lt;sub>&lt;code>c&lt;/code>&lt;/sub> &lt;code>) + C + c&lt;/code> produces a collision and the DRBG loses entropy or not boils down to whether distinct 55-byte values &lt;code>x&lt;/code>&lt;sub>&lt;code>1&lt;/code>&lt;/sub>, &lt;code>x&lt;/code>&lt;sub>&lt;code>2&lt;/code>&lt;/sub> exist, such that &lt;code>x&lt;/code>&lt;sub>&lt;code>1&lt;/code>&lt;/sub> &lt;code> + H(x&lt;/code>&lt;sub>&lt;code>1&lt;/code>&lt;/sub>&lt;code>) = x&lt;/code>&lt;sub>&lt;code>2&lt;/code>&lt;/sub> &lt;code> + H(x&lt;/code>&lt;sub>&lt;code>2&lt;/code>&lt;/sub>&lt;code>)&lt;/code>.
Now, it is clear that this question cannot be answered without either knowing the output of &lt;code>H&lt;/code> for each 55-byte input (which is infeasible) or some (unknown to us and certainly also to the tool) nontrivial mathematical argument on the nature of &lt;code>H&lt;/code> in this context.
In this regard, the &lt;code>Hash_DRBG&lt;/code> differs from many other PRNGs that employ significantly simpler operations on the output of &lt;code>H&lt;/code> before it makes its way to the PRNG caller.&lt;/p>
&lt;p>As a consequence of this design, Entroposcope can not be used to prove absence of entropy loss in the &lt;code>Hash_DRBG&lt;/code>.
Nonetheless, Entroposcope can check collision-freedom of the PRNG under an idealised &lt;code>H&lt;/code> and find bugs in the parts of the implementation that are not &lt;code>H&lt;/code>.
For this purpose we consider an idealised PRNG with &lt;code>H(b||V) = V&lt;/code> and &lt;code>C = V&lt;/code>&lt;sub>&lt;code>0&lt;/code>&lt;/sub>.
This is the same kind of idealisation that helped Vladimir to uncover previously unknown bugs in OpenSSL and &lt;a class="link" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6313" target="_blank" rel="noopener"
>GnuPG&lt;/a>.
With the idealisation, on the first iteration (&lt;code>c = 0&lt;/code>) updating the state becomes &lt;code>V&lt;/code>&lt;sub>&lt;code>1&lt;/code>&lt;/sub> &lt;code> = 3 * V&lt;/code>&lt;sub>&lt;code>0&lt;/code>&lt;/sub>.
Because &lt;code>3&lt;/code> and &lt;code>2&lt;/code>&lt;sup>&lt;code>440&lt;/code>&lt;/sup> are co-prime, &lt;code>V&lt;/code>&lt;sub>&lt;code>1&lt;/code>&lt;/sub> will not produce a collision if implemented properly.&lt;/p>
&lt;p>Indeed, given the idealised code, Entroposcope produced a counterexample to entropy preservation with two concrete seeds leading to the same output stream.
Tracing these two executions makes it easy to pinpoint the cause of the collision in the addition code.&lt;/p>
&lt;p>Thanks to Vladimir for finding this bug and helping to write this post.&lt;/p></description></item><item><title>New Website</title><link>https://www.franziskuskiefer.de/p/new-website/</link><pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/new-website/</guid><description>&lt;p>After a couple of years using &lt;a class="link" href="https://ghost.org" target="_blank" rel="noopener"
>ghost&lt;/a> I switched to the static page generator &lt;a class="link" href="https://gohugo.io/" target="_blank" rel="noopener"
>hugo&lt;/a>.
Hugo is easy to write and easy to publish.
But more importantly it doesn&amp;rsquo;t offer the attack surface ghost does and doesn&amp;rsquo;t require external ressources like ghost does.
It further decreases the amount of ressources used on the server.&lt;/p></description></item><item><title>Aes Gcm Speedup</title><link>https://www.franziskuskiefer.de/p/aes-gcm-speedup/</link><pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/aes-gcm-speedup/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/aes-gcm-speedup/linux64-encrypt.png" alt="Featured image of post Aes Gcm Speedup" />&lt;p>AES-GCM is a NIST standardised authenticated encryption algorithm (FIPS 800-38D). Since its standardisation in 2008 its usage increased to a point where it is the prevalent encryption used with TLS. With 85% it is by far the &lt;a class="link" href="https://telemetry.mozilla.org/new-pipeline/dist.html#!cumulative=0&amp;amp;end_date=2017-05-24&amp;amp;keys=__none__!__none__!__none__&amp;amp;max_channel_version=release%252F53&amp;amp;measure=SSL_SYMMETRIC_CIPHER_FULL&amp;amp;min_channel_version=null&amp;amp;processType=*&amp;amp;product=Firefox&amp;amp;sanitize=1&amp;amp;sort_keys=submissions&amp;amp;start_date=2017-04-13&amp;amp;table=0&amp;amp;trim=1&amp;amp;use_submission_date=0" target="_blank" rel="noopener"
>most widely used cipher&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/aes-gcm-speedup/Screenshot-from-2017-06-14-10-09-27.png"
width="2136"
height="996"
srcset="https://www.franziskuskiefer.de/p/aes-gcm-speedup/Screenshot-from-2017-06-14-10-09-27_hu_a00db76a02ce7800.png 480w, https://www.franziskuskiefer.de/p/aes-gcm-speedup/Screenshot-from-2017-06-14-10-09-27_hu_9d629983117762ba.png 1024w"
loading="lazy"
alt="Firefox 53 TLS cipher telemetry"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="514px"
>&lt;/p>
&lt;p>Unfortunately the AES-GCM implementation used in Firefox (provided by NSS) does not take advantage of full hardware acceleration; it uses a slower software-only implementation on Mac, Linux 32-bit, or any device that doesn&amp;rsquo;t have the &lt;a class="link" href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions" target="_blank" rel="noopener"
>AVX&lt;/a>, &lt;a class="link" href="https://en.wikipedia.org/wiki/CLMUL_instruction_set" target="_blank" rel="noopener"
>PCLMUL&lt;/a>, and &lt;a class="link" href="https://en.wikipedia.org/wiki/AES_instruction_set" target="_blank" rel="noopener"
>AES-NI&lt;/a> hardware instructions. Looking at these numbers about only 30% of Firefox users get full hardware acceleration.&lt;/p>
&lt;p>Before jumping on the obvious issue of Firefox’s AES-GCM code being comparatively slow – as well as not being resistant to &lt;a class="link" href="https://en.wikipedia.org/wiki/Side-channel_attack" target="_blank" rel="noopener"
>side channel analysis&lt;/a> – I wanted to see what the actual impact on Firefox users is. Downloading a file on a mid-2015 MacBook Pro Retina with Firefox incurs CPU usage of 50% with 17% of Firefox&amp;rsquo;s CPU usage is in &lt;code>ssl3_AESGCM&lt;/code>. In comparison, Chrome only creates 15% CPU usage with the same download. On a Windows laptop with an AMD C-70 (no AES-NI) Firefox CPU usage is 60% and the download speed is capped at 3.5MB/s. Chrome on the same machine needs 50% of the CPU and downloads with 10MB/s. This doesn&amp;rsquo;t seem to be only an academic issue: Particularly for battery-operated devices, the energy consumption difference would be noticeable.&lt;/p>
&lt;h1 id="improving-gcm-performance">Improving GCM performance
&lt;/h1>&lt;p>Speeding up the GCM multiplication function is the first obvious step to improve AES-GCM performance. A &lt;a class="link" href="https://bugzilla.mozilla.org/show_bug.cgi?id=868948" target="_blank" rel="noopener"
>bug&lt;/a> was opened on integration of the original AES-GCM code to provide an alternative to the textbook implementation of &lt;code>gcm_HashMult&lt;/code>. This code is not only slow but has timing side channels. Here an excerpt from the &lt;a class="link" href="https://searchfox.org/mozilla-central/rev/d67ef71097da4d1aa344c9d9c672e49a7228e765/security/nss/lib/freebl/mpi/mp_gf2m.c#337" target="_blank" rel="noopener"
>binary multiplication&lt;/a> algorithm.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">ib&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">b_used&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">ib&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b_i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pb&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Inner product: Digits of a */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b_i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_bmul_d_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MP_DIGITS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">a_used&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b_i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MP_DIGITS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">ib&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">MP_DIGIT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ib&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a_used&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b_i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can improve on two fronts here. First NSS should use PCLMUL to speed up the ghash multiplication if possible. Second if PCLMUL is not available, NSS should use a fast constant-time implementation.&lt;/p>
&lt;p>&lt;a class="link" href="https://bugzilla.mozilla.org/show_bug.cgi?id=868948" target="_blank" rel="noopener"
>Bug 868948&lt;/a> has several attempts of speeding up the software implementation without introducing timing side-channels. Unfortunately the fastest code that was proposed uses table lookups and is therefore not constant-time. Thanks to &lt;a class="link" href="https://www.bearssl.org/constanttime.html" target="_blank" rel="noopener"
>Thomas Pornin&lt;/a> I found a nicer way to implement the binary multiplication in a way that doesn&amp;rsquo;t leak any timing information and is still faster than any other code I&amp;rsquo;ve seen. (Check out Thomas&amp;rsquo; excellent write-up for details.)&lt;/p>
&lt;p>If PCLMUL is available on the CPU, using it is of course the way to go. All modern compilers support intrinsics, which allows us to write &amp;ldquo;inline assembly&amp;rdquo; in C that runs on all platforms without having to write assembly. A hardware accelerated implementation of the ghash multiplication can be &lt;a class="link" href="https://searchfox.org/nss/rev/40ab32e6acb227e7ede4734573e448ff43d179d5/lib/freebl/gcm.c#314" target="_blank" rel="noopener"
>easily implemented&lt;/a> with &lt;a class="link" href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=clmul&amp;amp;expand=641" target="_blank" rel="noopener"
>&lt;code>_mm_clmulepi64_si128&lt;/code>&lt;/a>.&lt;/p>
&lt;p>On Mac and Linux the new 32-bit and 64-bit software ghash functions (faster and constant-time) are used on the respective platforms if PCLMUL or AVX is not available. Since Windows doesn&amp;rsquo;t support 128-bit integers (outside of registers) NSS falls back to the slower 32-bit ghash code (which is still more than 25% faster).&lt;/p>
&lt;h1 id="improving-aes-performance">Improving AES performance
&lt;/h1>&lt;p>To speed up AES NSS requires hardware acceleration on Mac as well as on Linux 32-bit and any machine that doesn&amp;rsquo;t support AVX (or has it disabled). When NSS can&amp;rsquo;t use the specialised AES code it falls back to a table-based implementation that is again not constant-time (in addition to being slow). Implementing AES with &lt;a class="link" href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=aes&amp;amp;expand=641" target="_blank" rel="noopener"
>intrinsics&lt;/a> is a breeze.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_mm_xor_si128&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">keySchedule&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">cx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Nr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_mm_aesenc_si128&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">keySchedule&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_mm_aesenclast_si128&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">keySchedule&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">cx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Nr&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_mm_storeu_si128&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kr">__m128i&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Key expansion is a little bit more involved (for 192 and 256 bit). But is &lt;a class="link" href="https://searchfox.org/nss/rev/40ab32e6acb227e7ede4734573e448ff43d179d5/lib/freebl/rijndael.c#393" target="_blank" rel="noopener"
>written&lt;/a> in about 100 lines as well.&lt;/p>
&lt;p>Mac sees the biggest improvement here. Previously, only Windows and 64-bit Linux used AES-NI, and now all desktop x86 and x64 platforms use it when available.&lt;/p>
&lt;h1 id="looking-at-the-numbers">Looking at the numbers
&lt;/h1>&lt;p>To measure the performance gain of the new AES-GCM code I encrypt a 479MB file with a 128-bit key (the most widely used key size for AES-GCM). Note that these numbers are supposed to show a trend and heavily depend on the used machine and system load at the time.&lt;/p>
&lt;p>Linux measurements are done on an Intel Core i7-4790, Windows measurements on a Surface Pro 2 with an Intel Core i5-4300U, and Mac (Core i7-4980HQ).&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/aes-gcm-speedup/linux64-encrypt.png"
width="665"
height="412"
srcset="https://www.franziskuskiefer.de/p/aes-gcm-speedup/linux64-encrypt_hu_b15de098b1144d0f.png 480w, https://www.franziskuskiefer.de/p/aes-gcm-speedup/linux64-encrypt_hu_595bdc315318072.png 1024w"
loading="lazy"
alt="Linux 64-bit encrypt"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>
&lt;img src="https://www.franziskuskiefer.de/p/aes-gcm-speedup/linux32-encrypt.png"
width="657"
height="407"
srcset="https://www.franziskuskiefer.de/p/aes-gcm-speedup/linux32-encrypt_hu_1b8c84b88fdb7236.png 480w, https://www.franziskuskiefer.de/p/aes-gcm-speedup/linux32-encrypt_hu_6cd5f261677dca18.png 1024w"
loading="lazy"
alt="Linux 32-bit encrypt"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;p>On 64-bit Linux performance of any machine without AES, PCLMUL, or AVX instructions AES-GCM 128 is at least twice as fast now. If AES and PCLMUL is available, the new code only needs 33% of the time the old code took.
The speed-up for 32-bit Linux is obviously more significant as it didn&amp;rsquo;t have any hardware accelerated code before. With full hardware acceleration the new code is more than 5 times faster than before. In the worst case, when PCLMUL is not available, the speed-up is still more than 50%.&lt;/p>
&lt;p>The story is similar on Windows (though NSS had fast code for 32-bit there before).
&lt;img src="https://www.franziskuskiefer.de/p/aes-gcm-speedup/win64-encrypt.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/aes-gcm-speedup/win64-encrypt_hu_79ecb61b925e7e01.png 480w, https://www.franziskuskiefer.de/p/aes-gcm-speedup/win64-encrypt_hu_ffeff8d750e3e1d0.png 1024w"
loading="lazy"
alt="Windows 64-bit encrypt"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/aes-gcm-speedup/win32-encrypt.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/aes-gcm-speedup/win32-encrypt_hu_c9c434eb89453188.png 480w, https://www.franziskuskiefer.de/p/aes-gcm-speedup/win32-encrypt_hu_94ad5e97af38e585.png 1024w"
loading="lazy"
alt="Windows 32-bit encrypt"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>Performance improvements on Mac (64-bit only) range from 60% in the best case to 44% when AES-NI or PCLMUL is not available.
&lt;img src="https://www.franziskuskiefer.de/p/aes-gcm-speedup/mac-encrypt.png"
width="600"
height="371"
srcset="https://www.franziskuskiefer.de/p/aes-gcm-speedup/mac-encrypt_hu_9d1fbc2fd46b74bf.png 480w, https://www.franziskuskiefer.de/p/aes-gcm-speedup/mac-encrypt_hu_f075882d1ea0a6ef.png 1024w"
loading="lazy"
alt="OS-X encrypt"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h1 id="the-numbers-in-firefox">The numbers in Firefox
&lt;/h1>&lt;p>NSS 3.32 (Firefox 56) will ship with the new AES-GCM code. It will provide significantly reduced CPU usage for most TLS connections or higher download rates. NSS 3.32 is more intelligent in detecting the CPU&amp;rsquo;s capabilities and using hardware acceleration whenever possible. Assuming that all intrinsics and mathematical operations (other than division) are constant-time on the CPU, the new code doesn&amp;rsquo;t have any timing side-channels.&lt;/p>
&lt;p>On the basic laptop with the AMD C-70 download rates increased from ~3MB/s to ~6MB/s. (Keep in mind that this is the software only 32-bit implementation.)&lt;/p>
&lt;p>The most immediate effect can be seen on Mac. &lt;code>AES_Decrypt&lt;/code> as part of a TLS connection with &lt;a class="link" href="http://bit.ly/2rGm8S0" target="_blank" rel="noopener"
>NSS 3.31 used 9% CPU&lt;/a> while in &lt;a class="link" href="http://bit.ly/2rGvGfz" target="_blank" rel="noopener"
>NSS 3.32 it uses only 4%&lt;/a>.
To see general performance improvements we can look at the case where AVX is not available (which is the case for about 2/3 of the Firefox population). Assuming that at least AES-NI and PCLMUL is supported by the CPU we see the CPU usage drop from &lt;a class="link" href="https://perfht.ml/2rrqbWS" target="_blank" rel="noopener"
>15%&lt;/a> to &lt;a class="link" href="https://perfht.ml/2sa3aoA" target="_blank" rel="noopener"
>3%&lt;/a> (measured on Linux).&lt;/p></description></item><item><title>On Constant Time Division</title><link>https://www.franziskuskiefer.de/p/on-constant-time-division/</link><pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/on-constant-time-division/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/on-constant-time-division/plot_low-1.png" alt="Featured image of post On Constant Time Division" />&lt;p>Writing constant time code is hard. We all know that. But I&amp;rsquo;m always amazed again on how difficult it is. In preparation for making NSS more constant time I looked into certain CPU instructions that are known to be not constant time.
So I wrote a little thing to measure the time (CPU cycles) needed for division.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">div&lt;/span> &lt;span class="no">rcx&lt;/span> &lt;span class="c1">; eax is now a/b
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The CPU I&amp;rsquo;m using in this post is an Intel i7-4790 (haswell). Running the same measurements on other processors architectures will most likely yield different results. I&amp;rsquo;m describing two experiments I did. First, I look at bits in the divisor and how they influence the timing of the division. And then I look at the dividend and its influence.&lt;/p>
&lt;h1 id="the-divisor">The Divisor
&lt;/h1>&lt;p>There are two interesting things we can look at here. The very small divisors as well as the pattern that we get in larger divisors.&lt;/p>
&lt;h2 id="-129">&amp;lt; 129
&lt;/h2>&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/on-constant-time-division/plot_low-1.png"
width="2558"
height="1347"
srcset="https://www.franziskuskiefer.de/p/on-constant-time-division/plot_low-1_hu_fdb3d05d68bef2e8.png 480w, https://www.franziskuskiefer.de/p/on-constant-time-division/plot_low-1_hu_29153d0125de3c2d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>This graph plots the number of cycles needed for the division of numbers &amp;lt; 130. It&amp;rsquo;s easy to see that the number of cycles needed is in general around 300. However, there are a couple of &amp;ldquo;outliers&amp;rdquo; that need significantly less.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">128&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">64&lt;/span> &lt;span class="mi">135&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">32&lt;/span> &lt;span class="mi">132&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">16&lt;/span> &lt;span class="mi">132&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">8&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">2&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="mi">126&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might have spotted the pattern already. The CPU probably doesn&amp;rsquo;t want to do this expensive division and simply shifts the dividend to get the result. This trend continues later on but is more difficult to observe. (And there&amp;rsquo;s a more interesting pattern there.)&lt;/p>
&lt;h2 id="the-larger-pattern">The larger pattern
&lt;/h2>&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/on-constant-time-division/plot-1.png"
width="2558"
height="1347"
srcset="https://www.franziskuskiefer.de/p/on-constant-time-division/plot-1_hu_99759b9081b2391a.png 480w, https://www.franziskuskiefer.de/p/on-constant-time-division/plot-1_hu_a3074d5514f86497.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>The graph shows a striking pattern and makes it obvious that division is not constant-time. Let&amp;rsquo;s try to understand what&amp;rsquo;s happening here.&lt;/p>
&lt;p>The first part of the pattern can be explained by changing bit-lengths in the divisor. At &lt;code>8191&lt;/code> and &lt;code>16383&lt;/code> for example a streak of fast division ends. This is probably because the &lt;code>8192&lt;/code> and &lt;code>16384&lt;/code> require an additional bit each.&lt;/p>
&lt;p>However, I&amp;rsquo;m clueless on how to explain the rest of the pattern.&lt;/p>
&lt;p>(I&amp;rsquo;ll update this post when I figured out what&amp;rsquo;s going on.)&lt;/p></description></item><item><title>NSS Static Analysis</title><link>https://www.franziskuskiefer.de/p/nss-static-analysis/</link><pubDate>Wed, 25 May 2016 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/nss-static-analysis/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/nss-static-analysis/static-analysis.png" alt="Featured image of post NSS Static Analysis" />&lt;p>When I started working on &lt;a class="link" href="https://nss-crypto.org/" target="_blank" rel="noopener"
>NSS&lt;/a> 7 months ago one of the tasks I was asked to do was to work through the related &lt;a class="link" href="https://www.coverity.com/" target="_blank" rel="noopener"
>Coverity&lt;/a> issues. This post summarises some learnings from this as we&amp;rsquo;ve since come a long way since over the last months.&lt;/p>
&lt;p>Static analysis plays a crucial part in locating vulnerabilities and bugs during development. For NSS we currently use multiple &lt;a class="link" href="https://scan.coverity.com/projects/nss/" target="_blank" rel="noopener"
>static&lt;/a> &lt;a class="link" href="http://clang-analyzer.llvm.org/scan-build.html" target="_blank" rel="noopener"
>analysis&lt;/a> &lt;a class="link" href="http://fbinfer.com" target="_blank" rel="noopener"
>tools&lt;/a>. While scan-build as well as infer are great applications to find bugs, they require a lot of manual management. Features such as the &lt;code>incremental&lt;/code> analysis of infer help with that though. Nonetheless, Coverity with its rich interface is the tool driving day to day analysis of NSS.&lt;/p>
&lt;p>When I started working on static analysis issues in NSS we only had Coverity scans for NSS releases &lt;a class="link" href="https://scan.coverity.com/projects/firefox/" target="_blank" rel="noopener"
>in Firefox&lt;/a>, which meant that we had to wait for six weeks or more to get feedback from the analyser on possible bugs. Now we have regular scans of the &lt;a class="link" href="https://scan.coverity.com/projects/nss/" target="_blank" rel="noopener"
>NSS tree&lt;/a> as well as local scans with scan-build and infer.&lt;/p>
&lt;h1 id="challenges-of-a-crypto-library">Challenges of a crypto library
&lt;/h1>&lt;p>A big challenge when doing static analysis of a low-level (cryptographic) library is the high number of false positives. Errors like &lt;code>tainted value&lt;/code> can very likely be totally benign code that shifts around some bits as often necessary for efficiently and securely implemented crypto algorithms. Many false positives also mean a lot of work without actually improving the code and an increased probability of missing an actual bug.&lt;/p>
&lt;h1 id="dealing-with-technical-debt">Dealing with technical debt
&lt;/h1>&lt;p>A library as old as NSS naturally comes with a lot of technical debt, which creates a huge backlog of static analysis bugs. Mostly in code that hasn&amp;rsquo;t been of big interested to most developers so far.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/nss-static-analysis/static-analysis.png"
width="848"
height="592"
srcset="https://www.franziskuskiefer.de/p/nss-static-analysis/static-analysis_hu_213fb67cb88acdbf.png 480w, https://www.franziskuskiefer.de/p/nss-static-analysis/static-analysis_hu_e07580a8380bd653.png 1024w"
loading="lazy"
alt="Coverity Analysis Overview"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p>
&lt;p>In our case tools such as Coverity come in especially handy as they allow for regular incremental scans with automatic updates on new bugs. We still have a long way to go to fix old bugs but the good news is that new bugs are rarely introduced and newly introduced bugs get fixed right away.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/nss-static-analysis/density.png"
width="848"
height="300"
srcset="https://www.franziskuskiefer.de/p/nss-static-analysis/density_hu_52c0518069b87049.png 480w, https://www.franziskuskiefer.de/p/nss-static-analysis/density_hu_5166819bacb04c96.png 1024w"
loading="lazy"
alt="Coverity density over time"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="678px"
>&lt;/p>
&lt;p>The long-term goal is obviously to reduce the backlog of bugs to an acceptable level by either fixing or removing the code. But I think static analysis tools already significantly improved the quality of all new code.&lt;/p></description></item><item><title>RawGit Firefox Extension</title><link>https://www.franziskuskiefer.de/p/rawgit-firefox-extension/</link><pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/rawgit-firefox-extension/</guid><description>&lt;p>&lt;del>This extension doesn&amp;rsquo;t work from Firefox 57 on. I might update it when I find time.&lt;/del>&lt;/p>
&lt;p>Ever wanted to view HTML pages directly from GitHub? Me too. Unfortunately the &lt;code>Raw&lt;/code> button doesn&amp;rsquo;t render the HTML but only displays the source code. There are a bunch of Chrome extensions that add a button to open file from Github at &lt;code>rawgit&lt;/code> directly, but none for Firefox. So I wrote one. It&amp;rsquo;s still an early version and more of a hack than a real extension, but it works (mostly).&lt;/p>
&lt;p>Instead of
&lt;img src="https://www.franziskuskiefer.de/p/rawgit-firefox-extension/Screenshot-from-2016-01-02-15-19-58.png"
width="247"
height="37"
srcset="https://www.franziskuskiefer.de/p/rawgit-firefox-extension/Screenshot-from-2016-01-02-15-19-58_hu_b552212164e1bc7d.png 480w, https://www.franziskuskiefer.de/p/rawgit-firefox-extension/Screenshot-from-2016-01-02-15-19-58_hu_54f524f6fa4e68b6.png 1024w"
loading="lazy"
alt="without extension"
class="gallery-image"
data-flex-grow="667"
data-flex-basis="1602px"
>&lt;/p>
&lt;p>you get now&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/p/rawgit-firefox-extension/Screenshot-from-2016-01-02-15-19-28.png"
width="312"
height="36"
srcset="https://www.franziskuskiefer.de/p/rawgit-firefox-extension/Screenshot-from-2016-01-02-15-19-28_hu_47739d3c580b5902.png 480w, https://www.franziskuskiefer.de/p/rawgit-firefox-extension/Screenshot-from-2016-01-02-15-19-28_hu_6f2ccff7fbc879d.png 1024w"
loading="lazy"
alt="with extension"
class="gallery-image"
data-flex-grow="866"
data-flex-basis="2080px"
>&lt;/p>
&lt;p>Download the source code at &lt;a class="link" href="https://github.com/franziskuskiefer/firefox-rawgit" target="_blank" rel="noopener"
>Github&lt;/a> or download the &lt;a class="link" href="https://github.com/franziskuskiefer/firefox-rawgit/releases" target="_blank" rel="noopener"
>signed extension&lt;/a>.&lt;/p></description></item><item><title>Submitting through Editorial Manager</title><link>https://www.franziskuskiefer.de/p/submitting-through-editorial-manager/</link><pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/submitting-through-editorial-manager/</guid><description>&lt;p>Today I had to submit a paper through the Editorial Manager (used by Springer) for the first time. Needless to say that it&amp;rsquo;s not as easy as it sounds. Therefore here some helpful links for everyone having to do the same. I ended up putting the references in the .tex file as nothing else worked for me.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.bartneck.de/2010/09/30/submitting-your-latex-manuscript-to-editorial-manager-springer-elsevier/" target="_blank" rel="noopener"
>http://www.bartneck.de/2010/09/30/submitting-your-latex-manuscript-to-editorial-manager-springer-elsevier/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://drezha.me.uk/post/22719621060/submitting-a-springerlink-elsvier-journal-using" target="_blank" rel="noopener"
>http://drezha.me.uk/post/22719621060/submitting-a-springerlink-elsvier-journal-using&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>OpenVPN HowTo</title><link>https://www.franziskuskiefer.de/p/openvpn-howto/</link><pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/openvpn-howto/</guid><description>&lt;p>&lt;a class="link" href="https://openvpn.net" target="_blank" rel="noopener"
>OpenPVN&lt;/a> is an easy to set-up and use VPN solution that offer &lt;a class="link" href="https://en.wikipedia.org/wiki/TUN/TAP" target="_blank" rel="noopener"
>TUN/TAP&lt;/a> support. In this tutorial I describe how to set-up an OpenVPN connection between a Ubuntu server and an Arch client.&lt;/p>
&lt;h1 id="preparations-server">Preparations (Server)
&lt;/h1>&lt;p>First we have to install OpenVPN on the server.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># apt-get install openvpn&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To see whether TUN/TAP is enabled in the kernel we can check the kernel log &lt;code>grep tun /var/log/kern.log&lt;/code> and load it if it doesn&amp;rsquo;t show up &lt;code>modprobe tun&lt;/code>.&lt;/p>
&lt;h2 id="creating-a-pki">Creating a PKI
&lt;/h2>&lt;p>To use OpenVPN we need a PKI and certificates. Fortunately there is a script for that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># apt-get install easy-rsa&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First we create a folder to store our certificates in &lt;code>mkdir easy-rsa&lt;/code> and get the default variables file &lt;code>cp /usr/share/easy-rsa/vars easy-rsa&lt;/code>. The file is prefilled but one may want to change&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">KEY_COUNTRY&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">KEY_PROVINCE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">KEY_CITY&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">KEY_ORG&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">KEY_EMAIL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">KEY_OU&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All other standard parameteres should usually be fine but can be changed if desired. Now we change to &lt;code>/usr/share/easy-rsa&lt;/code> and load the variables &lt;code># source &amp;lt;PATH_TO_VARS&amp;gt;/vars&lt;/code> and run &lt;code>./build-ca&lt;/code>. If there have been keys before one should run &lt;code>./clean-all&lt;/code> first.&lt;/p>
&lt;p>Now we can start creating keys and sign them. First we create the server key with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ./build-key-server my-test-server&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and aswer with &lt;code>yes&lt;/code> two times. We do the same for a client key&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ./build-key my-test-client&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To build Diffie-Hellman parameters we run &lt;code>./build-dh&lt;/code> &lt;em>(this can take some time)&lt;/em>. Eventually we create an HMAC key for our VPN and store it with the other keys&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># openvpn --genkey --secret /usr/share/easy-rsa/keys/ta.key&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="configuring-openvpn-server">Configuring OpenVPN (Server)
&lt;/h1>&lt;p>Everything is set-up now to configure and run the OpenVPN server. First we copy the sample configuration file to the correct folder&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># gzip -d /etc/openvpn/server.conf.gz&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At least the following changes to &lt;code>server.conf&lt;/code> should be made after copying keys, parameters and certificates.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ca /etc/openvpn/ca.crt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cert /etc/openvpn/my-test-server.crt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key /etc/openvpn/my-test-server.key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dh /etc/openvpn/dh2048.pem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tls-auth /etc/openvpn/ta.key &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">user nobody
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">group nobody
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="starting-openvpn-server">Starting OpenVPN (Server)
&lt;/h1>&lt;p>The server can now be started with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">openvpn /etc/openvpn/server.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="configuring-openvpn-client">Configuring OpenVPN (Client)
&lt;/h1>&lt;p>First we have to get key, certificate and parameters from the server to the client. Now we install OpenVPN on the client &lt;code>pacman -S openpvpn&lt;/code> copy the sample-configuration file somewhere nice &lt;code># cp /usr/share/openvpn/examples/client.conf /etc/openvpn/client.conf&lt;/code> and modify at least the following&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">remote test-server-ip &lt;span class="m">1194&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ca /etc/openvpn/ca.crt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cert /etc/openvpn/my-test-client.crt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key /etc/openvpn/my-test-client.key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dh /etc/openvpn/dh2048.pem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tls-auth /etc/openvpn/ta.key &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">user nobody
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">group nobody
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;em>test-server-ip&lt;/em> has to be replaced with the server&amp;rsquo;s IP or URL. Now we can also start the client &lt;code># openvpn /etc/openvpn/client.conf&lt;/code>. The start-up should end with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Initialization Sequence Completed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Snort, Barnyard2 &amp; Snorby</title><link>https://www.franziskuskiefer.de/p/snort-barnyard2-snorby/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/snort-barnyard2-snorby/</guid><description>&lt;p>&lt;strong>This post is work in progress but I never got around to finishing it. Sorry&lt;/strong>&lt;/p>
&lt;p>After a first failed attempt to install Snorby on an Arch Linux server (Snorby requires Ruby 1.9.x, Arch uses 2.x and I&amp;rsquo;m not willing to use the AUR version for this) I&amp;rsquo;m doing this on a Ubuntu 14.04 Server.&lt;/p>
&lt;h1 id="snort">Snort
&lt;/h1>&lt;p>Before installing Snorby we have to install snort itself. This can be done with &lt;code>sudo apt-get install snort&lt;/code>. Snort asks for a network address range to use for &lt;code>HOME_NET&lt;/code>. Since I&amp;rsquo;m not sure what to use here (the network may change), I just use standard value. This can later be changed using snort config files.&lt;/p>
&lt;p>For testing purposes I add a new rule file in &lt;code>/etc/snort/rules/&lt;/code> with a very basic rule that logs everything. &lt;em>You really shouldn&amp;rsquo;t do this in productive use, this will spam your snort output.&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">file: test.rules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">alert ip any any -&amp;gt; any any &lt;span class="o">(&lt;/span>msg:&lt;span class="s2">&amp;#34;Someone tried to access the server&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> sid:100001&lt;span class="p">;&lt;/span> rev:1&lt;span class="p">;&lt;/span> priority:2&lt;span class="p">;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use the new rule file you have to include it in the snort config &lt;code>/etc/snort/snort.conf&lt;/code> by adding a line &lt;code>include $RULE_PATH/test.rules&lt;/code>.&lt;/p>
&lt;h2 id="configuration">Configuration
&lt;/h2>&lt;p>In order to inspect outgoing traffic I had to add the &lt;code>-k none&lt;/code> option to Snort in order to disable checksum tests for TCP connections (cf. &lt;a class="link" href="https://serverfault.com/questions/554713/snort-not-detecting-outgoing-traffic" target="_blank" rel="noopener"
>serverfault&lt;/a>). The option can be permanently added by adding it to &lt;code>PARAMS&lt;/code> in &lt;code>/etc/default/snort&lt;/code>.&lt;/p>
&lt;h2 id="rules">Rules
&lt;/h2>&lt;p>A common requirement for rules on a server is to inspect outgoing documents for suspicious content. Checking for example if a website contains a certain string can be done as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">alert tcp any &lt;span class="m">80&lt;/span> -&amp;gt; any any &lt;span class="o">(&lt;/span>file_data&lt;span class="p">;&lt;/span> content:&lt;span class="s2">&amp;#34;Placeholder&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> flow:to_client,established&lt;span class="p">;&lt;/span> msg:&lt;span class="s2">&amp;#34;Detected placeholderwebsite&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> sid:1000002&lt;span class="p">;&lt;/span> rev:1&lt;span class="p">;&lt;/span> priority:2&lt;span class="p">;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order for this rule to work properly one has to make sure that &lt;code>snort.conf&lt;/code> contains at least the following elements for &lt;code>http_inspect_server&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">xtended_response_inspection &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>inspect_gzip &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>normalize_utf &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>server_flow_depth &lt;span class="m">0&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>normalize_javascript
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="snorby">Snorby
&lt;/h2>&lt;p>Before installing snorby I need to make sure that certain software is installed.&lt;/p>
&lt;h3 id="prerequesite">Prerequesite
&lt;/h3>&lt;p>The base system is a fresh Ubuntu 14.04 Server installation. Before installing Snorby we have to make sure that all requirements are installed. The &lt;a class="link" href="http://snorby.org" target="_blank" rel="noopener"
>Snorby website&lt;/a> lists the following dependencies: &lt;code>git&lt;/code>, &lt;code>ruby&lt;/code>, &lt;code>ImageMagick&lt;/code> and &lt;code>Wkhtmltopdf&lt;/code>. But installing dependencies is not as easy as it sounds. I&amp;rsquo;m on a headless server and don&amp;rsquo;t want to install video drivers. So what to do with the strange &lt;code>Wkhtmltopdf&lt;/code> package? And why the heck does a headless application need X? But luckily there is a ruby gem of wkhtmltopdf that does not need any X component (documentation of Snorby is really bad here). So we just use &lt;code>sudo gem install wkhtmltopdf&lt;/code> and we are good (ignore the errors during installation). We also have to install &lt;code>ruby-dev&lt;/code> and &lt;code>make&lt;/code> on Ubuntu. Further we need &lt;code>mysql-server&lt;/code> installed. To get rails and bundler we have to install them with &lt;code>sudo gem install bundler&lt;/code> and &lt;code>sudo gem install rails&lt;/code>.&lt;/p>
&lt;h3 id="installing-snorby">Installing Snorby
&lt;/h3>&lt;p>Now we need to get snorby sources&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone https://github.com/Snorby/snorby
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After changing to the &lt;code>cd snorby&lt;/code> directory we can install it using &lt;code>bundle install&lt;/code>.&lt;/p>
&lt;p>Now we have to configure snorby to be able to read events from the database. To do so we copy &lt;code>database.yml.example&lt;/code> in the &lt;code>config&lt;/code> folder to &lt;code>database.yml&lt;/code> and change the database configuration to access MySQL. Further we copy &lt;code>snorby_config.yml.example&lt;/code> to &lt;code>snorby_config.yml&lt;/code> and check that &lt;code>wkhtmltopdf&lt;/code> and &lt;code>domain&lt;/code> are correct in the &lt;code>production&lt;/code> section. It seems there are more dependencies needed (in particular &lt;code>nokogiri&lt;/code> needs more). So we have to install &lt;code>libxml2-dev&lt;/code>, &lt;code>libxslt-dev&lt;/code>, &lt;code> libmysqlclient-dev&lt;/code>, &lt;code>g++&lt;/code>.&lt;/p>
&lt;p>Now we should be able to run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">bundle &lt;span class="nb">exec&lt;/span> rake snorby:setup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>to set-up snorby and start it with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">bundle &lt;span class="nb">exec&lt;/span> rails server -e production
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="instaling-barnyard2">Instaling Barnyard2
&lt;/h2>&lt;p>To get the snort output into our Snorby interface we use &lt;a class="link" href="https://github.com/firnsy/barnyard2" target="_blank" rel="noopener"
>Barnyard2&lt;/a>. Since there is no package for Ubuntu in the official repositories we have to build Barnyard2 from source.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone https://github.com/firnsy/barnyard2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To build Barnyard2 we need some developement tools&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-get install build-essential libtool autoconf libpcap-dev libmysqld-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After changing to the Barnyard2 directory &lt;code>cd barnyard2&lt;/code> we run &lt;code>./autogen.sh&lt;/code>, configure it for MySQL &lt;code>./configure --with-mysql --with-mysql-libraries=/usr/lib/x86_64-linux-gnu/&lt;/code> (the additional library and include path are necessary on Ubuntu to find MySQL) run &lt;code>make&lt;/code>. I only enable MySQL here, but other outpus are possible. To eventually install Barnyard to we use &lt;code>sudo make install&lt;/code>.&lt;/p>
&lt;p>After installing Barnyard2 it needs configuration. First I copy the example config file &lt;code>sudo cp etc/barnyard2.conf /etc/&lt;/code> before modifying it to run as a daemon and write to the database&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">config daemon
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">config hostname: localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">config interface: eth0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">output database: log, mysql, &lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>root &lt;span class="nv">password&lt;/span>&lt;span class="o">=&lt;/span>root &lt;span class="nv">dbname&lt;/span>&lt;span class="o">=&lt;/span>snort &lt;span class="nv">host&lt;/span>&lt;span class="o">=&lt;/span>localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">config logdir: /var/log/barnyard2/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">config waldo_file: /var/log/barnyard2/barnyard2.waldo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="database-setup">Database Setup
&lt;/h3>&lt;p>We have to set up the Barnyard2 database. We create a new database &lt;code>create database snort;&lt;/code>, get the Barnyard2 schema&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget https://raw.github.com/firnsy/barnyard2/master/schemas/create_mysql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and install it to our new database &lt;code>mysql -u &amp;lt;user&amp;gt; -p snort &amp;lt; create_mysql&lt;/code>.&lt;/p>
&lt;h3 id="troubleshooting">Troubleshooting
&lt;/h3>&lt;p>I ran into the problem that snort had no &lt;code>sid-msg.map&lt;/code>. This can be created with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># /usr/share/oinkmaster/create-sidmap.pl rules/ &amp;gt; sid-msg.map&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>in &lt;code>/etc/snort&lt;/code>. I ran into some further problems and had to create the waldo file manually, i.e.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo touch /var/log/barnyard2/barnyard2.waldo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chown snort:snort /var/log/barnyard2/barnyard2.waldo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This still throws a warning that the waldo file is corrupt, but Barnyard2 is at least running. I got a lot of warnings of the form&lt;/p>
&lt;pre>&lt;code>WARNING: Can't extract timestamp extension from '..'using base ''
from old/corrupted snort log files. So I removed all logs from `/var/log/snort/`. Note that this warning is also shown when the snort log is empty!
&lt;/code>&lt;/pre>
&lt;p>To start Barnyard2 now we use&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo /usr/local/bin/barnyard2 -c /etc/barnyard2.conf -d /var/log/snort/ -f snort.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where the first parameter sets the config file to use, the second tells barynard2 in which folder to look for snort output files and the last one gives the base-name of snort output in that folder.&lt;/p>
&lt;h1 id="testing-the-setup">Testing the setup
&lt;/h1>&lt;p>To test if Snorby is actually working I install and start Apache. This is not necessary since my snort rule from above is logging everything, but you may want to do this anyway to test some real rules. The Snorby web interface is located at &lt;code>http://&amp;lt;server ip&amp;gt;:3000/&lt;/code>. The default credentials are &lt;code>Username: snorby@snorby.org, Password: snorby&lt;/code>.&lt;/p></description></item><item><title>The curious case of pgflibraryfadings</title><link>https://www.franziskuskiefer.de/p/the-curious-case-of-pgflibraryfadings/</link><pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/the-curious-case-of-pgflibraryfadings/</guid><description>&lt;p>Over the last year I was battling a strange error of reverse synctex search with evince and several latex editors. Everything works perfect with synctex unless I want to do a reverse search (click in the pdf docutment and get the according tex position) on the first page. Instead of getting the correct position my latex editor always opens the file &lt;code>pgflibraryfadings.code.tex&lt;/code>. While I finally found the cause of the problem, I have no idea how to solve it. The problem seems to stem from the inclusion of the &lt;code>shadows&lt;/code> tikz library. Without the package included everything works flawless. I filed a bug report at &lt;a class="link" href="https://sourceforge.net/p/pgf/bugs/333/" target="_blank" rel="noopener"
>sourceforge&lt;/a>.&lt;/p></description></item><item><title>Display &amp; Inline Math</title><link>https://www.franziskuskiefer.de/p/display-inline-math/</link><pubDate>Sun, 17 Aug 2014 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/p/display-inline-math/</guid><description>&lt;img src="https://www.franziskuskiefer.de/p/display-inline-math/hero.jpg" alt="Featured image of post Display &amp; Inline Math" />&lt;p>Another day in latex wonderland &amp;hellip; Today I was writing an equation in an &lt;code>aligned&lt;/code> environment using &lt;code>sum&lt;/code> and those fancy things. Unfortunately &lt;code>aligned&lt;/code> is a display math environment such that the limits of &lt;code>sum&lt;/code> are displayed above and below, which was really not suitable in my case. So how do I display inline-math style in a display math environment?&lt;/p>
&lt;p>Let&amp;rsquo;s say we have an equation environment with an equation&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-latex" data-lang="latex">&lt;span class="line">&lt;span class="cl">&lt;span class="k">\begin&lt;/span>&lt;span class="nb">{&lt;/span>equation*&lt;span class="nb">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">\sum&lt;/span>&lt;span class="nb">_{&lt;/span>i=0&lt;span class="nb">}^{&lt;/span>n&lt;span class="nb">}&lt;/span> x&lt;span class="nb">^&lt;/span>i
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">\end&lt;/span>&lt;span class="nb">{&lt;/span>equation*&lt;span class="nb">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To display the &lt;code>sum&lt;/code> as inline math we can simply use &lt;code>\textstyle&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-latex" data-lang="latex">&lt;span class="line">&lt;span class="cl">&lt;span class="k">\begin&lt;/span>&lt;span class="nb">{&lt;/span>equation*&lt;span class="nb">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">{&lt;/span>&lt;span class="k">\textstyle&lt;/span> &lt;span class="k">\sum&lt;/span>&lt;span class="nb">_{&lt;/span>i=0&lt;span class="nb">}^{&lt;/span>n&lt;span class="nb">}&lt;/span> 2&lt;span class="nb">^&lt;/span>i&lt;span class="nb">}&lt;/span> &lt;span class="k">\prod&lt;/span>&lt;span class="nb">_{&lt;/span>i=0&lt;span class="nb">}^{&lt;/span>n&lt;span class="nb">}&lt;/span> i&lt;span class="nb">^&lt;/span>2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">\end&lt;/span>&lt;span class="nb">{&lt;/span>equation*&lt;span class="nb">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the &lt;code>prod&lt;/code> is display math again.&lt;/p></description></item><item><title>About</title><link>https://www.franziskuskiefer.de/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/about/</guid><description>&lt;img src="https://www.franziskuskiefer.de/about/yosemite.jpg" alt="Featured image of post About" />&lt;p>Hi, &lt;strong>I&amp;rsquo;m Franziskus&lt;/strong>, a security &amp;amp; cryptography engineer and researcher based in Berlin.
I&amp;rsquo;m the co-founder of &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a>, a company that builds
custom high assurance cryptography.&lt;/p>
&lt;p>Previously I was leading the security engineering efforts at &lt;a class="link" href="https://wire.com" target="_blank" rel="noopener"
>Wire&lt;/a>.
And before that I was working on &lt;a class="link" href="https://mozilla.org" target="_blank" rel="noopener"
>Mozilla&amp;rsquo;s&lt;/a> cryptography library &lt;a class="link" href="https://en.wikipedia.org/wiki/Network_Security_Services" target="_blank" rel="noopener"
>NSS&lt;/a> and &lt;a class="link" href="https://firefox.com" target="_blank" rel="noopener"
>Firefox&lt;/a>.
I&amp;rsquo;m interested in everything around applied cryptography, in particular authentication and key exchange protocols, &lt;a class="link" href="http://hacspec.org" target="_blank" rel="noopener"
>formally verifiable specifications&lt;/a> and implementations of cryptographic primitives, and privacy preserving data collection and computation.
I&amp;rsquo;m also the initiator and co-organiser of the &lt;a class="link" href="https://berlin-crypto.github.io" target="_blank" rel="noopener"
>Berlin Crypto Meetup&lt;/a>.&lt;/p>
&lt;p>If you want to get in touch, send me a message to mail@ this domain or a DM on &lt;a class="link" href="https://bsky.app/profile/franziskuskiefer.de" target="_blank" rel="noopener"
>Bluesky&lt;/a>, or &lt;a class="link" href="https://calendar.app.google/Rj3eja8srZy6kzYu5" target="_blank" rel="noopener"
>schedule a call&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://www.franziskuskiefer.de/images/profilepic.jpg"
loading="lazy"
>&lt;/p>
&lt;hr>
&lt;h2 id="résumé">Résumé
&lt;/h2>&lt;p>&lt;em>A short overview of my professional life.
A more formal CV can be found &lt;a class="link" href="./cv.pdf" >here as pdf.&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;strong>Co-founder &amp;amp; CEO&lt;/strong> &amp;mdash; &lt;a class="link" href="https://www.cryspen.com" target="_blank" rel="noopener"
>Cryspen&lt;/a>, Since October 2021&lt;/p>
&lt;p>&lt;strong>Co-founder &amp;amp; CEO&lt;/strong> &amp;mdash; &lt;a class="link" href="https://cryptoeng.de" target="_blank" rel="noopener"
>CryptoEng&lt;/a>, Since March 2022&lt;/p>
&lt;p>&lt;strong>Engineer&lt;/strong> &amp;mdash; &lt;a class="link" href="https://openmls.tech" target="_blank" rel="noopener"
>OpenMLS&lt;/a>, October 2021 - March 2022&lt;/p>
&lt;p>&lt;strong>Security Engineering Lead&lt;/strong> &amp;mdash; &lt;a class="link" href="https://wire.com" target="_blank" rel="noopener"
>Wire&lt;/a>, June 2020 - August 2021&lt;/p>
&lt;p>&lt;strong>Head of Cryptography Engineering&lt;/strong> &amp;mdash; &lt;a class="link" href="aisec.fraunhofer.de/" >Fraunhofer AISEC&lt;/a>, January 2020 until May 2020&lt;/p>
&lt;p>&lt;strong>Senior Cryptography/Security Engineer&lt;/strong> &amp;mdash; &lt;a class="link" href="https://mozilla.com" target="_blank" rel="noopener"
>Mozilla&lt;/a>, October 2015 - January 2020&lt;/p>
&lt;p>&lt;strong>Security Engineering Intern&lt;/strong> &amp;mdash; &lt;a class="link" href="https://mozilla.com" target="_blank" rel="noopener"
>Mozilla&lt;/a>, May 2015 - July 2015&lt;/p>
&lt;p>Web Administrator for FMS Group &amp;mdash; &lt;a class="link" href="https://www.surrey.ac.uk/" target="_blank" rel="noopener"
>University of Surrey&lt;/a>, May 2014 - September 2015&lt;/p>
&lt;p>Server Administrator for Group Server &amp;mdash; &lt;a class="link" href="https://www.surrey.ac.uk/" target="_blank" rel="noopener"
>University of Surrey&lt;/a>, March 2013 - September 2015&lt;/p>
&lt;p>Teaching Assistance &amp;mdash; &lt;a class="link" href="https://www.surrey.ac.uk/" target="_blank" rel="noopener"
>University of Surrey&lt;/a>, January 2013 - September 2015&lt;/p>
&lt;!--* 2014-2015 Semester 2:
+ Multimedia Security and Digital Forensics
+ Secure Systems and Applications
* 2014-2015 Semester 1:
+ Induction Tutorials
+ Information and Network Security
+ Symmetric Cryptography
+ Asymmetric Cryptography
+ Web Publishing and Databases
* 2013-2014 Semester 2:
+ Web Hacking &amp; Countermeasures
+ Technologies and Applications
+ Parallel Architectures
+ Advanced Multimedia Security
* 2013-2014 Semester 1:
+ Induction Tutorials
+ Foundations of Computing
* 2012-2013 Semester 2:
+ Web Hacking &amp; Countermeasures-->
&lt;p>Software Developer &amp;mdash; &lt;a class="link" href="https://www.kobil.com/" target="_blank" rel="noopener"
>Flexsecure GmbH&lt;/a>, November 2009 - October 2012&lt;/p>
&lt;hr>
&lt;h3 id="education">Education
&lt;/h3>&lt;p>&lt;strong>PhD in Computer Science (Cryptographic Protocols)&lt;/strong> &amp;mdash; &lt;a class="link" href="https://www.surrey.ac.uk/" target="_blank" rel="noopener"
>University of Surrey&lt;/a>, January 2013 &amp;ndash; February 2016&lt;/p>
&lt;blockquote>
&lt;p>Working on &lt;strong>password-based authentication&lt;/strong> in the PRIMAKE project. The &lt;strong>Private Multi-Party Authentication and Key Exchange (PRIMAKE)&lt;/strong> project aims at the design and analysis of efficient provably private cryptographic protocols that will form a basis for a range of privacy-preserving applications. PRIMAKE protocols will give users full control over their own data, protect their anonymity, and eliminate user profiling. PRIMAKE protocols will have formal proofs of security and privacy, obtained using modern cryptographic techniques.&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>M.Sc. in Computer Sciences (distinction)&lt;/strong> &amp;mdash; &lt;a class="link" href="https://www.tu-darmstadt.de/" target="_blank" rel="noopener"
>Technische Universität Darmstadt&lt;/a>, October 2010 &amp;ndash; October 2012&lt;/p>
&lt;p>&lt;strong>M.Sc. in IT-Security (distinction)&lt;/strong> &amp;mdash; &lt;a class="link" href="https://www.tu-darmstadt.de/" target="_blank" rel="noopener"
>Technische Universität Darmstadt&lt;/a>, October 2010 &amp;ndash; October 2012&lt;/p>
&lt;p>&lt;strong>B.Sc. in Computer Sciences (honours)&lt;/strong> &amp;mdash; &lt;a class="link" href="https://www.tu-darmstadt.de/" target="_blank" rel="noopener"
>Technische Universität Darmstadt&lt;/a>, October 2007 &amp;ndash; October 2010&lt;/p>
&lt;hr>
&lt;h3 id="teaching">Teaching
&lt;/h3>&lt;ul>
&lt;li>2020/2021: &lt;a class="link" href="https://hpi.de/studium/lehrveranstaltungen/it-systems-engineering-ma/lehrveranstaltung/wise-20-21-3172-identity-management-for-secure-messaging.html" target="_blank" rel="noopener"
>Identity Management for Secure Messaging&lt;/a> @ &lt;a class="link" href="https://hpi.de" target="_blank" rel="noopener"
>HPI&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="guest-lectures">Guest Lectures
&lt;/h4>&lt;ul>
&lt;li>2019/2020: Key Exchange &amp;amp; Trust - Establish keys with(out) public key infrastructures @ &lt;a class="link" href="https://www.fu-berlin.de/" target="_blank" rel="noopener"
>FU Berlin&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- https://docs.google.com/presentation/d/1EBy70DGmOILfDs9i3uhRP4gpP4KpNdCKK-7wnSuLg_A/edit#slide=id.p -->
&lt;ul>
&lt;li>2019: WebPKI in Practice - Practical aspects and it&amp;rsquo;s implementation at Mozilla @ &lt;a class="link" href="https://www.tu-darmstadt.de/" target="_blank" rel="noopener"
>TU Darmstadt&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- https://docs.google.com/presentation/d/1W7nb52wIG1FSIIp8KiSM_Wp3lb5GBGBlstDLOIo9nLQ/edit#slide=id.p -->
&lt;ul>
&lt;li>2019: Secure Content Transfer on the Internet @ &lt;a class="link" href="https://www.tu.berlin" target="_blank" rel="noopener"
>TU Berlin&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- https://docs.google.com/presentation/d/13_NFEd5p-LEgAdKJ99wF7kZ2P6JYof079fPoAR0v3jM/edit#slide=id.p3 -->
&lt;hr>
&lt;h3 id="talks-selected">Talks (Selected)
&lt;/h3>&lt;ul>
&lt;li>Asynchronous Remote Key Generation: An Analysis of Yubico’s Proposal for W3C WebAuthn
&amp;mdash; &lt;a class="link" href="https://rwc.iacr.org/2021/program.php#day-2021-01-12" target="_blank" rel="noopener"
>RWC&lt;/a> (&lt;a class="link" href="https://iacr.org/submit/files/slides/2021/rwc/rwc2021/91/slides.pdf" target="_blank" rel="noopener"
>Slides&lt;/a>, &lt;a class="link" href="https://youtu.be/jeQvDLPQsuw?list=PLeeS-3Ml-rpoVMNQkUrFDSfaTuUMxVtjy&amp;amp;t=1787" target="_blank" rel="noopener"
>Video&lt;/a>), January 2021, Online (Presented by Emil Lundberg)&lt;/li>
&lt;li>hacspec - towards verifiable crypto standards
&amp;mdash; &lt;a class="link" href="https://docs.google.com/presentation/d/1QiDo76a1HZ9IUJtpNJUJDxwJ-5JCwdMxsARn0RI4pFw/edit?usp=sharing" target="_blank" rel="noopener"
>SSR&lt;/a>, November 2018, Darmstadt&lt;/li>
&lt;li>HACL* in Mozilla Firefox
&amp;mdash; &lt;a class="link" href="https://rwc.iacr.org/2018/Slides/Beurdouche.pdf" target="_blank" rel="noopener"
>RWC&lt;/a>, January 2018, Zürich&lt;/li>
&lt;li>Universally Composable Two-Server PAKE
&amp;mdash; &lt;a class="link" href="http://manoa.hawaii.edu/isc2016/" target="_blank" rel="noopener"
>ISC&lt;/a>, September 2016, Honolulu&lt;/li>
&lt;li>Oblivious PAKE – Efficient Handling of Password Trials
&amp;mdash; &lt;a class="link" href="http://manoa.hawaii.edu/isc2016/" target="_blank" rel="noopener"
>ISC&lt;/a>, September 2016, Honolulu&lt;/li>
&lt;li>Zero-Knowledge Password Policy Checks and Verifier-Based PAKE
&amp;mdash; &lt;a class="link" href="http://esorics2014.pwr.wroc.pl/" target="_blank" rel="noopener"
>ESORICS&lt;/a>, September 2014, Wroclaw&lt;/li>
&lt;li>Distributed Smooth Projective Hashing and its Application to 2Server PAKE
&amp;mdash; &lt;a class="link" href="http://www.cryptoforma.org.uk/event/meeting-york-28-may-2014/" target="_blank" rel="noopener"
>CryptoForma&lt;/a>, May 2014, York and &lt;a class="link" href="http://acns2014.epfl.ch/" target="_blank" rel="noopener"
>ACNS&lt;/a>, June 2014, Lausanne&lt;/li>
&lt;/ul>
&lt;!-- * Secure Mobile Logins
--- [UoS Seminar](http://www.surrey.ac.uk/computing/news/events/2014/secure_mobile_logins.htm), February 2014, Guildford -->
&lt;ul>
&lt;li>Oblivious PAKE: Efficient Handling of Password Trials
&amp;mdash; &lt;a class="link" href="http://www.cryptoforma.org.uk/event/10th-meeting-1516-april-microsoft-research-cambridge/" target="_blank" rel="noopener"
>CryptoForma&lt;/a>, April 2013, Microsoft Research, Cambridge&lt;/li>
&lt;/ul>
&lt;!-- * Practical Security in E-Mail Applications
SAM, July 2012 Las Vegas --></description></item><item><title>Publications</title><link>https://www.franziskuskiefer.de/publications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/publications/</guid><description>&lt;img src="https://www.franziskuskiefer.de/publications/library.jpg" alt="Featured image of post Publications" />&lt;p>&lt;a class="link" href="http://dblp.dagstuhl.de/pers/hd/k/Kiefer:Franziskus" target="_blank" rel="noopener"
>dblp&lt;/a> | &lt;a class="link" href="https://scholar.google.de/citations?user=10N53SYAAAAJ&amp;amp;hl=en" target="_blank" rel="noopener"
>Google Scholar&lt;/a>&lt;/p>
&lt;h2 id="conferences">Conferences
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>Asynchronous Remote Key Generation: An Analysis of Yubico&amp;rsquo;s Proposal for W3C WebAuthn @ &lt;a class="link" href="https://sigsac.org/ccs/CCS2020/" target="_blank" rel="noopener"
>CCS 2020&lt;/a> • with Nick Frymann, Daniel Gardham, Emil Lundberg, Mark Manulis, and Dain Nilsson (&lt;a class="link" href="https://eprint.iacr.org/2020/1004.pdf" target="_blank" rel="noopener"
>Full version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hacspec: towards verifiable crypto standard @ &lt;a class="link" href="https://ssr2018.net/" target="_blank" rel="noopener"
>SSR 2018&lt;/a> • with Karthikeyan Bhargavan and Pierre-Yves Strub (&lt;a class="link" href="./hacspec-ssr18-paper.pdf" >Full version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Universally Composable Two-Server PAKE @
&lt;a class="link" href="http://manoa.hawaii.edu/isc2016/program.html" target="_blank" rel="noopener"
>ISC 2016&lt;/a> • with Mark Manulis (&lt;a class="link" href="https://eprint.iacr.org/2016/520.pdf" target="_blank" rel="noopener"
>Full version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Blind Password Registration for Two-Server Password Authenticated Key Exchange and Secret Sharing Protocols @
&lt;a class="link" href="http://manoa.hawaii.edu/isc2016/program.html" target="_blank" rel="noopener"
>ISC 2016&lt;/a> • with Mark Manulis (&lt;a class="link" href="./2pass.pdf" >Proceedings version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Blind Password Registration for Verifier-based PAKE @
&lt;a class="link" href="http://www2.nict.go.jp/nsri/fund/asiapkc2016/" target="_blank" rel="noopener"
>AsiaPKC 2016&lt;/a> • with Mark Manulis (&lt;a class="link" href="./KiMa_ASIAPKC16.pdf" >Full version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Secure Set-based Policy Checking and Its Application to Password Registration @
&lt;a class="link" href="http://www.cans2015.org" target="_blank" rel="noopener"
>CANS 2015&lt;/a> • with Changyu Dong (&lt;a class="link" href="https://eprint.iacr.org/2015/945.pdf" target="_blank" rel="noopener"
>Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Oblivious PAKE: Efficient Handling of Password Trials @
&lt;a class="link" href="http://link.springer.com/chapter/10.1007/978-3-319-23318-5_11" target="_blank" rel="noopener"
>ISC 2015&lt;/a> • with Mark Manulis (&lt;a class="link" href="https://eprint.iacr.org/2013/127.pdf" target="_blank" rel="noopener"
>Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Zero-Knowledge Password Policy Checks and Verifier-Based PAKE @
&lt;a class="link" href="http://link.springer.com/chapter/10.1007/978-3-319-11212-1_17" target="_blank" rel="noopener"
>ESORICS 2014&lt;/a> • with Mark Manulis (&lt;a class="link" href="https://eprint.iacr.org/2014/242.pdf" target="_blank" rel="noopener"
>Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Distributed Smooth Projective Hashing and its Application to Two-Server Password Authenticated Key Exchange @
&lt;a class="link" href="https://www.springer.com/computer/security&amp;#43;and&amp;#43;cryptology/book/978-3-319-07535-8" target="_blank" rel="noopener"
>ACNS 2014&lt;/a> • with Mark Manulis (&lt;a class="link" href="https://eprint.iacr.org/2014/350.pdf" target="_blank" rel="noopener"
>Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Revocation and Non-repudiation: When the First Destroys the Latter @
&lt;a class="link" href="https://www.springer.com/computer/communication&amp;#43;networks/book/978-3-642-53996-1" target="_blank" rel="noopener"
>EuroPKI 2013&lt;/a> • with Johannes Braun and Andreas Hülsing (&lt;a class="link" href="./non-repudiation.pdf" >Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pseudorandom Signatures @
&lt;a class="link" href="http://dl.acm.org/citation.cfm?id=2484313" target="_blank" rel="noopener"
>AsiaCCS 2013&lt;/a> • with Nils Fleischhacker, Felix Günther, Mark Manulis, and Bertram Poettering (&lt;a class="link" href="https://eprint.iacr.org/2011/673.pdf" target="_blank" rel="noopener"
>Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Practical Security in E-Mail Applications @
SAM 2012 • with Alexander Wiesmaier and Christian Fritz (&lt;a class="link" href="./Practical-Security-in-E-Mail-Apps.pdf" >Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An efficient mobile PACE implementation @
&lt;a class="link" href="http://dl.acm.org/citation.cfm?id=1966913&amp;amp;coll=DL&amp;amp;dl=GUIDE&amp;amp;CFID=393084620&amp;amp;CFTOKEN=51980528" target="_blank" rel="noopener"
>AsiaCCS 2011&lt;/a> • with Alex Wiesmaier, Moritz Horsch, Johannes Braun, Detlef Hühnlein, Falko Strenzke, and Johannes Buchmann (&lt;a class="link" href="./201103_ASIACCS11_An_efficient_mobile_PACE_implementation.pdf" >Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="journals">Journals
&lt;/h2>&lt;ul>
&lt;li>Secure modular password authentication for the web using channel bindings @
&lt;a class="link" href="https://link.springer.com/article/10.1007/s10207-016-0348-7" target="_blank" rel="noopener"
>International Journal of Information Security 2016&lt;/a> • with Mark Manulis, Douglas Stebila, and Nick Denham (&lt;a class="link" href="https://eprint.iacr.org/2014/731.pdf" target="_blank" rel="noopener"
>Full Version&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h2 id="other">Other
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://gitlab.com/franziskus/phd-thesis/tree/master/phd" target="_blank" rel="noopener"
>Advancements in Password-based Cryptography&lt;/a> (PhD Thesis 2016)
Supervised by &lt;a class="link" href="http://www.manulis.eu" target="_blank" rel="noopener"
>Mark Manulis&lt;/a> and &lt;a class="link" href="http://www.hooklee.com/" target="_blank" rel="noopener"
>Shujun Li&lt;/a>;
Examination panel: &lt;a class="link" href="http://www.surrey.ac.uk/cs/people/steve_schneider/" target="_blank" rel="noopener"
>Steve Schneider&lt;/a> and &lt;a class="link" href="http://homepages.cs.ncl.ac.uk/feng.hao/home.php" target="_blank" rel="noopener"
>Feng Hao&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Group Signatures: Privacy-Preserving Authentication Methods @
&lt;a class="link" href="https://www.bsi.bund.de/EN/" target="_blank" rel="noopener"
>BSI&lt;/a> 2011 • with Nils Fleischhacker, Felix Günther, Mark Manulis, and Bertram Poettering (&lt;a class="link" href="./GruPA.pdf" >Full Report&lt;/a>, &lt;a class="link" href="https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Studies/GruPA/GruPA.pdf" target="_blank" rel="noopener"
>Official Website&lt;/a>))&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Towards a mobile eCard Client @
Kryptotag 2010 • with Alex Wiesmaier, Moritz Horsch, Johannes Braun, Detlef Hühnlein, and Falko Strenzke (&lt;a class="link" href="http://tuprints.ulb.tu-darmstadt.de/2371/1/Tagungsband-13-Kryptotag-Darmstadt.pdf" target="_blank" rel="noopener"
>Full Version&lt;/a>)&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Search</title><link>https://www.franziskuskiefer.de/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.franziskuskiefer.de/search/</guid><description/></item></channel></rss>